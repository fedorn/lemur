#define yy_create_buffer InqArabic_create_buffer
#define yy_delete_buffer InqArabic_delete_buffer
#define yy_scan_buffer InqArabic_scan_buffer
#define yy_scan_string InqArabic_scan_string
#define yy_scan_bytes InqArabic_scan_bytes
#define yy_flex_debug InqArabic_flex_debug
#define yy_init_buffer InqArabic_init_buffer
#define yy_flush_buffer InqArabic_flush_buffer
#define yy_load_buffer_state InqArabic_load_buffer_state
#define yy_switch_to_buffer InqArabic_switch_to_buffer
#define yyin InqArabicin
#define yyleng InqArabicleng
#define yylex InqArabiclex
#define yyout InqArabicout
#define yyrestart InqArabicrestart
#define yytext InqArabictext

#line 19 "../src/InqArabicParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
static yyconst short int yy_accept[504] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   59,
       60,   60,   60,   60,   60,   58,   55,   59,    4,    5,
        4,    4,    4,    1,    3,    4,    4,    4,    4,    4,
        6,    7,   59,    0,   50,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   31,
       58,    0,    0,   58,    0,   59,   56,    4,    4,    1,
        2,    0,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   40,   41,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   58,   58,   57,   56,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    2,    0,    8,    9,   10,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,   35,    0,   36,   37,   38,   39,    0,    0,
        0,    0,    0,   46,   48,   47,   49,   52,    0,    0,
        0,   58,    4,    1,    2,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   11,    0,   12,   23,    0,   24,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   51,    0,    0,   53,   54,   58,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    0,    0,    0,    0,   32,    0,    0,    0,
       33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        0,    0,    0,    0,   21,   17,    0,    0,   22,   18,
        0,    0,    0,    0,    0,   44,    0,   45,   58,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,   13,   14,

       25,   26,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    0,    0,    0,    0,   29,   30,   42,   43,
        4,    4,    4,    4,    4,    4,    4,    4,    0,    0,
        0,    0,    4,    4,    4,    4,    0,    0,    0,    0,
        0,    0,    4,    4,    4,    4,    4,    4,    0,    0,
        0,    0,    0,    0,    4,    4,    4,    4,    4,    4,
        0,    0,    0,    0,    0,    0,    4,    4,    4,    4,
        4,    4,   19,    0,    0,   20,    0,    0,    4,    4,
        4,    4,    4,    4,   15,   27,   16,   28,    4,    4,

        4,    4,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,   10,    4,   11,   12,   13,    4,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    4,   15,    4,
       16,    4,    4,    4,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   27,   38,   39,   40,   27,
        4,    4,    4,    4,   41,    4,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   27,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   27,   62,   63,
       64,   27,    4,    4,    4,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[65] =
    {   0,
        1,    2,    2,    3,    2,    3,    4,    3,    3,    3,
        3,    5,    3,    6,    3,    3,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        5,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6
    } ;

static yyconst short int yy_base[515] =
    {   0,
        0,   56,  112,  168,   15,   23,   34,   42, 1246,    0,
     1247, 1201,  212,    0, 1230,    8, 1247,   24,  271,   71,
       26,   40,  305, 1247, 1247,  367,   69,  380,   44,   74,
     1247, 1247,    0, 1237, 1228,    0,   39,   79,   80,   81,
       58,   77,  165,  169,   77,  100,   71,  103, 1187,  124,
       44,   46,   48, 1198, 1184,  147,  105,   31, 1179,    0,
     1223, 1222, 1221,  135,  139,  182, 1229,  145,  134, 1247,
     1247,  186, 1247,  198,  143,  206,  204,  208,  295,  389,
      211,  284,  391,  393,  280,  292,  308,  346,  243,  253,
      395,  398,  404,  299,  400,  420,  422,  415,  407,  480,

      297,  424,  438, 1219,  456,  495, 1229, 1211, 1185,  170,
     1175, 1192, 1198, 1166, 1172,  169, 1190,  156, 1145, 1159,
     1170, 1123, 1134, 1138, 1113, 1139, 1100, 1145, 1247, 1247,
     1123, 1123,  217, 1097, 1097,  469, 1125, 1123, 1099, 1097,
     1136, 1112, 1087, 1093, 1132, 1131,  224, 1247, 1139,  503,
      282,  449,  501,  290,  505,  301,  507,  410,  509,  511,
      513,  515,  517,  519,  524,  526,  535,  531,  539,  541,
      543,  552,  554,  560,  563,  568,  570,  572,  577,  579,
      581,  594,  596,  598,  601,  605,  607,  610,  612, 1129,
      619, 1247, 1247, 1139, 1247, 1247, 1247, 1120, 1094, 1093,

     1097, 1104, 1071, 1078, 1104,  329, 1110, 1078,  441, 1082,
     1247, 1110, 1247, 1084, 1247, 1247, 1247, 1247, 1090, 1107,
      436, 1064, 1080, 1247, 1247, 1247, 1247, 1106, 1090, 1064,
     1099,  618,  631, 1095, 1090,  633,  635,  637,  640,  643,
      646,  650,  654,  656,  659,  661,  663,  665,  667,  669,
      671,  681,  683,  691,  685,  694,  696,  698,  700,  702,
      705,  712,  714,  720,  722,  730,  732,  734,  736,  738,
      741,  154, 1051,  512,  568, 1247, 1060, 1247, 1022, 1027,
     1017, 1015, 1008,  954,  950,  946,  940,  925,  894,  932,
      902, 1247,  872,  836, 1247, 1247,  430,  743,  745,  749,

      751,  755,  758,  760,  768,  772,  774,  776,  778,  781,
      788,  796,  799,  801,  803,  805,  807,  809,  813,  816,
      820,  828,  860,  828,  843,  816, 1247,  292,  826,  829,
     1247,  328,  780,  778,  794,  756,  777,  777,  744,  732,
      760,  822,  824,  834,  836,  839,  841,  846,  848,  850,
      854,  857,  860,  867,  869,  873,  876,  878,  885,  890,
      726,  676,  694,  668, 1247, 1247,  685,  694, 1247, 1247,
      675,  642,  652,  626,  639, 1247,  610, 1247,  639,  880,
      892,  894,  898,  901,  904,  909,  912,  914,  916,  919,
      921,  924,  927,  930,  932,  935,  937,  939, 1247, 1247,

     1247, 1247,  603,  616,  736,  581,  587,  546,  582,  578,
      948,  950,  955,  957,  959,  961,  963,  965,  968,  970,
      975,  977,  562,  525,  508,  491, 1247, 1247,  522,  515,
      979,  986,  993,  995,  997,  999, 1002, 1004,  295,  470,
      507,  421, 1011, 1006, 1014, 1017,  456,  436,  432,  414,
      376,  380, 1019, 1021, 1023, 1026, 1033, 1037,  407,  397,
      336,  325,  301,  271, 1040, 1043, 1046, 1048, 1052, 1054,
      240,  223,  198,  162,  136,  102, 1061, 1065, 1067, 1058,
     1071, 1075, 1247,  129,   67, 1247,   56,   22, 1077, 1079,
     1081, 1087, 1095, 1097, 1247, 1247, 1247, 1247, 1099, 1101,

     1103, 1107, 1247, 1161, 1167, 1173, 1175, 1181, 1187, 1193,
     1199, 1205, 1211, 1217
    } ;

static yyconst short int yy_def[515] =
    {   0,
      504,  504,  505,  505,    2,    2,    2,    2,  503,  506,
      503,  503,  503,  507,  503,  506,  503,  506,  508,  503,
      509,  509,  509,  503,  503,  510,  509,  508,  509,   28,
      503,  503,  506,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  507,
      503,  503,  503,  506,  503,  506,  511,   28,  509,  503,
      503,  503,  503,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  510,

      509,  509,  509,   28,   28,  512,  513,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  506,  503,  511,  514,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,   28,
      509,  503,  503,  513,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  506,  514,  513,  513,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,   28,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  503,  503,  503,  503,  503,  503,  503,  503,
      509,  509,  509,  509,  509,  509,  509,  509,  503,  503,
      503,  503,  509,  509,  509,  509,  503,  503,  503,  503,
      503,  503,  509,  509,  509,  509,  509,  509,  503,  503,
      503,  503,  503,  503,  509,  509,  509,  509,  509,  509,
      503,  503,  503,  503,  503,  503,  509,  509,  509,  509,
      509,  509,  503,  503,  503,  503,  503,  503,  509,  509,
      509,  509,  509,  509,  503,  503,  503,  503,  509,  509,

      509,  509,    0,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503
    } ;

static yyconst short int yy_nxt[1312] =
    {   0,
      503,   11,   11,   11,   11,   12,   13,   11,   11,   14,
       11,   11,   15,   16,   17,   11,   20,   20,   62,   20,
       63,   64,   31,   25,   20,   20,  503,   20,   65,  108,
       31,   25,   18,   70,   71,   20,   20,   66,   20,   67,
       11,   32,   25,   20,   20,  503,   20,   70,   71,   32,
       25,   70,   71,  109,  503,  110,   18,   11,   11,   11,
       11,   12,   13,   11,   11,   14,   11,   11,   15,   16,
       17,   11,   72,   72,  124,   72,   70,   71,   65,   73,
      111,   65,  101,   74,   69,  498,   69,  105,   18,  106,
      136,  139,   67,  114,  140,  118,   11,  122,  115,  125,

      119,  497,  123,  112,  116,  120,  496,  126,  141,  113,
      117,  121,   18,   20,   20,   21,   20,   22,   23,   24,
       25,   26,   21,   21,   27,   28,   29,   21,  114,  118,
      122,  127,  141,  115,  119,  123,  137,  142,  133,  138,
      144,   70,   71,   65,   30,   62,  134,   63,  147,  495,
       70,   71,   21,  135,   67,   69,   75,   69,   68,  488,
      139,  143,  133,  140,   69,  111,  128,  272,   30,   20,
       20,   21,   20,   22,   23,   24,   25,   26,   21,   21,
       27,   28,   29,   21,  128,  131,   65,   72,   72,  205,
       72,  128,  132,  487,   73,   66,  206,   67,  129,  198,

       30,  208,  133,  150,  130,   70,   71,  209,   21,  128,
      134,   70,   71,   70,   71,   70,   71,  135,   70,   71,
      153,  486,  130,  199,   30,   35,  133,  167,   36,   37,
       38,  485,  155,   39,   62,  151,   63,  232,  156,   40,
       41,   42,   43,   44,   45,  154,   46,  221,   47,   48,
       70,   71,  168,   49,   50,   51,  484,  157,   52,  152,
       70,   71,  158,   53,   54,   55,   56,   57,   45,  187,
       58,  221,   47,   59,   69,  483,   69,   69,   70,   71,
       69,   69,   69,   69,   65,   69,   69,   70,   71,   70,
       71,   70,   71,  179,  154,  106,  152,   70,   71,   70,

       71,  236,   70,   71,   70,   71,   70,   71,   70,   71,
      101,   69,   70,   71,  169,   70,   71,  365,   75,  159,
      447,   76,   77,   78,  366,  160,   79,  448,  180,  242,
      476,  181,   80,   81,   82,   83,   84,   85,  170,   86,
      168,   87,   88,  240,  161,  184,   89,   90,   91,  162,
      475,   92,  182,   70,   71,  183,   93,   94,   95,   96,
       97,   85,  281,   98,  282,   87,   99,   69,  474,  184,
       69,  473,   69,   69,   70,   71,   69,   69,  369,   69,
      185,   69,   69,   69,  370,   69,   69,   70,   71,   69,
      102,   69,  103,  104,   69,   69,   70,   71,   70,   71,

       70,   71,   70,   71,  186,   70,   71,   70,   71,  174,
      171,   70,   71,  163,   70,   71,  175,   70,   71,  164,
       69,  472,   70,   71,  172,  471,  176,   70,   71,   70,
       71,   70,   71,  464,  177,  171,  463,  188,  165,  171,
       62,  178,  341,  166,  157,   70,   71,  161,  173,  158,
      176,  189,  162,  165,  170,  176,   70,   71,  166,  462,
       65,  461,  244,  177,  171,  186,   69,  292,   69,  105,
      178,  106,  460,   65,  285,  182,  459,  173,  183,  176,
       69,  452,  136,   69,   67,   69,   69,   70,   71,   69,
       69,  292,   69,  237,   69,   69,  148,  148,  285,  149,

      286,   69,  192,  193,  194,  195,  449,  194,   70,   71,
      234,  235,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,  430,  245,
      238,   70,   71,   70,   71,  429,  246,  252,   70,   71,
      241,  324,   70,   71,  247,  442,   70,   71,   70,   71,
       70,   71,  251,  441,  239,  440,   75,  450,  248,   70,
       71,   70,   71,  451,  249,  324,  243,   70,   71,  254,
       70,   71,  250,  255,  257,   70,   71,   70,   71,   70,
       71,   65,  439,  253,   70,   71,   70,   71,   70,   71,
      179,  430,  106,  256,  259,  429,  260,  324,  261,  428,

      258,   70,   71,   70,   71,   70,   71,  264,   70,   71,
      265,  268,   70,   71,   70,   71,  427,   70,   71,   70,
       71,  324,  261,  271,  426,  189,   70,   71,  262,  263,
       63,  232,  194,  195,  424,  194,  423,  269,  234,  235,
       70,   71,   70,   71,   70,   71,  266,   70,   71,  267,
       70,   71,  379,   70,   71,  410,  298,   70,   71,  409,
      239,   70,   71,   70,   71,  270,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
      408,  302,  407,  308,  299,  301,  305,  300,   70,   71,
       70,   71,   70,   71,  306,  406,  307,  313,   70,   71,

      310,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,  304,   70,   71,  312,  405,  309,  303,  316,   70,
       71,   70,   71,  404,  310,  403,  311,   70,   71,   70,
       71,  402,  314,  401,  315,  400,  317,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,  268,   70,   71,
       70,   71,   70,   71,  322,  319,   70,   71,   70,   71,
      317,  399,   70,   71,  320,   70,   71,   70,   71,  425,
      318,  344,  342,  379,  343,   70,   71,  378,  343,   70,
       71,   70,   71,   70,   71,   70,   71,  346,   70,   71,
      321,  377,  347,  425,  348,   70,   71,  376,  343,  375,

      349,  345,  343,   70,   71,  374,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,  373,  356,
       70,   71,  350,   70,   71,  372,  351,   70,   71,   70,
       71,   70,   71,  352,  354,   70,   71,  371,  102,  357,
      360,   70,   71,   70,   71,  353,   70,   71,   70,   71,
      358,  368,  380,   70,   71,   70,   71,   70,   71,  367,
      355,   70,   71,  382,   70,   71,  384,   70,   71,  364,
      387,  359,  363,  385,   70,   71,   70,   71,  381,  386,
       70,   71,  362,   70,   71,   70,   71,   70,   71,  383,
      361,  392,   70,   71,  340,  394,  395,   70,   71,   70,

       71,   70,   71,  398,  388,   70,   71,  391,   70,   71,
      389,   70,   71,  339,  390,  411,   70,   71,  393,   70,
       71,   70,   71,   70,   71,  396,   70,   71,   70,   71,
      397,   70,   71,  413,   70,   71,  338,   70,   71,   70,
       71,  416,   70,   71,   70,   71,   70,   71,  337,  415,
      421,  412,  398,  336,  419,   70,   71,   70,   71,  417,
      335,  414,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,  418,   70,   71,   70,   71,  432,
      422,  420,   70,   71,   70,   71,   70,   71,  437,  334,
      438,  333,  431,   70,   71,  332,  433,  435,  331,  443,

       70,   71,   70,   71,   70,   71,   70,   71,  434,   70,
       71,   70,   71,   70,   71,  437,  444,  438,   70,   71,
      433,   70,   71,  436,   70,   71,   70,   71,   70,   71,
       70,   71,  330,   70,   71,  329,  453,  328,  445,  465,
       70,   71,  455,  454,   70,   71,  327,   70,   71,  446,
       70,   71,  467,   70,   71,   70,   71,  466,  477,   70,
       71,   70,   71,  326,  456,   70,   71,  478,   70,   71,
      457,  468,   70,   71,   70,   71,  325,  458,   70,   71,
      323,  479,   70,   71,   70,   71,   70,   71,   70,   71,
      470,  480,  195,  469,   70,   71,  489,  195,  490,  499,

      491,  481,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,  297,  482,   70,   71,  296,  492,  295,  228,
      500,  294,  293,  291,  290,  289,  288,  287,  493,  284,
      283,  280,  494,  279,  278,  277,  276,  275,  274,  273,
      501,  195,  272,  149,  146,  231,  199,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  220,  219,   35,  218,
      502,   10,   10,   10,   10,   10,   10,   19,   19,   19,
       19,   19,   19,   33,  217,  216,  215,  214,   33,   60,
       60,   68,  213,   68,   68,   68,   68,   69,  212,   69,
       69,   69,   69,  100,  211,  100,  100,  100,  100,  148,

      148,  148,  210,  148,  148,  191,  191,  191,  191,  191,
      191,  194,  194,  194,  194,  194,  194,  233,  233,  233,
      233,  233,  233,  207,  204,  203,  202,  201,  200,  197,
      196,  195,  190,  149,  146,  145,   61,  143,  127,  125,
      109,   35,  107,   61,   34,  503,    9,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503
    } ;

static yyconst short int yy_chk[1312] =
    {   0,
        0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,   16,    5,
       16,   16,    5,    5,    6,    6,    0,    6,   18,   36,
        6,    6,    1,   21,   21,    7,    7,   18,    7,   18,
        1,    7,    7,    8,    8,    0,    8,   22,   22,    8,
        8,   29,   29,   36,    0,   37,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   20,   20,   41,   20,   27,   27,   30,   20,
       37,   45,   27,   22,   30,  488,   30,   30,    2,   30,
       45,   58,   45,   51,   58,   52,    2,   53,   51,   41,

       52,  487,   53,   38,   39,   40,  485,   42,   47,   38,
       39,   40,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,   38,   39,
       40,   42,   47,   38,   39,   40,   46,   48,   57,   46,
       50,   69,   69,   65,    3,   64,   57,   64,   64,  484,
       75,   75,    3,   57,   65,   68,   75,   68,   68,  476,
       46,   48,   57,   46,  272,   50,   56,  272,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   43,   44,   66,   72,   72,  116,
       72,   56,   44,  475,   72,   66,  116,   66,   43,  110,

        4,  118,   44,   74,   56,   74,   74,  118,    4,   43,
       44,   77,   77,   76,   76,   78,   78,   44,   81,   81,
       77,  474,   43,  110,    4,   13,   44,   81,   13,   13,
       13,  473,   78,   13,  147,   76,  147,  147,   78,   13,
       13,   13,   13,   13,   13,   77,   13,  133,   13,   13,
       89,   89,   81,   13,   13,   13,  472,   78,   13,   76,
       90,   90,   78,   13,   13,   13,   13,   13,   13,   90,
       13,  133,   13,   13,   19,  471,   19,   19,   19,   19,
       19,   19,   19,   19,   85,   19,   19,   85,   85,  151,
      151,   82,   82,   85,   90,   85,   89,  154,  154,   86,

       86,  151,   79,   79,  101,  101,   94,   94,  156,  156,
      101,   19,   23,   23,   82,   87,   87,  328,   23,   79,
      439,   23,   23,   23,  328,   79,   23,  439,   86,  156,
      464,   86,   23,   23,   23,   23,   23,   23,   82,   23,
       94,   23,   23,  154,   79,   87,   23,   23,   23,   79,
      463,   23,   86,   88,   88,   86,   23,   23,   23,   23,
       23,   23,  206,   23,  206,   23,   23,   26,  462,   87,
       26,  461,   26,   26,   26,   26,   26,   26,  332,   26,
       88,   26,   26,   28,  332,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   80,   80,   83,   83,

       84,   84,   91,   91,   88,   92,   92,   95,   95,   84,
       83,   93,   93,   80,   99,   99,   84,  158,  158,   80,
       28,  460,   98,   98,   83,  459,   84,   96,   96,   97,
       97,  102,  102,  452,   84,   83,  451,  102,   80,   96,
      297,   84,  297,   80,   91,  103,  103,   92,   83,   91,
       84,  103,   92,   93,   95,   97,  152,  152,   93,  450,
      105,  449,  158,   97,   96,   99,  105,  221,  105,  105,
       97,  105,  448,  136,  209,   98,  447,   96,   98,   97,
      100,  442,  136,  100,  136,  100,  100,  100,  100,  100,
      100,  221,  100,  152,  100,  100,  106,  106,  209,  106,

      209,  106,  106,  106,  150,  150,  440,  150,  153,  153,
      150,  150,  155,  155,  157,  157,  159,  159,  160,  160,
      161,  161,  162,  162,  163,  163,  164,  164,  430,  159,
      153,  165,  165,  166,  166,  429,  159,  164,  168,  168,
      155,  274,  167,  167,  160,  426,  169,  169,  170,  170,
      171,  171,  163,  425,  153,  424,  171,  441,  161,  172,
      172,  173,  173,  441,  161,  274,  157,  174,  174,  166,
      175,  175,  162,  167,  169,  176,  176,  177,  177,  178,
      178,  179,  423,  165,  179,  179,  180,  180,  181,  181,
      179,  410,  179,  168,  174,  409,  175,  275,  176,  408,

      170,  182,  182,  183,  183,  184,  184,  180,  185,  185,
      181,  184,  186,  186,  187,  187,  407,  188,  188,  189,
      189,  275,  176,  188,  406,  189,  191,  191,  177,  178,
      232,  232,  233,  233,  404,  233,  403,  185,  233,  233,
      236,  236,  237,  237,  238,  238,  182,  239,  239,  183,
      240,  240,  379,  241,  241,  377,  238,  242,  242,  375,
      187,  243,  243,  244,  244,  186,  245,  245,  246,  246,
      247,  247,  248,  248,  249,  249,  250,  250,  251,  251,
      374,  242,  373,  247,  239,  241,  245,  240,  252,  252,
      253,  253,  255,  255,  246,  372,  246,  252,  254,  254,

      249,  256,  256,  257,  257,  258,  258,  259,  259,  260,
      260,  244,  261,  261,  250,  371,  248,  243,  260,  262,
      262,  263,  263,  368,  249,  367,  249,  264,  264,  265,
      265,  364,  254,  363,  259,  362,  261,  266,  266,  267,
      267,  268,  268,  269,  269,  270,  270,  268,  271,  271,
      298,  298,  299,  299,  271,  263,  300,  300,  301,  301,
      261,  361,  302,  302,  269,  303,  303,  304,  304,  405,
      262,  302,  298,  341,  299,  305,  305,  340,  300,  306,
      306,  307,  307,  308,  308,  309,  309,  305,  310,  310,
      270,  339,  306,  405,  307,  311,  311,  338,  299,  337,

      308,  304,  300,  312,  312,  336,  313,  313,  314,  314,
      315,  315,  316,  316,  317,  317,  318,  318,  335,  315,
      319,  319,  309,  320,  320,  334,  310,  321,  321,  342,
      342,  343,  343,  311,  313,  322,  322,  333,  322,  316,
      322,  344,  344,  345,  345,  312,  346,  346,  347,  347,
      318,  330,  342,  348,  348,  349,  349,  350,  350,  329,
      314,  351,  351,  344,  352,  352,  347,  353,  353,  326,
      349,  319,  325,  347,  354,  354,  355,  355,  343,  348,
      356,  356,  324,  357,  357,  358,  358,  380,  380,  345,
      323,  354,  359,  359,  294,  356,  357,  360,  360,  381,

      381,  382,  382,  360,  351,  383,  383,  353,  384,  384,
      351,  385,  385,  293,  352,  380,  386,  386,  355,  387,
      387,  388,  388,  389,  389,  358,  390,  390,  391,  391,
      359,  392,  392,  382,  393,  393,  291,  394,  394,  395,
      395,  387,  396,  396,  397,  397,  398,  398,  290,  386,
      394,  381,  398,  289,  392,  411,  411,  412,  412,  390,
      288,  383,  413,  413,  414,  414,  415,  415,  416,  416,
      417,  417,  418,  418,  391,  419,  419,  420,  420,  416,
      396,  393,  421,  421,  422,  422,  431,  431,  421,  287,
      422,  286,  415,  432,  432,  285,  417,  419,  284,  431,

      433,  433,  434,  434,  435,  435,  436,  436,  418,  437,
      437,  438,  438,  444,  444,  437,  432,  438,  443,  443,
      417,  445,  445,  420,  446,  446,  453,  453,  454,  454,
      455,  455,  283,  456,  456,  282,  443,  281,  433,  453,
      457,  457,  444,  443,  458,  458,  280,  465,  465,  434,
      466,  466,  455,  467,  467,  468,  468,  454,  465,  469,
      469,  470,  470,  279,  445,  480,  480,  466,  477,  477,
      445,  456,  478,  478,  479,  479,  277,  446,  481,  481,
      273,  467,  482,  482,  489,  489,  490,  490,  491,  491,
      458,  468,  235,  457,  492,  492,  477,  234,  478,  490,

      479,  469,  493,  493,  494,  494,  499,  499,  500,  500,
      501,  501,  231,  470,  502,  502,  230,  480,  229,  228,
      491,  223,  222,  220,  219,  214,  212,  210,  481,  208,
      207,  205,  482,  204,  203,  202,  201,  200,  199,  198,
      493,  194,  190,  149,  146,  145,  144,  143,  142,  141,
      140,  139,  138,  137,  135,  134,  132,  131,  128,  127,
      494,  504,  504,  504,  504,  504,  504,  505,  505,  505,
      505,  505,  505,  506,  126,  125,  124,  123,  506,  507,
      507,  508,  122,  508,  508,  508,  508,  509,  121,  509,
      509,  509,  509,  510,  120,  510,  510,  510,  510,  511,

      511,  511,  119,  511,  511,  512,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,  513,  514,  514,  514,
      514,  514,  514,  117,  115,  114,  113,  112,  111,  109,
      108,  107,  104,   67,   63,   62,   61,   59,   55,   54,
       49,   35,   34,   15,   12,    9,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/InqArabicParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "../src/InqArabicParser.l"
/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.cs.cmu.edu/~lemur/license.html
 *
 *==========================================================================
*/

#include "InqArabicParser.hpp"

#include <cstring>
#include <cctype>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <fstream>

#define ON   1
#define OFF  0
#define WORD 2
#define LEFT_PAREN 3
#define RIGHT_PAREN 4
#define AND 7
#define BOOLEANAND 8
#define BOOLEANAND_NOT 9
#define FILTER_REQUIRE 10
#define FILTER_REJECT 11
#define FIELD_OP 12
#define LITERAL 13
#define MAX_OP 14
#define NOT 17
#define ODN 18
#define OR 19
#define PARSUMN 20
#define PHRASE 21
#define SUM 22
#define SYN 23
#define UWN 24
#define WSUM 25
#define NUMBER 26
#define QBEGIN 30
#define QBEGINT 33
#define QEND 31
#define PROP 32

/* PAREN OPERATIONS:
 * NL_LPAREN :   called when a left paren is seen.  If paren_stack is 
 *		empty, we're not inside an operator so this is a 
 *              Natural Language paren.  If paren_stack is not empty, 
 *		but PARENLEVEL is zero, then the paren we're seeing 
 *		is the operator's left paren; if the PARENLEVEL is > 0, 
 *		then again it's a natural language paren we're looking at.
 *              RESULT: returns 1 if this is a Natural Language left paren.
 *              SIDE EFFECT: increments PARENLEVEL
 * NL_RPAREN;   see above.
 *              RESULT: returns 1 if this is a Natural Language right paren.
 *		SIDE EFFECT: decrements PARENLEVEL
 */

int ara_parenstack[NESTING_LIMIT];
int ara_parenstack_top=0;
char ara_wsize[30];
#define push_paren_stack(op) {ara_parenstack[ara_parenstack_top++]=op;}
#define pop_paren_stack() {if(ara_parenstack_top>0)ara_parenstack_top--;}
#define parseError(msg) {cout << msg << endl; exit(1); }

char * ara_getsize() { 
  int l=yyleng; 
  strcpy(ara_wsize, yytext); 
  while(!isdigit(ara_wsize[l-1])) l--;  
  ara_wsize[l]='\0';
  l=0;
  while(!isdigit(ara_wsize[l])) l++; 
  return &ara_wsize[l];
}


#define LIT 1
#define OP 2
#define NEST 3

#line 931 "../src/InqArabicParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 118 "../src/InqArabicParser.l"



#line 1086 "../src/InqArabicParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 504 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1247 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "../src/InqArabicParser.l"
{ /* parens jammed together */
    push_paren_stack(LIT); 
    return LEFT_PAREN; 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 126 "../src/InqArabicParser.l"
{ /* NL paren? */ /* words and parens jammed together */
  if(yyleng>1) {
    yytext[yyleng-1]='\0';
    yyless(yyleng-1);
    return WORD;
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 135 "../src/InqArabicParser.l"
{
  pop_paren_stack();
  if(ara_parenstack_top>0)
    BEGIN(ara_parenstack[ara_parenstack_top]);
  else 
   BEGIN(0);
  return RIGHT_PAREN;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 144 "../src/InqArabicParser.l"
{
  return  WORD;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 148 "../src/InqArabicParser.l"
{; /* delimiters */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 150 "../src/InqArabicParser.l"
{
                            push_paren_stack(OP);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 154 "../src/InqArabicParser.l"
{
                            push_paren_stack(NEST);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 159 "../src/InqArabicParser.l"
{ /* Ignore comments */ }
	YY_BREAK
case 9:
#line 162 "../src/InqArabicParser.l"
case 10:
YY_RULE_SETUP
#line 162 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (AND); }
	YY_BREAK
case 11:
#line 165 "../src/InqArabicParser.l"
case 12:
YY_RULE_SETUP
#line 165 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND); }
	YY_BREAK
case 13:
#line 168 "../src/InqArabicParser.l"
case 14:
YY_RULE_SETUP
#line 168 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND_NOT); }
	YY_BREAK
case 15:
#line 172 "../src/InqArabicParser.l"
case 16:
#line 173 "../src/InqArabicParser.l"
case 17:
#line 174 "../src/InqArabicParser.l"
case 18:
YY_RULE_SETUP
#line 174 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (FILTER_REQUIRE); }
	YY_BREAK
case 19:
#line 177 "../src/InqArabicParser.l"
case 20:
#line 178 "../src/InqArabicParser.l"
case 21:
#line 179 "../src/InqArabicParser.l"
case 22:
YY_RULE_SETUP
#line 179 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (FILTER_REJECT); }
	YY_BREAK
case 23:
#line 183 "../src/InqArabicParser.l"
case 24:
#line 184 "../src/InqArabicParser.l"
case 25:
#line 185 "../src/InqArabicParser.l"
case 26:
#line 186 "../src/InqArabicParser.l"
case 27:
#line 187 "../src/InqArabicParser.l"
case 28:
#line 188 "../src/InqArabicParser.l"
case 29:
#line 189 "../src/InqArabicParser.l"
case 30:
#line 190 "../src/InqArabicParser.l"
case 31:
YY_RULE_SETUP
#line 190 "../src/InqArabicParser.l"
{ 
			  /* User keyword/generics are prefixed with a 
			   * "*".   "#" is old-style, retained for 
			   * compatibility.
			   */

			  return  WORD; }
	YY_BREAK
case 32:
#line 199 "../src/InqArabicParser.l"
case 33:
YY_RULE_SETUP
#line 199 "../src/InqArabicParser.l"
{ /* field operator */
                          BEGIN(OP);
                          return (FIELD_OP);
                        }
	YY_BREAK
case 34:
#line 205 "../src/InqArabicParser.l"
case 35:
YY_RULE_SETUP
#line 205 "../src/InqArabicParser.l"
{ /* literal operator */
                          BEGIN LIT;
                          return(LITERAL);
                        }
	YY_BREAK
case 36:
#line 211 "../src/InqArabicParser.l"
case 37:
YY_RULE_SETUP
#line 211 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (MAX_OP); }
	YY_BREAK
case 38:
#line 215 "../src/InqArabicParser.l"
case 39:
YY_RULE_SETUP
#line 215 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (NOT); }
	YY_BREAK
case 40:
#line 219 "../src/InqArabicParser.l"
case 41:
YY_RULE_SETUP
#line 219 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (OR); }
	YY_BREAK
case 42:
#line 223 "../src/InqArabicParser.l"
case 43:
YY_RULE_SETUP
#line 223 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (PARSUMN);
			}
	YY_BREAK
case 44:
#line 229 "../src/InqArabicParser.l"
case 45:
YY_RULE_SETUP
#line 229 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (PHRASE);
			}
	YY_BREAK
case 46:
#line 235 "../src/InqArabicParser.l"
case 47:
YY_RULE_SETUP
#line 235 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (SUM); }
	YY_BREAK
case 48:
#line 239 "../src/InqArabicParser.l"
case 49:
YY_RULE_SETUP
#line 239 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (SYN); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 242 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (ODN);
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (PROP);
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 251 "../src/InqArabicParser.l"
{ BEGIN(NEST);
			  return (UWN);
			}
	YY_BREAK
case 53:
#line 256 "../src/InqArabicParser.l"
case 54:
YY_RULE_SETUP
#line 256 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (WSUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 259 "../src/InqArabicParser.l"
{ /* end of query token */
			  return QEND;
                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 263 "../src/InqArabicParser.l"
{ /* end of query token */
			  return QBEGIN;
                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 266 "../src/InqArabicParser.l"
{ /* begin text query token */
                          yyless(yyleng-1);
			  return QBEGINT;
                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 271 "../src/InqArabicParser.l"
{
                          return (NUMBER);
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 275 "../src/InqArabicParser.l"
{ 
                          return  WORD;
                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 279 "../src/InqArabicParser.l"
{ /* Ignore unexpected stuff */ 
                        }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 282 "../src/InqArabicParser.l"
ECHO;
	YY_BREAK
#line 1466 "../src/InqArabicParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LIT):
case YY_STATE_EOF(OP):
case YY_STATE_EOF(NEST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 504 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 504 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 503);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 282 "../src/InqArabicParser.l"


InqArabicParser::InqArabicParser() {
  state = 0;
}

void InqArabicParser::finishing_nesting_qnote(int top) {
  int tok;
  while((tok=(int)InqArabiclex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(ara_parenstack_top == top)
	return;
    }
    else
      parseQryNode(tok);
  }
}


void InqArabicParser::parseNestingOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseNestingOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::finishing_prox_qnote(int top) {
  int tok;
  while((tok=(int)InqArabiclex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(ara_parenstack_top == top)
	return;
    }
    else
      parseProxNode(tok);
  }
}

void InqArabicParser::parseProxOp(char *op, char *size) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parsePassageOp(char *op, char *size) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parseSynOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parsePropOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parsePropOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parseTermOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      while((nxtok=(int)InqArabiclex())) {
	switch(nxtok) {
	case NUMBER:
	case WORD:
	  if (textHandler != NULL) textHandler->foundWord(InqArabictext);
	  break;

	case LITERAL:
	  parseQryNode(nxtok);
	  break;

	case RIGHT_PAREN:
	  if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	  return;
	default:
	  parseError (" parseTermOp: Syntax error");
	}
      }
    }
    else 
      parseError (" parseTermOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parseProxNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InqArabictext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InqArabictext);
      }
      return;
      break;

    case ODN:
      parseProxOp("#ODN", ara_getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", ara_getsize());
      break;
  case PROP:
    parsePropOp("#PROP"); // should have its own parse method.
      break;
  
    default:
      parseError ("parseProxNode: PARSE ERROR: proximity op allows only prox child");
    }
}


void InqArabicParser::parseQryNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InqArabictext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InqArabictext);
      }
      return;
      break;

    case AND:
      parseNestingOp("#AND");
      break;
    case OR:
      parseNestingOp("#OR");
      break;
    case BOOLEANAND:
      parseNestingOp("#BAND");
      break;
    case BOOLEANAND_NOT:
      parseNestingOp("#BANDNOT");
      break;
    case FILTER_REQUIRE:
      parseNestingOp("#FILTREQ");
      break;

    case FILTER_REJECT:
      parseNestingOp("#FILTREJ");
      break;

    case FIELD_OP:
      parseTermOp("#FIELD");
      break;

    case LITERAL:
      if (state) {
	// useless in Lemur because of no such an indexed term
	int nxtok=(int)InqArabiclex();
	if (textHandler != NULL) textHandler->foundSymbol("#LIT");
	if(nxtok == LEFT_PAREN) {
	  if (textHandler != NULL) {
	    textHandler->foundSymbol("LPAREN");
	    if((nxtok=InqArabiclex())==WORD)
	      textHandler->foundSymbol(InqArabictext);
	    else
	      parseError ("parseQryNode: #lit needs a term");
	  }
	}
	else
	  parseError ("parseQryNode: #lit needs LEFT_PAREN");
      }
      return;
      break;

    case MAX_OP:
      parseNestingOp("#MAX");
      break;

    case NOT:
      parseNestingOp("#NOT");
      break;

    case ODN:
      parseProxOp("#ODN", ara_getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", ara_getsize());
      break;

    case PARSUMN:
      parsePassageOp("#PASSAGE", ara_getsize());
      break;

    case PHRASE:
      parseProxOp("#ODN", "3");
      break;

    case SUM:
      parseNestingOp("#SUM");
      break;

    case WSUM:
      if (state) {
	int tok, wsum_top;
	if (textHandler != NULL) textHandler->foundSymbol("#WSUM");
	tok=(int)InqArabiclex();
	if(tok == LEFT_PAREN) {
	  if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
	  wsum_top=ara_parenstack_top-1;
	  while((tok=(int)InqArabiclex())) {
	    if(tok == RIGHT_PAREN) {
	      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	      if(ara_parenstack_top == wsum_top)
		return;
	      else
		parseError ("parseQryNode: #WSUM unmatched paren");
	    }
	    else if(tok == NUMBER) {
	      // Syntax: #WSUM(w1 q1 w2 q2 ... wn qn)
	      if (textHandler != NULL) textHandler->foundWord(InqArabictext);
	      tok=(int)InqArabiclex();
	      parseQryNode(tok);
	    }
	    else
	      parseError ("parseQryNode: #WSUM syntax error");
	  }
	}
	else
	  parseError ("parseQryNode: #WSUM needs a LEFT_PAREN");
      }
      break;
  case PROP:
    parsePropOp("#PROP"); // should have its own parse method.
      break;
  
    default:
      parseError ("parseQryNode: PARSE ERROR: unknown token");
    }
}

long InqArabicParser::fileTell() {
  int offset = yy_c_buf_p-YY_CURRENT_BUFFER->yy_ch_buf;
  if (InqArabicin) {
    long begin = ftell(InqArabicin)-YY_CURRENT_BUFFER->yy_n_chars;
    return begin+offset;
  } 
  return offset;
}


void InqArabicParser::parseBuffer(char* buf, int len) {
  yy_scan_bytes(buf, len);
  doParse();
}

void InqArabicParser::parseFile(char * filename) {
  
  InqArabicin = fopen(filename, "r");
  doParse();
  fclose(InqArabicin);
}

void InqArabicParser::doParse() {
  
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering an op 
  // can transition the machine into another state.
  while (tok = InqArabiclex()) {
    switch (tok) {	
    case QEND:
      // end of a query
      if(ara_parenstack_top>0)
	parseError ("parse: PARSE ERROR: unmatched paren");
      state = 0;
      break;
      
    case QBEGIN: {
      // start a new query, its id is treated as a docid
      char * qid=strdup(InqArabictext);
      char *tofree=qid;
      int ql = strlen(InqArabictext);
      state = 1;
      while(*qid && !isdigit(*qid))
	qid++;
      while(ql > 0 && !isdigit(tofree[ql-1])) 
	tofree[--ql]='\0';
      ara_parenstack_top=0;
      if (textHandler != NULL) textHandler->foundDoc(qid);
      free(tofree);
      break;
    }
    case QBEGINT: {
      // start a new query, its id is treated as a docid
      // It doesn't start with an operator, so wrap it in a #SUM
      char * qid=strdup(InqArabictext);
      char *tofree=qid;
      int ql = strlen(InqArabictext);
      state = 1;
      while(*qid && !isdigit(*qid))
	qid++;
      while(ql > 0 && !isdigit(tofree[ql-1]))
	tofree[--ql]='\0';
      ara_parenstack_top=0;
      if (textHandler != NULL) textHandler->foundDoc(qid);
      free(tofree);
      if (textHandler != NULL) textHandler->foundSymbol("#SUM");
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      while((tok = InqArabiclex())) {
	if (tok == QEND) {	  
	  if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	  state = 0;
	  break;
	} else {
	  parseQryNode(tok);
	}
      }
    
    break;
    }
    default:
      parseQryNode(tok);
    }
  }
}
