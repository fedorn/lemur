#define yy_create_buffer InqArabic_create_buffer
#define yy_delete_buffer InqArabic_delete_buffer
#define yy_scan_buffer InqArabic_scan_buffer
#define yy_scan_string InqArabic_scan_string
#define yy_scan_bytes InqArabic_scan_bytes
#define yy_flex_debug InqArabic_flex_debug
#define yy_init_buffer InqArabic_init_buffer
#define yy_flush_buffer InqArabic_flush_buffer
#define yy_load_buffer_state InqArabic_load_buffer_state
#define yy_switch_to_buffer InqArabic_switch_to_buffer
#define yyin InqArabicin
#define yyleng InqArabicleng
#define yylex InqArabiclex
#define yyout InqArabicout
#define yyrestart InqArabicrestart
#define yytext InqArabictext

#line 19 "../src/InqArabicParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
static yyconst short int yy_accept[494] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   57,
       58,   58,   58,   58,   58,   56,   54,   57,    4,    5,
        4,    4,    4,    1,    3,    4,    4,    4,    4,    4,
        6,    7,   57,    0,   50,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   31,
       56,    0,    0,   56,    0,   57,   55,    4,    4,    1,
        2,    0,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   40,   41,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   56,   56,   55,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    0,    8,    9,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   34,    0,   35,    0,   36,   37,
       38,   39,    0,    0,    0,    0,   46,   48,   47,   49,
       51,    0,    0,    0,   56,    4,    1,    2,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   11,    0,   12,   23,    0,   24,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   53,   56,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    0,    0,    0,    0,   32,    0,    0,    0,
       33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        0,    0,    0,    0,   21,   17,    0,    0,   22,   18,
        0,    0,    0,    0,    0,   44,    0,   45,   56,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,   13,   14,
       25,   26,    0,    0,    0,    0,    0,    0,    0,    0,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    0,    0,    0,    0,   29,   30,   42,   43,
        4,    4,    4,    4,    4,    4,    4,    4,    0,    0,
        0,    0,    4,    4,    4,    4,    0,    0,    0,    0,
        0,    0,    4,    4,    4,    4,    4,    4,    0,    0,
        0,    0,    0,    0,    4,    4,    4,    4,    4,    4,
        0,    0,    0,    0,    0,    0,    4,    4,    4,    4,
        4,    4,   19,    0,    0,   20,    0,    0,    4,    4,
        4,    4,    4,    4,   15,   27,   16,   28,    4,    4,
        4,    4,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,   10,    4,   11,   12,   13,    4,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    4,   15,    4,
       16,    4,    4,    4,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   27,   38,   39,   40,   27,
        4,    4,    4,    4,   41,    4,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   27,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   27,   62,   63,
       64,   27,    4,    4,    4,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[65] =
    {   0,
        1,    2,    2,    3,    2,    3,    3,    3,    3,    3,
        3,    4,    3,    5,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst short int yy_base[503] =
    {   0,
        0,   56,  112,  168,   15,   23,   34,   42, 1201,    0,
     1202, 1156,  212,    0, 1185,    8, 1202,   24,  271,   71,
       26,   40,  305, 1202, 1202,  367,   69,  380,   44,   74,
     1202, 1202,    0, 1192, 1183,    0,   39,   79,   80,   81,
       58,   77,  165,  116,   77,  102,   99,  103, 1142,  126,
       44,   46,   48, 1153, 1139,  144,   53,   80, 1134,    0,
     1178, 1177, 1176,  135,  151,  181, 1184,  141,  142, 1202,
     1202,  185, 1202,  151,  184,  197,  195,  207,  295,  389,
      211,  205,  391,  283,  280,  393,  293,  213,  209,  395,
      289,  301,  397,  321,  361,  414,  399,  401,  199,  472,

      297,  307,  410, 1174,  450,  423, 1184, 1166, 1140,  170,
     1130, 1147, 1153, 1121, 1127,  218, 1145,   40, 1120, 1141,
     1157, 1115, 1130, 1134, 1109, 1135, 1110, 1155, 1202, 1202,
     1133, 1133, 1107, 1094,  424, 1118, 1112, 1084, 1082, 1121,
     1085, 1060, 1066, 1105, 1104,  432, 1112,  466,  345,  481,
      483,  442,  485,  489,  491,  493,  495,  497,  501,  499,
      503,  309,  506,  511,  519,  516,  524,  521,  526,  418,
      533,  535,  540,  553,  555,  564,  559,  567,  574,  576,
      578,  581,  585,  587,  590,  592, 1102, 1112, 1202, 1202,
     1202, 1094, 1068, 1067, 1071, 1078, 1045, 1052, 1079,   73,

     1085, 1053,  426, 1058, 1202, 1086, 1202, 1060, 1202, 1202,
     1202, 1202, 1066, 1083, 1040, 1056, 1202, 1202, 1202, 1202,
     1082, 1065, 1040, 1078,  589,  606, 1087, 1086,  608,  611,
      613,  615,  617,  623,  620,  626,  628,  630,  634,  636,
      639,  641,  646,  656,  663,  658,  665,  668,  670,  673,
      677,  679,  685,  687,  689,  695,  697,  700,  702,  704,
      707,  711,  713,  279, 1058,  181,  222, 1202, 1070, 1202,
     1044, 1065, 1061, 1060, 1055, 1034, 1031, 1019, 1013, 1007,
      958,  992,  968,  959,  930, 1202, 1202,  368,  715,  717,
      720,  724,  726,  729,  731,  733,  740,  746,  743,  748,

      750,  754,  757,  761,  767,  769,  771,  773,  775,  779,
      781,  790,  952,  917,  932,  899, 1202,  409,  897,  897,
     1202,  499,  860,  863,  884,  857,  876,  863,  816,  809,
      833,  783,  786,  796,  800,  802,  804,  808,  810,  812,
      814,  816,  820,  823,  827,  830,  835,  837,  841,  843,
      804,  742,  745,  708, 1202, 1202,  719,  714, 1202, 1202,
      689,  663,  669,  634,  662, 1202,  623, 1202,  647,  850,
      852,  854,  858,  861,  864,  867,  870,  872,  874,  880,
      882,  884,  887,  889,  893,  895,  897,  905, 1202, 1202,
     1202, 1202,  625,  637,  419,  609,  621,  586,  596,  593,

      908,  915,  917,  919,  921,  924,  926,  929,  931,  936,
      938,  940,  584,  560,  531,  516, 1202, 1202,  540,  538,
      942,  948,  950,  956,  958,  960,  962,  966,  512,  499,
      508,  461,  969,  973,  977,  979,  496,  458,  440,  421,
      397,  402,  983,  985,  989,  991,  997,  999,  398,  390,
      377,  341,  322,  286, 1004, 1006, 1008, 1012, 1016, 1018,
      305,  274,  265,  235,  212,  203, 1021, 1027, 1030, 1024,
     1033, 1037, 1202,  212,  156, 1202,  145,   83, 1039, 1041,
     1043, 1046, 1051, 1059, 1202, 1202, 1202, 1202, 1061, 1063,
     1065, 1067, 1202, 1123, 1128, 1133, 1135, 1140, 1145, 1150,

     1155, 1160
    } ;

static yyconst short int yy_def[503] =
    {   0,
      494,  494,  495,  495,    2,    2,    2,    2,  493,  496,
      493,  493,  493,  497,  493,  496,  493,  496,  498,  493,
      499,  499,  499,  493,  493,  500,  499,  498,  499,   28,
      493,  493,  496,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  497,
      493,  493,  493,  496,  493,  496,  493,   28,  499,  493,
      493,  493,  493,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  500,

      499,  499,  499,   28,   28,  499,  501,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  496,  493,  502,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,   28,  501,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  496,  502,  501,  501,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,   28,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  493,  493,  493,  493,  493,  493,  493,  493,
      499,  499,  499,  499,  499,  499,  499,  499,  493,  493,
      493,  493,  499,  499,  499,  499,  493,  493,  493,  493,
      493,  493,  499,  499,  499,  499,  499,  499,  493,  493,
      493,  493,  493,  493,  499,  499,  499,  499,  499,  499,
      493,  493,  493,  493,  493,  493,  499,  499,  499,  499,
      499,  499,  493,  493,  493,  493,  493,  493,  499,  499,
      499,  499,  499,  499,  493,  493,  493,  493,  499,  499,
      499,  499,    0,  493,  493,  493,  493,  493,  493,  493,

      493,  493
    } ;

static yyconst short int yy_nxt[1267] =
    {   0,
      493,   11,   11,   11,   11,   12,   13,   11,   11,   14,
       11,   11,   15,   16,   17,   11,   20,   20,   62,   20,
       63,   64,   31,   25,   20,   20,  493,   20,   65,  108,
       31,   25,   18,   70,   71,   20,   20,   66,   20,   67,
       11,   32,   25,   20,   20,  493,   20,   70,   71,   32,
       25,   70,   71,  109,  493,  110,   18,   11,   11,   11,
       11,   12,   13,   11,   11,   14,   11,   11,   15,   16,
       17,   11,   72,   72,  124,   72,   70,   71,   65,   73,
      111,   65,  101,   74,   69,  202,   69,  105,   18,  106,
      135,  203,   67,  114,  133,  118,   11,  122,  115,  125,

      119,  134,  123,  112,  116,  120,  273,  126,  274,  113,
      117,  121,   18,   20,   20,   21,   20,   22,   23,   24,
       25,   26,   21,   21,   27,   28,   29,   21,  114,  118,
      122,  127,  131,  115,  119,  123,  140,  141,  136,  132,
      138,  137,  143,  139,   30,   62,  488,   63,  146,   70,
       71,   69,   21,   69,   68,   65,  148,  133,   70,   71,
      140,  142,  138,  128,  134,  139,   67,  111,   30,   20,
       20,   21,   20,   22,   23,   24,   25,   26,   21,   21,
       27,   28,   29,   21,  128,   65,   72,   72,  128,   72,
      487,   70,   71,   73,   66,  486,   67,   75,  129,  192,

       30,  130,   70,   71,   70,   71,   70,   71,   21,  128,
      314,  151,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,  130,  193,   30,   35,  149,  165,   36,   37,
       38,  153,  485,   39,  314,  167,  152,  154,  199,   40,
       41,   42,   43,   44,   45,  200,   46,  182,   47,   48,
      150,  314,  166,   49,   50,   51,  155,  183,   52,  168,
      478,  156,  150,   53,   54,   55,   56,   57,   45,  477,
       58,  183,   47,   59,   69,  314,   69,   69,   70,   71,
       69,   69,   69,   69,   65,   69,   69,   70,   71,   69,
       70,   71,  264,  176,  476,  106,   70,   71,  475,  172,

       70,   71,   70,   71,   70,   71,  173,  474,   70,   71,
      101,   69,   70,   71,   70,   71,   70,   71,   75,  157,
      185,   76,   77,   78,  174,  158,   79,  245,   70,   71,
      181,  175,   80,   81,   82,   83,   84,   85,  155,   86,
      473,   87,   88,  156,  159,  466,   89,   90,   91,  160,
      159,   92,   70,   71,  181,  160,   93,   94,   95,   96,
       97,   85,  166,   98,  229,   87,   99,   69,   70,   71,
       69,  465,   69,   69,   70,   71,   69,   69,   62,   69,
      331,   69,   69,   69,  464,   69,   69,   70,   71,   69,
      102,   69,  103,  104,   69,   69,   70,   71,   70,   71,

       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
      169,  184,  463,  161,  462,  168,  461,   70,   71,  162,
       69,   70,   71,  186,  170,   70,   71,  147,   65,  177,
       70,   71,  178,  169,  355,  169,  152,  135,  163,   67,
      174,  356,   62,  164,   63,  225,  163,  175,  171,   70,
       71,  164,  415,  179,   65,  454,  180,  453,  169,  277,
       69,  179,   69,  105,  180,  106,  452,  188,  189,  451,
      188,  171,   69,  227,  228,   69,  415,   69,   69,   70,
       71,   69,   69,  277,   69,  278,   69,   69,   70,   71,
       70,   71,   70,   71,  450,  233,   70,   71,   70,   71,

       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,  231,   70,   71,  238,  449,  235,   70,   71,
      234,  442,  239,   70,   71,  230,   70,   71,   70,   71,
      240,   70,   71,   70,   71,  439,  232,  437,  244,   75,
       70,   71,   70,   71,  438,  237,  241,   70,   71,  359,
      236,  420,  242,  419,  247,  360,  243,  248,  440,  250,
       70,   71,   70,   71,  441,  246,   70,   71,   65,  252,
      432,   70,   71,  253,   70,   71,  431,  176,  249,  106,
      251,   70,   71,   70,   71,   70,   71,  256,   70,   71,
      430,  260,   70,   71,   70,   71,  257,   70,   71,   70,

       71,   63,  225,  263,  429,  186,  420,  188,  189,  419,
      188,  254,  255,  227,  228,   70,   71,  261,   70,   71,
       70,   71,   70,   71,   70,   71,  258,   70,   71,  259,
       70,   71,  289,   70,   71,   70,   71,   70,   71,  418,
      232,   70,   71,   70,   71,  262,   70,   71,   70,   71,
      417,  293,  416,   70,   71,  414,  299,  296,  413,  290,
      369,  291,  292,   70,   71,   70,   71,  297,  400,  298,
       70,   71,   70,   71,  301,   70,   71,   70,   71,  304,
       70,   71,  399,  295,   70,   71,   70,   71,  398,  294,
      300,  303,   70,   71,   70,   71,   70,   71,  301,  397,

      302,  307,   70,   71,   70,   71,  305,   70,   71,   70,
       71,   70,   71,  306,   70,   71,  396,  260,   70,   71,
       70,   71,   70,   71,   70,   71,  312,   70,   71,  395,
      309,   70,   71,   70,   71,  310,   70,   71,   70,   71,
       70,   71,  334,  394,  332,  308,  333,   70,   71,  333,
       70,   71,  336,   70,   71,   70,   71,   70,   71,  393,
      337,   70,   71,  311,   70,   71,  338,  339,   70,   71,
      333,  392,  335,  333,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,  391,  346,   70,   71,   70,   71,
       70,   71,  340,   70,   71,  341,  344,   70,   71,  342,

      102,  390,  350,   70,   71,  347,  343,   70,   71,   70,
       71,   70,   71,  370,  348,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,  372,  345,   70,   71,  374,
       70,   71,  377,  349,   70,   71,  375,   70,   71,  389,
      371,  376,   70,   71,   70,   71,  369,  382,   70,   71,
       70,   71,  384,  373,  368,  385,  388,   70,   71,   70,
       71,   70,   71,  367,  378,   70,   71,  381,   70,   71,
      379,   70,   71,  380,   70,   71,  383,   70,   71,   70,
       71,   70,   71,  366,  386,  401,  387,   70,   71,   70,
       71,   70,   71,  403,   70,   71,   70,   71,  365,  406,

       70,   71,   70,   71,   70,   71,  364,  405,  363,  411,
      362,  402,   70,   71,  409,   70,   71,  361,  388,  358,
      407,  404,   70,   71,   70,   71,   70,   71,   70,   71,
      357,   70,   71,   70,   71,  408,   70,   71,   70,   71,
      412,  410,  422,   70,   71,   70,   71,   70,   71,   70,
       71,  427,  354,  428,  421,   70,   71,   70,   71,  423,
      425,  353,  433,   70,   71,   70,   71,   70,   71,   70,
       71,  352,  424,   70,   71,  427,   70,   71,  434,  428,
       70,   71,  351,  423,   70,   71,   70,   71,  330,  426,
       70,   71,   70,   71,  443,  435,   70,   71,   70,   71,

      329,  444,  328,  455,   70,   71,   70,   71,  327,  445,
      436,   70,   71,   70,   71,   70,   71,  326,  457,   70,
       71,  456,  467,   70,   71,   70,   71,  446,   70,   71,
      468,   70,   71,  447,   70,   71,  458,   70,   71,  448,
       70,   71,  325,  469,   70,   71,   70,   71,   70,   71,
       70,   71,  460,   70,   71,  470,  479,  459,   70,   71,
      480,  489,  324,  481,  323,  471,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,  322,  472,  321,  320,
      319,  318,  490,  482,  317,  316,  315,  313,  189,  189,
      483,  288,  287,  286,  484,  221,  491,  285,  284,  283,

      282,  281,  280,  279,  276,  275,  272,  271,  270,  269,
      268,  267,  266,  265,  189,  264,  147,  145,  224,  193,
      223,  222,  492,   10,   10,   10,   10,   10,   19,   19,
       19,   19,   19,   33,  221,  220,  219,   33,   60,   60,
       68,  218,   68,   68,   68,   69,  217,   69,   69,   69,
      100,  216,  100,  100,  100,  188,  188,  188,  188,  188,
      226,  226,  226,  226,  226,  215,  214,  213,   35,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  201,  198,
      197,  196,  195,  194,  191,  190,  189,  187,  147,  145,
      144,   61,  142,  127,  125,  109,   35,  107,   61,   34,

      493,    9,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493
    } ;

static yyconst short int yy_chk[1267] =
    {   0,
        0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,   16,    5,
       16,   16,    5,    5,    6,    6,    0,    6,   18,   36,
        6,    6,    1,   21,   21,    7,    7,   18,    7,   18,
        1,    7,    7,    8,    8,    0,    8,   22,   22,    8,
        8,   29,   29,   36,    0,   37,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   20,   20,   41,   20,   27,   27,   30,   20,
       37,   45,   27,   22,   30,  118,   30,   30,    2,   30,
       45,  118,   45,   51,   57,   52,    2,   53,   51,   41,

       52,   57,   53,   38,   39,   40,  200,   42,  200,   38,
       39,   40,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,   38,   39,
       40,   42,   44,   38,   39,   40,   47,   48,   46,   44,
       58,   46,   50,   58,    3,   64,  478,   64,   64,   69,
       69,   68,    3,   68,   68,   65,   74,   44,   74,   74,
       47,   48,   46,   56,   44,   46,   65,   50,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   43,   66,   72,   72,   56,   72,
      477,   75,   75,   72,   66,  475,   66,   75,   43,  110,

        4,   56,   77,   77,   76,   76,   99,   99,    4,   43,
      266,   77,   82,   82,   78,   78,   89,   89,   81,   81,
       88,   88,   43,  110,    4,   13,   76,   81,   13,   13,
       13,   78,  474,   13,  266,   82,   77,   78,  116,   13,
       13,   13,   13,   13,   13,  116,   13,   88,   13,   13,
       76,  267,   81,   13,   13,   13,   78,   99,   13,   82,
      466,   78,   89,   13,   13,   13,   13,   13,   13,  465,
       13,   88,   13,   13,   19,  267,   19,   19,   19,   19,
       19,   19,   19,   19,   85,   19,   19,   85,   85,  264,
       84,   84,  264,   85,  464,   85,   91,   91,  463,   84,

       87,   87,   79,   79,  101,  101,   84,  462,   92,   92,
      101,   19,   23,   23,  102,  102,  162,  162,   23,   79,
      102,   23,   23,   23,   84,   79,   23,  162,   94,   94,
       87,   84,   23,   23,   23,   23,   23,   23,   91,   23,
      461,   23,   23,   91,   79,  454,   23,   23,   23,   79,
       92,   23,  149,  149,   87,   92,   23,   23,   23,   23,
       23,   23,   94,   23,  149,   23,   23,   26,   95,   95,
       26,  453,   26,   26,   26,   26,   26,   26,  288,   26,
      288,   26,   26,   28,  452,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   80,   80,   83,   83,

       86,   86,   90,   90,   93,   93,   97,   97,   98,   98,
       83,   90,  451,   80,  450,   95,  449,  103,  103,   80,
       28,   96,   96,  103,   83,  170,  170,  106,  135,   86,
      106,  106,   86,   96,  318,   83,   90,  135,   80,  135,
       97,  318,  146,   80,  146,  146,   93,   97,   83,  152,
      152,   93,  395,   86,  105,  442,   86,  441,   96,  203,
      105,   98,  105,  105,   98,  105,  440,  148,  148,  439,
      148,   96,  100,  148,  148,  100,  395,  100,  100,  100,
      100,  100,  100,  203,  100,  203,  100,  100,  150,  150,
      151,  151,  153,  153,  438,  152,  154,  154,  155,  155,

      156,  156,  157,  157,  158,  158,  160,  160,  159,  159,
      161,  161,  151,  163,  163,  157,  437,  154,  164,  164,
      153,  432,  157,  166,  166,  150,  165,  165,  168,  168,
      158,  167,  167,  169,  169,  430,  151,  429,  161,  169,
      171,  171,  172,  172,  429,  156,  159,  173,  173,  322,
      155,  420,  159,  419,  164,  322,  160,  165,  431,  167,
      174,  174,  175,  175,  431,  163,  177,  177,  176,  172,
      416,  176,  176,  173,  178,  178,  415,  176,  166,  176,
      168,  179,  179,  180,  180,  181,  181,  177,  182,  182,
      414,  181,  183,  183,  184,  184,  178,  185,  185,  186,

      186,  225,  225,  185,  413,  186,  400,  226,  226,  399,
      226,  174,  175,  226,  226,  229,  229,  182,  230,  230,
      231,  231,  232,  232,  233,  233,  179,  235,  235,  180,
      234,  234,  231,  236,  236,  237,  237,  238,  238,  398,
      184,  239,  239,  240,  240,  183,  241,  241,  242,  242,
      397,  235,  396,  243,  243,  394,  240,  238,  393,  232,
      369,  233,  234,  244,  244,  246,  246,  239,  367,  239,
      245,  245,  247,  247,  242,  248,  248,  249,  249,  245,
      250,  250,  365,  237,  251,  251,  252,  252,  364,  236,
      241,  243,  253,  253,  254,  254,  255,  255,  242,  363,

      242,  253,  256,  256,  257,  257,  247,  258,  258,  259,
      259,  260,  260,  252,  261,  261,  362,  260,  262,  262,
      263,  263,  289,  289,  290,  290,  263,  291,  291,  361,
      255,  292,  292,  293,  293,  261,  294,  294,  295,  295,
      296,  296,  293,  358,  289,  254,  290,  297,  297,  291,
      299,  299,  296,  298,  298,  300,  300,  301,  301,  357,
      297,  302,  302,  262,  303,  303,  298,  299,  304,  304,
      290,  354,  295,  291,  305,  305,  306,  306,  307,  307,
      308,  308,  309,  309,  353,  306,  310,  310,  311,  311,
      332,  332,  300,  333,  333,  301,  304,  312,  312,  302,

      312,  352,  312,  334,  334,  307,  303,  335,  335,  336,
      336,  337,  337,  332,  308,  338,  338,  339,  339,  340,
      340,  341,  341,  342,  342,  334,  305,  343,  343,  337,
      344,  344,  339,  309,  345,  345,  337,  346,  346,  351,
      333,  338,  347,  347,  348,  348,  331,  344,  349,  349,
      350,  350,  346,  335,  330,  347,  350,  370,  370,  371,
      371,  372,  372,  329,  341,  373,  373,  343,  374,  374,
      341,  375,  375,  342,  376,  376,  345,  377,  377,  378,
      378,  379,  379,  328,  348,  370,  349,  380,  380,  381,
      381,  382,  382,  372,  383,  383,  384,  384,  327,  377,

      385,  385,  386,  386,  387,  387,  326,  376,  325,  384,
      324,  371,  388,  388,  382,  401,  401,  323,  388,  320,
      380,  373,  402,  402,  403,  403,  404,  404,  405,  405,
      319,  406,  406,  407,  407,  381,  408,  408,  409,  409,
      386,  383,  406,  410,  410,  411,  411,  412,  412,  421,
      421,  411,  316,  412,  405,  422,  422,  423,  423,  407,
      409,  315,  421,  424,  424,  425,  425,  426,  426,  427,
      427,  314,  408,  428,  428,  427,  433,  433,  422,  428,
      434,  434,  313,  407,  435,  435,  436,  436,  285,  410,
      443,  443,  444,  444,  433,  423,  445,  445,  446,  446,

      284,  433,  283,  443,  447,  447,  448,  448,  282,  434,
      424,  455,  455,  456,  456,  457,  457,  281,  445,  458,
      458,  444,  455,  459,  459,  460,  460,  435,  467,  467,
      456,  470,  470,  435,  468,  468,  446,  469,  469,  436,
      471,  471,  280,  457,  472,  472,  479,  479,  480,  480,
      481,  481,  448,  482,  482,  458,  467,  447,  483,  483,
      468,  480,  279,  469,  278,  459,  484,  484,  489,  489,
      490,  490,  491,  491,  492,  492,  277,  460,  276,  275,
      274,  273,  481,  470,  272,  271,  269,  265,  228,  227,
      471,  224,  223,  222,  472,  221,  483,  216,  215,  214,

      213,  208,  206,  204,  202,  201,  199,  198,  197,  196,
      195,  194,  193,  192,  188,  187,  147,  145,  144,  143,
      142,  141,  484,  494,  494,  494,  494,  494,  495,  495,
      495,  495,  495,  496,  140,  139,  138,  496,  497,  497,
      498,  137,  498,  498,  498,  499,  136,  499,  499,  499,
      500,  134,  500,  500,  500,  501,  501,  501,  501,  501,
      502,  502,  502,  502,  502,  133,  132,  131,  128,  127,
      126,  125,  124,  123,  122,  121,  120,  119,  117,  115,
      114,  113,  112,  111,  109,  108,  107,  104,   67,   63,
       62,   61,   59,   55,   54,   49,   35,   34,   15,   12,

        9,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/InqArabicParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "../src/InqArabicParser.l"
/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.cs.cmu.edu/~lemur/license.html
 *
 *==========================================================================
*/

#include "InqArabicParser.hpp"

#include <cstring>
#include <cctype>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <fstream>

#define ON   1
#define OFF  0
#define WORD 2
#define LEFT_PAREN 3
#define RIGHT_PAREN 4
#define AND 7
#define BOOLEANAND 8
#define BOOLEANAND_NOT 9
#define FILTER_REQUIRE 10
#define FILTER_REJECT 11
#define FIELD_OP 12
#define LITERAL 13
#define MAX_OP 14
#define NOT 17
#define ODN 18
#define OR 19
#define PARSUMN 20
#define PHRASE 21
#define SUM 22
#define SYN 23
#define UWN 24
#define WSUM 25
#define NUMBER 26
#define QBEGIN 30
#define QEND 31

/* PAREN OPERATIONS:
 * NL_LPAREN :   called when a left paren is seen.  If paren_stack is 
 *		empty, we're not inside an operator so this is a 
 *              Natural Language paren.  If paren_stack is not empty, 
 *		but PARENLEVEL is zero, then the paren we're seeing 
 *		is the operator's left paren; if the PARENLEVEL is > 0, 
 *		then again it's a natural language paren we're looking at.
 *              RESULT: returns 1 if this is a Natural Language left paren.
 *              SIDE EFFECT: increments PARENLEVEL
 * NL_RPAREN;   see above.
 *              RESULT: returns 1 if this is a Natural Language right paren.
 *		SIDE EFFECT: decrements PARENLEVEL
 */

int ara_parenstack[NESTING_LIMIT];
int ara_parenstack_top=0;
char ara_wsize[30];
#define push_paren_stack(op) {ara_parenstack[ara_parenstack_top++]=op;}
#define pop_paren_stack() {if(ara_parenstack_top>0)ara_parenstack_top--;}
#define parseError(msg) {cout << msg << endl; exit(1); }

char * ara_getsize() { 
  int l=yyleng; 
  strcpy(ara_wsize, yytext); 
  while(!isdigit(ara_wsize[l-1])) l--;  
  ara_wsize[l]='\0';
  l=0;
  while(!isdigit(ara_wsize[l])) l++; 
  return &ara_wsize[l];
}


#define LIT 1
#define OP 2
#define NEST 3

#line 914 "../src/InqArabicParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 115 "../src/InqArabicParser.l"



#line 1069 "../src/InqArabicParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 494 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1202 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "../src/InqArabicParser.l"
{ /* parens jammed together */
    push_paren_stack(LIT); 
    return LEFT_PAREN; 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "../src/InqArabicParser.l"
{ /* NL paren? */ /* words and parens jammed together */
  if(yyleng>1) {
    yytext[yyleng-1]='\0';
    yyless(yyleng-1);
    return WORD;
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 132 "../src/InqArabicParser.l"
{
  pop_paren_stack();
  if(ara_parenstack_top>0)
    BEGIN(ara_parenstack[ara_parenstack_top]);
  else 
   BEGIN(0);
  return RIGHT_PAREN;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 141 "../src/InqArabicParser.l"
{
  return  WORD;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 145 "../src/InqArabicParser.l"
{; /* delimiters */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 147 "../src/InqArabicParser.l"
{
                            push_paren_stack(OP);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 151 "../src/InqArabicParser.l"
{
                            push_paren_stack(NEST);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 156 "../src/InqArabicParser.l"
{ /* Ignore comments */ }
	YY_BREAK
case 9:
#line 159 "../src/InqArabicParser.l"
case 10:
YY_RULE_SETUP
#line 159 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (AND); }
	YY_BREAK
case 11:
#line 162 "../src/InqArabicParser.l"
case 12:
YY_RULE_SETUP
#line 162 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND); }
	YY_BREAK
case 13:
#line 165 "../src/InqArabicParser.l"
case 14:
YY_RULE_SETUP
#line 165 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND_NOT); }
	YY_BREAK
case 15:
#line 169 "../src/InqArabicParser.l"
case 16:
#line 170 "../src/InqArabicParser.l"
case 17:
#line 171 "../src/InqArabicParser.l"
case 18:
YY_RULE_SETUP
#line 171 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (FILTER_REQUIRE); }
	YY_BREAK
case 19:
#line 174 "../src/InqArabicParser.l"
case 20:
#line 175 "../src/InqArabicParser.l"
case 21:
#line 176 "../src/InqArabicParser.l"
case 22:
YY_RULE_SETUP
#line 176 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (FILTER_REJECT); }
	YY_BREAK
case 23:
#line 180 "../src/InqArabicParser.l"
case 24:
#line 181 "../src/InqArabicParser.l"
case 25:
#line 182 "../src/InqArabicParser.l"
case 26:
#line 183 "../src/InqArabicParser.l"
case 27:
#line 184 "../src/InqArabicParser.l"
case 28:
#line 185 "../src/InqArabicParser.l"
case 29:
#line 186 "../src/InqArabicParser.l"
case 30:
#line 187 "../src/InqArabicParser.l"
case 31:
YY_RULE_SETUP
#line 187 "../src/InqArabicParser.l"
{ 
			  /* User keyword/generics are prefixed with a 
			   * "*".   "#" is old-style, retained for 
			   * compatibility.
			   */

			  return  WORD; }
	YY_BREAK
case 32:
#line 196 "../src/InqArabicParser.l"
case 33:
YY_RULE_SETUP
#line 196 "../src/InqArabicParser.l"
{ /* field operator */
                          BEGIN(OP);
                          return (FIELD_OP);
                        }
	YY_BREAK
case 34:
#line 202 "../src/InqArabicParser.l"
case 35:
YY_RULE_SETUP
#line 202 "../src/InqArabicParser.l"
{ /* literal operator */
                          BEGIN LIT;
                          return(LITERAL);
                        }
	YY_BREAK
case 36:
#line 208 "../src/InqArabicParser.l"
case 37:
YY_RULE_SETUP
#line 208 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (MAX_OP); }
	YY_BREAK
case 38:
#line 212 "../src/InqArabicParser.l"
case 39:
YY_RULE_SETUP
#line 212 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (NOT); }
	YY_BREAK
case 40:
#line 216 "../src/InqArabicParser.l"
case 41:
YY_RULE_SETUP
#line 216 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (OR); }
	YY_BREAK
case 42:
#line 220 "../src/InqArabicParser.l"
case 43:
YY_RULE_SETUP
#line 220 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (PARSUMN);
			}
	YY_BREAK
case 44:
#line 226 "../src/InqArabicParser.l"
case 45:
YY_RULE_SETUP
#line 226 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (PHRASE);
			}
	YY_BREAK
case 46:
#line 232 "../src/InqArabicParser.l"
case 47:
YY_RULE_SETUP
#line 232 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (SUM); }
	YY_BREAK
case 48:
#line 236 "../src/InqArabicParser.l"
case 49:
YY_RULE_SETUP
#line 236 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (SYN); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 239 "../src/InqArabicParser.l"
{ 
			  BEGIN(NEST);
                          return (ODN);
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 244 "../src/InqArabicParser.l"
{ BEGIN(NEST);
			  return (UWN);
			}
	YY_BREAK
case 52:
#line 249 "../src/InqArabicParser.l"
case 53:
YY_RULE_SETUP
#line 249 "../src/InqArabicParser.l"
{ BEGIN(NEST);
                          return (WSUM); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 252 "../src/InqArabicParser.l"
{ /* end of query token */
			  return QEND;
                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 256 "../src/InqArabicParser.l"
{ /* end of query token */
			  return QBEGIN;
                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 260 "../src/InqArabicParser.l"
{
                          return (NUMBER);
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 264 "../src/InqArabicParser.l"
{ 
                          return  WORD;
                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "../src/InqArabicParser.l"
{ /* Ignore unexpected stuff */ 
                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 271 "../src/InqArabicParser.l"
ECHO;
	YY_BREAK
#line 1433 "../src/InqArabicParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LIT):
case YY_STATE_EOF(OP):
case YY_STATE_EOF(NEST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 494 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 494 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 493);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 271 "../src/InqArabicParser.l"


InqArabicParser::InqArabicParser() {
  state = 0;
}

void InqArabicParser::finishing_nesting_qnote(int top) {
  int tok;
  while((tok=(int)InqArabiclex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(ara_parenstack_top == top)
	return;
    }
    else
      parseQryNode(tok);
  }
}


void InqArabicParser::parseNestingOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseNestingOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::finishing_prox_qnote(int top) {
  int tok;
  while((tok=(int)InqArabiclex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(ara_parenstack_top == top)
	return;
    }
    else
      parseProxNode(tok);
  }
}

void InqArabicParser::parseProxOp(char *op, char *size) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parsePassageOp(char *op, char *size) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parseSynOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(ara_parenstack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parseTermOp(char *op) {
  if (state) {
    int nxtok=InqArabiclex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      while((nxtok=(int)InqArabiclex())) {
	switch(nxtok) {
	case NUMBER:
	case WORD:
	  if (textHandler != NULL) textHandler->foundWord(InqArabictext);
	  break;

	case LITERAL:
	  parseQryNode(nxtok);
	  break;

	case RIGHT_PAREN:
	  if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	  return;
	default:
	  parseError (" parseTermOp: Syntax error");
	}
      }
    }
    else 
      parseError (" parseTermOp: missing LEFT_PAREN");
  }
  return;
}

void InqArabicParser::parseProxNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InqArabictext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InqArabictext);
      }
      return;
      break;

    case ODN:
      parseProxOp("#ODN", ara_getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", ara_getsize());
      break;
    default:
      parseError ("parseProxNode: PARSE ERROR: proximity op allows only prox child");
    }
}


void InqArabicParser::parseQryNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InqArabictext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InqArabictext);
      }
      return;
      break;

    case AND:
      parseNestingOp("#AND");
      break;
    case OR:
      parseNestingOp("#OR");
      break;
    case BOOLEANAND:
      parseNestingOp("#BAND");
      break;
    case BOOLEANAND_NOT:
      parseNestingOp("#BANDNOT");
      break;
    case FILTER_REQUIRE:
      parseNestingOp("#FILTREQ");
      break;

    case FILTER_REJECT:
      parseNestingOp("#FILTREJ");
      break;

    case FIELD_OP:
      parseTermOp("#FIELD");
      break;

    case LITERAL:
      if (state) {
	// useless in Lemur because of no such an indexed term
	int nxtok=(int)InqArabiclex();
	if (textHandler != NULL) textHandler->foundSymbol("#LIT");
	if(nxtok == LEFT_PAREN) {
	  if (textHandler != NULL) {
	    textHandler->foundSymbol("LPAREN");
	    if((nxtok=InqArabiclex())==WORD)
	      textHandler->foundSymbol(InqArabictext);
	    else
	      parseError ("parseQryNode: #lit needs a term");
	  }
	}
	else
	  parseError ("parseQryNode: #lit needs LEFT_PAREN");
      }
      return;
      break;

    case MAX_OP:
      parseNestingOp("#MAX");
      break;

    case NOT:
      parseNestingOp("#NOT");
      break;

    case ODN:
      parseProxOp("#ODN", ara_getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", ara_getsize());
      break;

    case PARSUMN:
      parsePassageOp("#PASSAGE", ara_getsize());
      break;

    case PHRASE:
      parseProxOp("#ODN", "3");
      break;

    case SUM:
      parseNestingOp("#SUM");
      break;

    case WSUM:
      if (state) {
	int tok, wsum_top;
	if (textHandler != NULL) textHandler->foundSymbol("#WSUM");
	tok=(int)InqArabiclex();
	if(tok == LEFT_PAREN) {
	  if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
	  wsum_top=ara_parenstack_top-1;
	  while((tok=(int)InqArabiclex())) {
	    if(tok == RIGHT_PAREN) {
	      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	      if(ara_parenstack_top == wsum_top)
		return;
	      else
		parseError ("parseQryNode: #WSUM unmatched paren");
	    }
	    else if(tok == NUMBER) {
	      // Syntax: #WSUM(w1 q1 w2 q2 ... wn qn)
	      if (textHandler != NULL) textHandler->foundWord(InqArabictext);
	      tok=(int)InqArabiclex();
	      parseQryNode(tok);
	    }
	    else
	      parseError ("parseQryNode: #WSUM syntax error");
	  }
	}
	else
	  parseError ("parseQryNode: #WSUM needs a LEFT_PAREN");
      }
      break;
    default:
      parseError ("parseQryNode: PARSE ERROR: unknown token");
    }
}

long InqArabicParser::fileTell() {
  int offset = yy_c_buf_p-YY_CURRENT_BUFFER->yy_ch_buf;
  if (InqArabicin) {
    long begin = ftell(InqArabicin)-YY_CURRENT_BUFFER->yy_n_chars;
    return begin+offset;
  } 
  return offset;
}


void InqArabicParser::parseBuffer(char* buf, int len) {
  yy_scan_bytes(buf, len);
  doParse();
}

void InqArabicParser::parseFile(char * filename) {
  
  InqArabicin = fopen(filename, "r");
  doParse();
  fclose(InqArabicin);
}

void InqArabicParser::doParse() {
  
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering an op 
  // can transition the machine into another state.
  while (tok = InqArabiclex()) {
    switch (tok) {	
    case QEND:
      // end of a query
      if(ara_parenstack_top>0)
	parseError ("parse: PARSE ERROR: unmatched paren");
      state = 0;
      break;
      
    case QBEGIN: {
      // start a new query, its id is treated as a docid
      char * qid=strdup(InqArabictext);
      char *tofree=qid;
      int ql = strlen(InqArabictext);
      state = 1;
      while(*qid && !isdigit(*qid))
	qid++;
      while(ql>0 && !isdigit(tofree[ql-1]))
	tofree[--ql]='\0';
      ara_parenstack_top=0;
      if (textHandler != NULL) textHandler->foundDoc(qid);
      free(tofree);
      break;
    }
    default:
      parseQryNode(tok);
    }
  }
}
