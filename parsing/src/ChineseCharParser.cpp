#define yy_create_buffer ChineseChar_create_buffer
#define yy_delete_buffer ChineseChar_delete_buffer
#define yy_scan_buffer ChineseChar_scan_buffer
#define yy_scan_string ChineseChar_scan_string
#define yy_scan_bytes ChineseChar_scan_bytes
#define yy_flex_debug ChineseChar_flex_debug
#define yy_init_buffer ChineseChar_init_buffer
#define yy_flush_buffer ChineseChar_flush_buffer
#define yy_load_buffer_state ChineseChar_load_buffer_state
#define yy_switch_to_buffer ChineseChar_switch_to_buffer
#define yyin ChineseCharin
#define yyleng ChineseCharleng
#define yylex ChineseCharlex
#define yyout ChineseCharout
#define yyrestart ChineseCharrestart
#define yytext ChineseChartext

#line 19 "../src/ChineseCharParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 30
#define YY_END_OF_BUFFER 31
static yyconst short int yy_accept[489] =
    {   0,
        0,    0,    0,    0,   31,   29,   28,   29,   29,   22,
       29,   22,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,    0,    0,    0,    0,
       22,    0,    0,    0,    0,    0,    0,    0,    0,   21,
       27,   20,   20,   20,   26,   20,   26,    0,    0,   19,
       18,   24,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,    0,   22,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   17,    0,    0,    0,    0,    0,    0,

        0,    0,    6,   14,    0,    0,   25,   23,    0,   26,
       26,   26,    0,   26,   26,   26,   26,   26,    0,    0,
        0,    7,   15,    0,    0,    1,    0,    0,    0,   12,
        0,    0,    0,    0,    0,    0,    2,    0,    0,   13,
        0,    8,    0,    4,   26,    0,   26,    0,    0,    9,
        0,    5,   16,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   26,   26,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,   26,    0,    0,    0,
        0,   26,   26,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,   26,    0,    0,   26,   26,    0,   26,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   26,    0,   26,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,   26,    0,    0,    0,   26,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    5,    1,    1,    6,    7,    1,
        1,    1,    1,    1,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,   12,   13,
        1,   14,    1,    1,   15,   16,   17,   18,   19,   16,
       16,   20,   21,   16,   16,   22,   16,   23,   24,   25,
       16,   16,   16,   26,   16,   16,   16,   27,   16,   16,
        1,    1,    1,    1,    1,    1,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   28,   28,   28,   28,   28,
       28,   28,    1,    1,    1,    1,    1,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       36,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   57,   58,
       59,   57,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   62,   74,   62,   75,
       62,   76,   77,   78,   79,   62,   80,   81,   62,   82,
       62,   62,   83,   62,   62,   62,   62,   62,   84,   62,
       85,   62,   62,   86,   87,   87,   87,   87,   87,   88,
       89,   90,   89,   89,   91,   89,   89,   89,   92,   89,
       89,   89,   93,   94,   89
    } ;

static yyconst int yy_meta[95] =
    {   0,
        1,    2,    1,    3,    4,    1,    5,    6,    7,    3,
        5,    1,    1,    1,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        9,    9,   10,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9

    } ;

static yyconst short int yy_base[512] =
    {   0,
        0,    0,    0,    0, 1115, 2457, 2457, 1040, 1104, 1100,
       91,   91,    0,   88,   98,  151, 1035, 1010, 1038, 1004,
     1010,  997, 1043, 1022, 1000, 1027, 1020,   92,   94,    0,
     1072,    0,  169, 1064,   83,  102,   98,   96,  145,  181,
     2457, 2457, 2457, 2457,  183, 2457,  228, 1021,  114, 2457,
     2457,    0, 1061,  179,  180,  182,  186, 1058, 2457,   91,
      160, 1057, 1056,  100,  184, 1060, 1039, 1049, 1020,  261,
      941,  951,  929,  976,  934,  919,  919,  927,  945,  925,
      968,  131,  908,  937,  904,  912,  120,  947,  925,  902,
      152,  945,  969, 2457,  201,  162,  967,  963,  190,  205,

      207,  206, 2457, 2457,  208,  960,  301,    0,  938, 2457,
      298,  305,  906,  895,  313, 2457,  190,    0,  896,  948,
      233, 2457, 2457,  211,  946, 2457,  224,  242,  945, 2457,
      346,  880,  887,  866,  871,  861, 2457,  243,  930, 2457,
      929, 2457,  248, 2457,  356,  206, 2457,  890,    0, 2457,
      249, 2457,  928,  252,  389,  872,  868,    0,  254,  922,
      923,  212,  411,  257,  910,  909,    0,  358,  851,  825,
      854,  822,  827,  814,  861,  837,  814,  841,  881,  869,
     2457,  432,  458,  479, 2457,  875,    0,  400,  819,  794,
      812,  782,  790,  779,  828,  800,  776,  795,  816,  512,

      759,  255,  783,  815,  523,  544,  567,  588,  614,  635,
      658,  813,    0,  689,  762,  736,  764,  735,  742,  726,
      773,  750,  725,  752,  773,  703,  720,  256,  743,  713,
      723,  732,  707,  736,  706,  712,  701,  750,  267,  708,
      735,  726,  733,  745,  766,  789,  810,  836,  857,  880,
      903,  924,  947, 2457,    0,  734,  676,  651,  668,  638,
      646,  633,  681,  659,  637,  664,  685,  978,  631,  259,
      654,  988,  998,  644,  619,  648,  619,  623,  608,  656,
      274,  613,  640,  629,  654, 1012,  599,  262,  621,  263,
     1022, 1043, 1066, 1087, 1113, 1134, 1157, 1180, 1201, 1224,

     1245, 1271, 1292, 1318, 1349,  608,  582,  611,  581,  588,
      577,  624,  603,  570,  596,  617, 1363,  564,  270,  588,
     1373, 1383,  571,  544,  565,  536,  539,  523,  572,  282,
      526,  552,  542,  569, 1397,  511,  285,  533,  290, 1407,
     2457, 1424,  521,  501,  491,  520,  490,  497,  486,  535,
      396,  489,  516,  508,  437, 1434,  537,  568, 1455, 1478,
      593, 1499, 1522,  536,  631, 1543, 1574,  790,    0,  815,
     1595,  518, 1624,  470, 1655, 1665,  475,  447,  476,  446,
      453,  442,  489,  401,  445,  466,  456,  440, 1675, 1692,
      445,  420,  446,  414,  411,  400,  424,  409,  382,  405,

      397, 1706,    0,  421, 1720,  340,  348,  360,  336,  382,
      853, 1067, 1730, 1092, 1130, 1751,  385,  384, 1250, 1780,
     1801, 1832,  382, 1846,  329,  337,  325,  380, 1860,  347,
     1874,  286,  289,  293,  381,  303, 1884,  412,  308, 1297,
     1913, 1939,  302, 1451, 1965, 1991, 1523, 2017, 1902, 2050,
      264,  198,  226,  197,  204,  192,  241,  422,  199,  226,
      218, 2060,  425, 2074, 1600, 1731, 2084, 2113, 1756, 2134,
     2165,  246, 2179,  192,  195,  192,  386, 2193,  199, 1929,
      517,  493, 2203,   92, 1970,  573, 2217, 2457, 2268, 2272,
     2278, 2282, 2282, 2287,  150, 2297, 2307, 2317, 2327, 2337,

     2347, 2357, 2367, 2377, 2387, 2397, 2407, 2417, 2427, 2437,
     2446
    } ;

static yyconst short int yy_def[512] =
    {   0,
      488,    1,    1,    1,  488,  488,  488,  488,  489,  490,
      491,  492,  493,  494,  493,  494,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  488,  488,  489,  495,
      490,  496,  491,  497,  497,  497,  497,  497,  488,  492,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  495,  498,  497,  497,  497,  497,  497,  488,  497,
      497,  497,  497,  497,  497,  488,  495,  490,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  498,  488,  497,  497,  497,  497,  497,  497,

      497,  497,  488,  488,  497,  497,  488,  495,  488,  488,
      488,  488,  488,  488,  488,  488,  488,   47,  488,  497,
      497,  488,  488,  497,  497,  488,  497,  497,  497,  488,
      488,  488,  488,  488,  488,  488,  488,  497,  497,  488,
      497,  488,  497,  488,  488,  488,  488,  488,  499,  488,
      497,  488,  500,  497,  488,  488,  488,  501,  497,  500,
      488,  497,  502,  497,  488,  497,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  497,  488,
      488,  504,  504,  504,  488,  488,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  488,  506,  506,  506,  506,  506,  506,
      506,  488,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  488,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  488,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  510,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  511,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  510,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,    0,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488
    } ;

static yyconst short int yy_nxt[2552] =
    {   0,
        6,    7,    8,    6,    6,    9,    6,    6,    6,    6,
       10,    6,   11,    6,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   10,   10,   13,
       14,   13,   15,   13,   13,   13,   13,   13,   16,   13,
       13,   13,   13,   13,   17,   13,   13,   13,   13,   13,
       18,   13,   13,   13,   13,   13,   13,   19,   13,   20,
       13,   13,   13,   13,   21,   13,   22,   13,   23,   24,
       13,   13,   25,   13,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   32,   42,   59,   30,  488,   39,

       33,   31,   49,   50,   59,   51,   60,  101,   35,   59,
       36,   59,   37,   59,   64,   59,   38,   41,   31,   31,
       61,   65,   63,   62,   49,   50,  105,   44,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       44,   43,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   43,   43,   43,   43,   43,   52,  488,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,  488,   59,  102,   59,  121,  486,  488,   46,
       41,   41,   41,   41,   43,   43,   54,   67,   55,  488,
       56,   31,   59,   59,   57,   59,  116,   59,   96,   59,

      118,   97,   95,   59,   99,  106,   98,  118,   31,   68,
      112,  100,  118,   69,   59,   70,  124,  120,   59,   59,
      126,   59,   81,  128,   59,   59,  125,   71,   72,  127,
      166,  483,  115,  129,  135,   72,  139,   59,   41,   41,
       41,   41,   41,   41,   41,   73,   59,  141,   74,   75,
      138,  156,  482,   76,   77,  142,  150,   78,   79,   80,
       81,   59,   59,  143,  151,   59,  157,   59,  154,  159,
       59,  482,   82,   72,  162,  179,  164,  481,   83,  479,
      467,  467,  467,  467,  467,   84,  467,   85,  467,  467,
       73,  467,   86,   74,   87,  110,   88,   89,   76,   77,

       90,  109,   91,   79,   80,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   69,  252,
       70,  211,  250,  467,  462,  297,  299,   81,  304,  304,
      449,  341,   71,   72,  362,   81,  360,  207,  246,   71,
       72,  293,  253,  446,  293,  299,  132,   71,   72,  300,
       73,  367,  356,   74,   75,  446,  367,  363,   76,   77,
       74,  445,   78,   79,   80,   76,   77,  356,   74,   78,
      443,   80,  362,   76,   77,  442,   69,   78,  155,   80,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

       71,   72,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  421,  442,  441,  439,  437,  436,   73,  369,
      421,   74,   75,  110,  421,  420,   76,   77,  371,  109,
       78,   79,   80,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  168,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  418,  169,  442,  446,  371,  416,
      416,  170,  482,  413,  188,  416,  416,  316,  171,  317,
      172,  416,  413,  416,  416,  173,  189,  174,  467,  175,
      176,  373,  190,  177,  467,  178,  363,  467,  199,  191,
      200,  192,  416,  416,  373,  341,  193,  448,  194,  318,

      195,  196,  189,  374,  197,  416,  198,  468,  190,  416,
      470,  188,  320,  416,  416,  191,  367,  192,  413,  341,
      201,  413,  193,  189,  202,  410,  195,  196,  413,  190,
      197,  413,  198,  203,  413,  413,  191,  413,  192,  413,
      413,  201,  344,  193,  413,  202,  360,  195,  196,  410,
      410,  197,  208,  198,  203,  214,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  344,  215,  389,  375,
      371,  371,  371,  216,  225,  341,  226,  371,  371,  371,
      217,  371,  218,  371,  371,  372,  484,  219,  215,  220,
      371,  221,  222,  367,  216,  223,  366,  224,  316,  214,

      317,  217,  364,  218,  362,  410,  227,  362,  219,  362,
      228,  215,  221,  222,  362,  362,  223,  216,  224,  229,
      230,  362,  344,  334,  217,  335,  218,  362,  362,  227,
      318,  219,  215,  228,  374,  221,  222,  362,  216,  223,
      362,  224,  229,  320,  225,  217,  226,  218,  360,  359,
      357,  356,  219,  356,  220,  336,  221,  222,  215,  388,
      223,  334,  224,  335,  216,  356,  356,  231,  338,  356,
      356,  217,  356,  218,  356,  356,  227,  356,  219,  232,
      228,  304,  221,  222,  303,  233,  223,  301,  224,  229,
      231,  299,  234,  336,  235,  299,  299,  388,  299,  236,

      299,  237,  232,  238,  239,  299,  338,  240,  233,  241,
      299,  299,  299,  299,  297,  234,  296,  235,  294,  293,
      293,  293,  236,  293,  237,  293,  238,  242,  293,  293,
      240,  293,  241,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  247,  293,  293,  254,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  256,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  252,  257,
      252,  252,  252,  252,  252,  258,  267,  252,  268,  252,

      252,  252,  259,  250,  260,  249,  247,  246,  246,  261,
      257,  262,  246,  263,  264,  246,  258,  265,  246,  266,
      334,  256,  402,  259,  246,  260,  246,  246,  269,  246,
      261,  246,  270,  257,  263,  264,  243,  212,  265,  258,
      266,  271,  272,  211,  210,  404,  259,  405,  260,  208,
      207,  269,  336,  261,  257,  270,  388,  263,  264,  207,
      258,  265,  207,  266,  271,  338,  267,  259,  268,  260,
      207,  207,  207,  207,  261,  207,  262,  406,  263,  264,
      257,  407,  265,  316,  266,  422,  258,  207,  207,  273,
      408,  204,  186,  259,  185,  260,  184,  184,  269,  184,

      261,  274,  270,  184,  263,  264,  184,  275,  265,  184,
      266,  271,  273,  184,  276,  318,  277,  184,  184,  374,
      184,  278,  181,  279,  274,  280,  281,  180,  320,  282,
      275,  283,  165,  285,  161,  286,  110,  276,  110,  277,
      161,  132,  153,  152,  278,  149,  279,  257,  280,  284,
      148,  147,  282,  258,  283,  110,  256,  146,  144,  140,
      259,  137,  260,  136,  134,  287,  133,  261,  274,  288,
      131,  263,  264,  130,  275,  265,  123,  266,  289,  273,
      122,  276,   94,  277,  119,  118,  287,  118,  278,  118,
      290,  274,  280,  284,  118,  118,  282,  275,  283,  289,

      118,  118,  110,  115,  276,  116,  277,  115,  115,  117,
      116,  278,  115,  279,  114,  280,  284,  113,  294,  282,
      112,  283,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  301,  109,  305,   30,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  306,  108,  107,  104,
      103,   59,  307,  316,   94,  317,   92,   59,   30,  308,
       48,  309,   47,   47,   47,   47,  310,  306,  311,   47,
      312,  313,   47,  307,  314,   47,  315,  423,  305,  424,

      308,   47,  309,   47,   47,  318,   30,  310,   28,  319,
      306,  312,  313,   27,  488,  314,  307,  315,  320,  321,
      488,  488,  334,  308,  429,  309,  488,  488,  318,  425,
      310,  306,  319,  426,  312,  313,  488,  307,  314,  488,
      315,  320,  427,  316,  308,  317,  309,  488,  488,  488,
      488,  310,  488,  311,  336,  312,  313,  306,  388,  314,
      430,  315,  431,  307,  488,  488,  322,  338,  488,  488,
      308,  488,  309,  488,  488,  318,  488,  310,  323,  319,
      488,  312,  313,  488,  324,  314,  488,  315,  320,  322,
      488,  325,  432,  326,  488,  488,  433,  488,  327,  488,

      328,  323,  329,  330,  488,  434,  331,  324,  332,  488,
      334,  488,  335,  488,  325,  488,  326,  488,  488,  488,
      488,  327,  488,  328,  306,  329,  333,  488,  488,  331,
      307,  332,  488,  305,  488,  488,  488,  308,  488,  309,
      488,  488,  336,  488,  310,  323,  337,  488,  312,  313,
      488,  324,  314,  488,  315,  338,  322,  488,  325,  488,
      326,  488,  488,  336,  488,  327,  488,  339,  323,  329,
      333,  488,  488,  331,  324,  332,  338,  340,  488,  488,
      404,  325,  405,  326,  488,  488,  488,  488,  327,  306,
      328,  488,  329,  333,  341,  307,  331,  488,  332,  488,

      488,  334,  308,  335,  309,  488,  488,  488,  488,  310,
      488,  311,  406,  312,  313,  306,  407,  314,  488,  315,
      341,  307,  488,  488,  342,  408,  488,  423,  308,  424,
      309,  488,  488,  336,  488,  310,  343,  337,  488,  312,
      313,  344,  345,  314,  488,  315,  338,  488,  488,  346,
      342,  347,  488,  488,  488,  488,  348,  488,  349,  425,
      350,  351,  343,  426,  352,  488,  353,  344,  345,  488,
      488,  488,  427,  488,  488,  346,  488,  347,  488,  488,
      488,  488,  348,  488,  349,  488,  350,  354,  488,  488,
      352,  488,  353,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  357,  488,  488,  488,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  364,  488,  488,
      488,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  369,  488,  488,  488,  488,  488,  488,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  306,  488,
      488,  430,  488,  431,  307,  488,  488,  376,  488,  488,
      488,  308,  488,  309,  488,  488,  318,  488,  310,  377,

      319,  488,  312,  313,  488,  378,  314,  488,  315,  320,
      376,  488,  379,  432,  380,  488,  488,  433,  488,  381,
      488,  382,  377,  383,  384,  488,  434,  385,  378,  386,
      488,  488,  488,  488,  488,  379,  488,  380,  488,  488,
      488,  488,  381,  323,  382,  341,  383,  387,  488,  324,
      385,  488,  386,  404,  376,  464,  325,  488,  326,  488,
      488,  336,  488,  327,  488,  339,  377,  329,  333,  488,
      488,  331,  378,  332,  338,  390,  341,  488,  488,  379,
      488,  380,  488,  488,  488,  406,  381,  391,  382,  407,
      383,  387,  344,  392,  385,  488,  386,  488,  408,  488,

      393,  488,  394,  488,  488,  488,  390,  395,  488,  396,
      488,  397,  398,  488,  488,  399,  488,  400,  391,  488,
      488,  488,  488,  344,  392,  488,  341,  488,  488,  488,
      423,  393,  471,  394,  488,  488,  488,  488,  395,  343,
      396,  488,  397,  401,  488,  345,  399,  488,  400,  488,
      488,  488,  346,  488,  347,  488,  390,  406,  488,  348,
      488,  409,  425,  350,  354,  488,  426,  352,  391,  353,
      408,  488,  488,  344,  392,  427,  488,  488,  488,  488,
      488,  393,  488,  394,  488,  488,  488,  488,  395,  488,
      396,  488,  397,  401,  488,  488,  399,  488,  400,  411,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  369,
      488,  488,  488,  488,  488,  488,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  364,  488,  488,  488,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      418,  472,  488,  473,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  377,  488,  488,  488,  488,  488,
      378,  488,  341,  488,  488,  488,  430,  379,  478,  380,
      488,  488,  425,  474,  381,  391,  428,  475,  383,  387,

      488,  392,  385,  341,  386,  427,  476,  488,  393,  488,
      394,  488,  390,  432,  488,  395,  488,  435,  432,  397,
      401,  488,  433,  399,  391,  400,  434,  488,  488,  344,
      392,  434,  488,  390,  488,  488,  488,  393,  488,  394,
      488,  488,  488,  488,  395,  391,  396,  488,  397,  438,
      344,  392,  399,  488,  400,  488,  488,  488,  393,  488,
      394,  488,  488,  488,  488,  395,  488,  396,  488,  397,
      401,  488,  357,  399,  488,  400,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  439,  488,  488,  488,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      364,  488,  488,  488,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  443,  341,  488,  488,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  488,  488,
      488,  341,  488,  488,  488,  450,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  488,  451,  488,  472,
      488,  473,  344,  452,  488,  488,  488,  341,  488,  488,
      453,  450,  454,  488,  488,  488,  488,  455,  488,  456,
      488,  457,  458,  451,  488,  459,  488,  460,  344,  452,
      488,  474,  488,  341,  488,  475,  453,  450,  454,  488,

      472,  488,  487,  455,  476,  456,  488,  457,  461,  451,
      488,  459,  488,  460,  344,  452,  488,  488,  488,  341,
      488,  488,  453,  450,  454,  488,  488,  488,  488,  455,
      488,  456,  474,  457,  463,  451,  475,  459,  488,  460,
      344,  452,  488,  488,  488,  476,  488,  488,  453,  390,
      454,  488,  488,  488,  488,  455,  488,  456,  488,  457,
      461,  391,  488,  459,  488,  460,  344,  392,  488,  488,
      488,  488,  488,  488,  393,  488,  394,  488,  488,  488,
      488,  395,  488,  396,  488,  397,  401,  369,  488,  399,
      488,  400,  488,  488,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  418,  341,  488,  488,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  451,  488,
      488,  488,  488,  488,  452,  488,  341,  488,  488,  488,
      488,  453,  488,  454,  488,  450,  474,  488,  455,  488,
      477,  488,  457,  461,  488,  488,  459,  451,  460,  476,
      488,  488,  344,  452,  488,  488,  450,  488,  488,  488,
      453,  488,  454,  488,  488,  488,  488,  455,  451,  456,
      488,  457,  461,  344,  452,  459,  488,  460,  488,  488,
      488,  453,  488,  454,  488,  488,  488,  488,  455,  488,

      456,  488,  457,  461,  488,  439,  459,  488,  460,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  479,
      488,  488,  488,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  443,  488,  488,  488,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  479,  488,  488,
      488,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,   29,  488,  488,  488,   29,   31,  488,  488,   31,
       34,  488,  488,  488,  488,   34,   40,  488,   40,   40,
       41,   41,   43,  488,  488,   43,   43,   53,   53,   53,

       53,   53,  488,   53,   53,   53,   53,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  158,  488,  158,
      158,  158,  158,  158,  158,  158,  158,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  163,  488,  163,
      163,  163,  163,  163,  163,  163,  163,  167,  488,  167,
      167,  167,  167,  167,  167,  167,  167,  182,  488,  182,
      182,  182,  182,  182,  182,  182,  182,  187,  488,  187,
      187,  187,  187,  187,  187,  187,  187,  205,  488,  205,
      205,  205,  205,  205,  205,  205,  205,  213,  488,  213,

      213,  213,  213,  213,  213,  213,  213,  244,  488,  244,
      244,  244,  244,  244,  244,  244,  244,  255,  488,  255,
      255,  255,  255,  255,  255,  255,  255,  291,  488,  291,
      291,  291,  291,  291,  291,  291,  291,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  417,  488,  417,  417,
      417,  417,  417,  417,  417,  417,    5,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488
    } ;

static yyconst short int yy_chk[2552] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,   14,   35,   12,   29,   12,

       11,   12,   28,   28,   60,   29,   35,   60,   11,   38,
       11,   37,   11,   64,   38,   36,   11,   14,   12,   12,
       36,   38,   37,   36,   49,   49,   64,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,  495,   16,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   33,   61,   61,   96,   96,  484,   33,   15,
       16,   16,   16,   16,   15,   15,   33,   40,   33,   40,
       33,   40,   54,   55,   33,   56,   87,   65,   55,   57,

       82,   55,   54,   99,   57,   65,   56,   91,   40,   40,
       82,   57,   87,   45,   95,   45,   99,   95,  100,  102,
      101,  105,  117,  102,  124,  162,  100,   45,   45,  101,
      162,  479,   91,  105,  117,  117,  124,  127,   16,   16,
       16,   16,   16,   16,   16,   45,  121,  127,   45,   45,
      121,  146,  476,   45,   45,  128,  138,   45,   45,   45,
       47,  143,  151,  128,  138,  154,  146,  159,  143,  151,
      164,  475,   47,   47,  154,  164,  159,  474,   47,  472,
      461,  460,  459,  457,  456,   47,  455,   47,  454,  453,
       47,  452,   47,   47,   47,   70,   47,   47,   47,   47,

       47,   70,   47,   47,   47,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  111,  239,
      111,  202,  228,  451,  443,  270,  281,  112,  288,  290,
      439,  436,  111,  111,  330,  115,  319,  202,  228,  112,
      112,  270,  239,  434,  288,  290,  112,  115,  115,  281,
      111,  337,  319,  111,  111,  433,  339,  330,  111,  111,
      112,  432,  111,  111,  111,  112,  112,  337,  115,  112,
      430,  112,  339,  115,  115,  427,  145,  115,  145,  115,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      145,  145,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  409,  426,  425,  423,  418,  417,  145,  410,
      408,  145,  145,  155,  407,  406,  145,  145,  409,  155,
      145,  145,  145,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  163,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  404,  163,  428,  435,  351,  401,
      400,  163,  477,  384,  182,  399,  397,  355,  163,  355,
      163,  398,  428,  435,  438,  163,  182,  163,  477,  163,
      163,  351,  182,  163,  458,  163,  384,  463,  183,  182,
      183,  182,  396,  395,  398,  482,  182,  438,  182,  355,

      182,  182,  183,  355,  182,  394,  182,  458,  183,  393,
      463,  184,  355,  392,  391,  183,  388,  183,  387,  481,
      183,  386,  183,  184,  183,  482,  183,  183,  385,  184,
      183,  383,  183,  183,  382,  381,  184,  380,  184,  379,
      378,  184,  482,  184,  377,  184,  374,  184,  184,  481,
      372,  184,  200,  184,  184,  205,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  481,  205,  364,  357,
      354,  353,  352,  205,  206,  486,  206,  350,  349,  348,
      205,  347,  205,  346,  345,  344,  481,  205,  206,  205,
      343,  205,  205,  338,  206,  205,  336,  205,  358,  207,

      358,  206,  334,  206,  333,  486,  206,  332,  206,  331,
      206,  207,  206,  206,  329,  328,  206,  207,  206,  206,
      208,  327,  486,  361,  207,  361,  207,  326,  325,  207,
      358,  207,  208,  207,  358,  207,  207,  324,  208,  207,
      323,  207,  207,  358,  209,  208,  209,  208,  320,  318,
      316,  315,  208,  314,  208,  361,  208,  208,  209,  361,
      208,  365,  208,  365,  209,  313,  312,  210,  361,  311,
      310,  209,  309,  209,  308,  307,  209,  306,  209,  210,
      209,  289,  209,  209,  287,  210,  209,  285,  209,  209,
      211,  284,  210,  365,  210,  283,  282,  365,  280,  210,

      279,  210,  211,  210,  210,  278,  365,  210,  211,  210,
      277,  276,  275,  274,  271,  211,  269,  211,  267,  266,
      265,  264,  211,  263,  211,  262,  211,  211,  261,  260,
      211,  259,  211,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  226,  258,  257,  243,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  244,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  242,  244,
      241,  240,  238,  237,  236,  244,  245,  235,  245,  234,

      233,  232,  244,  229,  244,  227,  225,  224,  223,  244,
      245,  244,  222,  244,  244,  221,  245,  244,  220,  244,
      368,  246,  368,  245,  219,  245,  218,  217,  245,  216,
      245,  215,  245,  246,  245,  245,  212,  204,  245,  246,
      245,  245,  247,  203,  201,  370,  246,  370,  246,  199,
      198,  246,  368,  246,  247,  246,  368,  246,  246,  197,
      247,  246,  196,  246,  246,  368,  248,  247,  248,  247,
      195,  194,  193,  192,  247,  191,  247,  370,  247,  247,
      248,  370,  247,  411,  247,  411,  248,  190,  189,  249,
      370,  186,  180,  248,  179,  248,  178,  177,  248,  176,

      248,  249,  248,  175,  248,  248,  174,  249,  248,  173,
      248,  248,  250,  172,  249,  411,  249,  171,  170,  411,
      169,  249,  166,  249,  250,  249,  249,  165,  411,  249,
      250,  249,  161,  251,  160,  251,  157,  250,  156,  250,
      153,  148,  141,  139,  250,  136,  250,  251,  250,  250,
      135,  134,  250,  251,  250,  133,  252,  132,  129,  125,
      251,  120,  251,  119,  114,  251,  113,  251,  252,  251,
      109,  251,  251,  106,  252,  251,   98,  251,  251,  253,
       97,  252,   93,  252,   92,   90,  252,   89,  252,   88,
      252,  253,  252,  252,   86,   85,  252,  253,  252,  252,

       84,   83,   81,   80,  253,   79,  253,   78,   77,   76,
       75,  253,   74,  253,   73,  253,  253,   72,  268,  253,
       71,  253,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  286,   69,  291,   68,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  291,   67,   66,   63,
       62,   58,  291,  292,   53,  292,   48,   34,   31,  291,
       27,  291,   26,   25,   24,   23,  291,  292,  291,   22,
      291,  291,   21,  292,  291,   20,  291,  412,  293,  412,

      292,   19,  292,   18,   17,  292,   10,  292,    9,  292,
      293,  292,  292,    8,    5,  292,  293,  292,  292,  294,
        0,    0,  414,  293,  414,  293,    0,    0,  293,  412,
      293,  294,  293,  412,  293,  293,    0,  294,  293,    0,
      293,  293,  412,  295,  294,  295,  294,    0,    0,    0,
        0,  294,    0,  294,  414,  294,  294,  295,  414,  294,
      415,  294,  415,  295,    0,    0,  296,  414,    0,    0,
      295,    0,  295,    0,    0,  295,    0,  295,  296,  295,
        0,  295,  295,    0,  296,  295,    0,  295,  295,  297,
        0,  296,  415,  296,    0,    0,  415,    0,  296,    0,

      296,  297,  296,  296,    0,  415,  296,  297,  296,    0,
      298,    0,  298,    0,  297,    0,  297,    0,    0,    0,
        0,  297,    0,  297,  298,  297,  297,    0,    0,  297,
      298,  297,    0,  299,    0,    0,    0,  298,    0,  298,
        0,    0,  298,    0,  298,  299,  298,    0,  298,  298,
        0,  299,  298,    0,  298,  298,  300,    0,  299,    0,
      299,    0,    0,  299,    0,  299,    0,  299,  300,  299,
      299,    0,    0,  299,  300,  299,  299,  301,    0,    0,
      419,  300,  419,  300,    0,    0,    0,    0,  300,  301,
      300,    0,  300,  300,  303,  301,  300,    0,  300,    0,

        0,  302,  301,  302,  301,    0,    0,    0,    0,  301,
        0,  301,  419,  301,  301,  302,  419,  301,    0,  301,
      304,  302,    0,    0,  303,  419,    0,  440,  302,  440,
      302,    0,    0,  302,    0,  302,  303,  302,    0,  302,
      302,  303,  303,  302,    0,  302,  302,    0,    0,  303,
      304,  303,    0,    0,    0,    0,  303,    0,  303,  440,
      303,  303,  304,  440,  303,    0,  303,  304,  304,    0,
        0,    0,  440,    0,    0,  304,    0,  304,    0,    0,
        0,    0,  304,    0,  304,    0,  304,  304,    0,    0,
      304,    0,  304,  305,  305,  305,  305,  305,  305,  305,

      305,  305,  305,  317,    0,    0,    0,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  335,    0,    0,
        0,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  342,    0,    0,    0,    0,    0,    0,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  356,    0,
        0,  444,    0,  444,  356,    0,    0,  359,    0,    0,
        0,  356,    0,  356,    0,    0,  356,    0,  356,  359,

      356,    0,  356,  356,    0,  359,  356,    0,  356,  356,
      360,    0,  359,  444,  359,    0,    0,  444,    0,  359,
        0,  359,  360,  359,  359,    0,  444,  359,  360,  359,
        0,    0,    0,    0,    0,  360,    0,  360,    0,    0,
        0,    0,  360,  362,  360,  366,  360,  360,    0,  362,
      360,    0,  360,  447,  363,  447,  362,    0,  362,    0,
        0,  362,    0,  362,    0,  362,  363,  362,  362,    0,
        0,  362,  363,  362,  362,  366,  367,    0,    0,  363,
        0,  363,    0,    0,    0,  447,  363,  366,  363,  447,
      363,  363,  366,  366,  363,    0,  363,    0,  447,    0,

      366,    0,  366,    0,    0,    0,  367,  366,    0,  366,
        0,  366,  366,    0,    0,  366,    0,  366,  367,    0,
        0,    0,    0,  367,  367,    0,  373,    0,    0,    0,
      465,  367,  465,  367,    0,    0,    0,    0,  367,  371,
      367,    0,  367,  367,    0,  371,  367,    0,  367,    0,
        0,    0,  371,    0,  371,    0,  373,  371,    0,  371,
        0,  371,  465,  371,  371,    0,  465,  371,  373,  371,
      371,    0,    0,  373,  373,  465,    0,    0,    0,    0,
        0,  373,    0,  373,    0,    0,    0,    0,  373,    0,
      373,    0,  373,  373,    0,    0,  373,    0,  373,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  390,
        0,    0,    0,    0,    0,    0,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  402,    0,    0,    0,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      405,  466,    0,  466,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  413,    0,    0,    0,    0,    0,
      413,    0,  420,    0,    0,    0,  469,  413,  469,  413,
        0,    0,  413,  466,  413,  416,  413,  466,  413,  413,

        0,  416,  413,  421,  413,  413,  466,    0,  416,    0,
      416,    0,  420,  416,    0,  416,    0,  416,  469,  416,
      416,    0,  469,  416,  420,  416,  416,    0,    0,  420,
      420,  469,    0,  421,    0,    0,    0,  420,    0,  420,
        0,    0,    0,    0,  420,  421,  420,    0,  420,  420,
      421,  421,  420,    0,  420,    0,    0,    0,  421,    0,
      421,    0,    0,    0,    0,  421,    0,  421,    0,  421,
      421,    0,  422,  421,    0,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  424,    0,    0,    0,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      429,    0,    0,    0,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  431,  441,    0,    0,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,    0,    0,
        0,  442,    0,    0,    0,  441,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,    0,  441,    0,  480,
        0,  480,  441,  441,    0,    0,    0,  445,    0,    0,
      441,  442,  441,    0,    0,    0,    0,  441,    0,  441,
        0,  441,  441,  442,    0,  441,    0,  441,  442,  442,
        0,  480,    0,  446,    0,  480,  442,  445,  442,    0,

      485,    0,  485,  442,  480,  442,    0,  442,  442,  445,
        0,  442,    0,  442,  445,  445,    0,    0,    0,  448,
        0,    0,  445,  446,  445,    0,    0,    0,    0,  445,
        0,  445,  485,  445,  445,  446,  485,  445,    0,  445,
      446,  446,    0,    0,    0,  485,    0,    0,  446,  448,
      446,    0,    0,    0,    0,  446,    0,  446,    0,  446,
      446,  448,    0,  446,    0,  446,  448,  448,    0,    0,
        0,    0,    0,    0,  448,    0,  448,    0,    0,    0,
        0,  448,    0,  448,    0,  448,  448,  450,    0,  448,
        0,  448,    0,    0,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  464,  468,    0,    0,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  467,    0,
        0,    0,    0,    0,  467,    0,  470,    0,    0,    0,
        0,  467,    0,  467,    0,  468,  467,    0,  467,    0,
      467,    0,  467,  467,    0,    0,  467,  468,  467,  467,
        0,    0,  468,  468,    0,    0,  470,    0,    0,    0,
      468,    0,  468,    0,    0,    0,    0,  468,  470,  468,
        0,  468,  468,  470,  470,  468,    0,  468,    0,    0,
        0,  470,    0,  470,    0,    0,    0,    0,  470,    0,

      470,    0,  470,  470,    0,  471,  470,    0,  470,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  473,
        0,    0,    0,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  478,    0,    0,    0,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  487,    0,    0,
        0,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  489,    0,    0,    0,  489,  490,    0,    0,  490,
      491,    0,    0,    0,    0,  491,  492,    0,  492,  492,
      493,  493,  494,    0,    0,  494,  494,  496,  496,  496,

      496,  496,    0,  496,  496,  496,  496,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  499,    0,  499,
      499,  499,  499,  499,  499,  499,  499,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  501,    0,  501,
      501,  501,  501,  501,  501,  501,  501,  502,    0,  502,
      502,  502,  502,  502,  502,  502,  502,  503,    0,  503,
      503,  503,  503,  503,  503,  503,  503,  504,    0,  504,
      504,  504,  504,  504,  504,  504,  504,  505,    0,  505,
      505,  505,  505,  505,  505,  505,  505,  506,    0,  506,

      506,  506,  506,  506,  506,  506,  506,  507,    0,  507,
      507,  507,  507,  507,  507,  507,  507,  508,    0,  508,
      508,  508,  508,  508,  508,  508,  508,  509,    0,  509,
      509,  509,  509,  509,  509,  509,  509,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  511,    0,  511,  511,
      511,  511,  511,  511,  511,  511,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/ChineseCharParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "../src/ChineseCharParser.l"

/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.lemurproject.org/license.html
 *
 *==========================================================================
*/


#include "ChineseCharParser.hpp"

#include <cstring>

#include <cctype>
#include <cstdlib>
#include <cstdio>

#include <iostream>
#include <fstream>

#define B_DOC 1
#define E_DOC 2
#define B_DOCHDR 12
#define E_DOCHDR 13
#define F_DOCNO 3
#define WORD 11
#define UPWORD 18
#define CONTRACTION 14
#define ACRONYM 15
#define ACRONYM2 17
#define UNKNOWN 16
#define B_TEXT 19
#define E_TEXT 20


extern FILE * ChineseCharin;
extern char * ChineseChartext;

long CCpos;

#define SKIP 1

#line 1166 "../src/ChineseCharParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 88 "../src/ChineseCharParser.l"


#line 1320 "../src/ChineseCharParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 489 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2457 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_DOC; /*1*/}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_DOC; /*2*/}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return F_DOCNO; /*3*/}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 93 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT; /*4*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 94 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*5*/}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 95 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*6*/}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*7*/}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 97 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*8*/}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*9*/}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*10*/}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 100 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*11*/}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 101 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*12*/ }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 102 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*13*/ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 103 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT; /*14*/}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 104 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*15*/}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 105 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap tags */ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 106 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap other tags*/}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 107 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap symbols */ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 108 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap symbols */ }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 109 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap one chinese punctutions */ } 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 110 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return UPWORD; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 111 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 112 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return ACRONYM2; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 113 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return CONTRACTION;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 114 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return ACRONYM; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 115 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; /* chinese number or date */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 116 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; /* single chinese char */ }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 117 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap newline */ }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 118 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return UNKNOWN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 120 "../src/ChineseCharParser.l"
ECHO;
	YY_BREAK
#line 1553 "../src/ChineseCharParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 489 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 489 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 488);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 120 "../src/ChineseCharParser.l"


#define OUTER 0
#define DOC 1
#define TEXT 9

lemur::parse::ChineseCharParser::ChineseCharParser() {
  state = OUTER;
  iden = identifier;
}

long lemur::parse::ChineseCharParser::fileTell() const {
  return CCpos;
}

void lemur::parse::ChineseCharParser::parseFile(const string &filename) {  
  parsefile = filename;
  CCpos = 0;
  ChineseCharin = fopen(filename.c_str(), "rb");
  doParse();
  fclose(ChineseCharin);
}

void lemur::parse::ChineseCharParser::parseBuffer(char* buf, int len) {
  int tpos = CCpos;
  CCpos = 0;
  YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
  YY_BUFFER_STATE myBuf = yy_scan_bytes(buf, len);
  doParse();
  if (oldBuf) yy_switch_to_buffer(oldBuf);
  yy_delete_buffer(myBuf);
  CCpos = tpos;
}


void lemur::parse::ChineseCharParser::doParse() {
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering a tag
  // can transition the machine into another state.
  // When in the TEXT state, text is parsed.
  while (tok = ChineseCharlex()) {
      //      fprintf(stderr, "parsing tok %d %s\n", tok, ChineseChartext);
    switch (tok) {	
    case E_DOC:
      state = OUTER;
      if (textHandler != NULL) textHandler->foundEndDoc();
      break;
    
    case B_DOC:
      state = DOC;
      docpos = CCpos - ChineseCharleng;
      break;

    case F_DOCNO:
      {
        // Extract the document number and pass it on.
	char * dn = ChineseChartext + 7;
	while (isspace(*dn)) dn++;
	char * de = dn;
	while (!isspace(*de) && *de != '<') de++;
	*de = '\0';
	if (textHandler != NULL) textHandler->foundDoc(dn);

	state = TEXT;
	break;
      }

    case B_TEXT:
      state = TEXT;
      break;

    case E_TEXT:
      state = DOC;
      break;
         
    case WORD:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case CONTRACTION:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case UPWORD:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case ACRONYM:
      if (state == TEXT) {
	char * e = ChineseChartext;
	for (char * c = ChineseChartext; *c != '\0'; c++) {
	  if (*c != '.') *(e++) = *c;
	}
	*e = '\0';
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;
    
    case ACRONYM2:
      if (state == TEXT) {
        char * c;
        int len = 0, diff;

	// strip suffix
	for (c = ChineseChartext; *c != '\'' && *c != '\0' && *c != 's'; c++, len++);
        *c = '\0';
	diff = ChineseCharleng - len;
	CCpos -= diff;
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
	CCpos += diff;
      }      
      break;
    }
  }
}

