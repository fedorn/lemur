#define yy_create_buffer ChineseChar_create_buffer
#define yy_delete_buffer ChineseChar_delete_buffer
#define yy_scan_buffer ChineseChar_scan_buffer
#define yy_scan_string ChineseChar_scan_string
#define yy_scan_bytes ChineseChar_scan_bytes
#define yy_flex_debug ChineseChar_flex_debug
#define yy_init_buffer ChineseChar_init_buffer
#define yy_flush_buffer ChineseChar_flush_buffer
#define yy_load_buffer_state ChineseChar_load_buffer_state
#define yy_switch_to_buffer ChineseChar_switch_to_buffer
#define yyin ChineseCharin
#define yyleng ChineseCharleng
#define yylex ChineseCharlex
#define yyout ChineseCharout
#define yyrestart ChineseCharrestart
#define yytext ChineseChartext

#line 19 "../src/ChineseCharParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 28
#define YY_END_OF_BUFFER 29
static yyconst short int yy_accept[738] =
    {   0,
        0,    0,    0,    0,   29,   27,   26,   27,   27,   20,
       27,   20,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,   19,
        0,    0,   18,   18,   18,   18,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   17,   16,   22,    0,    0,    0,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,    0,   20,
       25,   18,   18,   25,   25,   25,    0,    0,   18,   25,
       25,    0,    0,   15,    0,    0,    0,    0,    0,    0,

        0,   12,    0,    0,   23,   21,    0,   24,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,   13,    0,
        1,    0,    0,    0,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
       11,    0,    6,    0,    4,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    0,   14,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    9,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    3,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    1,    7,    8,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,   13,   14,
        1,   15,    1,    1,   16,   17,   18,   19,   20,   17,
       17,   21,   22,   17,   17,   23,   17,   24,   25,   26,
       17,   17,   17,   27,   17,   17,   17,   28,   17,   17,
        1,    1,    1,    1,    1,    1,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   30,   29,   29,   29,   29,   29,
       29,   29,    1,    1,    1,    1,    1,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       37,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   58,   59,
       60,   58,   61,   62,   63,   64,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   74,   63,   75,   63,   76,
       63,   77,   78,   79,   80,   63,   81,   82,   63,   83,
       63,   63,   84,   63,   63,   63,   63,   63,   85,   63,
       86,   63,   63,   87,   88,   88,   88,   88,   88,   89,
       90,   91,   90,   90,   92,   90,   90,   90,   93,   90,
       90,   90,   94,   95,   90
    } ;

static yyconst int yy_meta[96] =
    {   0,
        1,    2,    1,    1,    3,    4,    1,    5,    6,    7,
        3,    5,    1,    1,    1,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        9,    9,    9,   10,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9

    } ;

static yyconst short int yy_base[762] =
    {   0,
        0,    0,    0,    0, 1393, 4994, 4994, 1317, 1384, 1381,
       91,   91,    0,   91,  101,   73, 1316, 1290, 1319, 1287,
     1295, 1282, 1330, 1308, 1286, 1312, 1305,   85,  102,    0,
     1357,    0,  164, 1349,   94,   96,   98,  159,  176,  197,
     1360, 1359, 1358, 1355, 1353, 1351, 1347,  174, 1345, 1343,
     1342, 1341, 1334, 1332, 1329, 1326, 1322, 1320, 1319, 1317,
     1261,  115, 4994, 4994,    0, 1302,  155,  158,  156,  102,
     1301, 4994,  195,  115, 1299,  196,  197, 1299, 1274, 1294,
     4994, 4994, 4994, 1298,  185,  211, 1265,  183, 4994,  239,
     1296, 1256, 1280, 4994,  200,  206, 1278, 1277,  224,  225,

      157, 4994,  201, 1276,  243,    0,  270, 4994, 1251, 1205,
     1213, 1192, 1240, 1199, 1184, 1183, 1190, 1208, 1179, 1255,
     1254, 1252,  220, 1183, 1158, 1187, 1158, 1166, 1155, 1202,
     1180, 1158, 1183,  293, 1169, 1221,  229, 4994, 4994, 1220,
     4994,  226,  257, 1219, 4994, 1230,  240, 1169,  243, 1226,
     1225, 1222, 1219, 1216, 1212, 1210, 1178, 1207, 1205, 1204,
     1201, 1197, 1196, 1191, 1189, 1188, 1187, 1103, 4994,  259,
     4994, 1172, 4994,  275, 4994, 1182,  319, 1104, 1111, 1175,
     1088,  274, 1168,  277, 1167,    0, 4994,  277, 1155,  271,
     1165,  256, 1163, 1083, 1160,  338,    0,  287, 1148, 1149,

      235, 1091, 1087, 1103,  329,  353,  261, 1136, 1139,    0,
      384, 1082, 1056, 1085, 1056, 1064, 1053, 1102, 1081, 1058,
     1084, 1122, 1110, 4994,  394,  415,  441,  474,  495,  518,
      556,  577,  600,  638,  659,  682,  720, 4994, 1115,    0,
      751, 1061, 1036, 1063, 1033, 1041, 1030, 1079, 1058, 1033,
     1060,  370,  272, 1077,  765,  775, 1107, 1084,  796,  819,
      860,  881,  904,  942,  963,  986, 1024, 1045, 1068, 1106,
     1127, 1150, 1171, 1214, 1237, 1260, 1281, 1307, 1336, 1357,
     1383, 1404, 1427, 1450, 1471, 1497, 1523, 1544, 1567, 1588,
     1611, 1649, 1082,    0,  850, 1034, 1008, 1036, 1006, 1012,

      999, 1045, 1024, 1002, 1029,  413,  321, 1049, 1680, 1690,
     1079,  994,  241, 1018, 1075, 1074,  291,  422,  448,  303,
     1072, 1071, 1039,  330, 1069, 1066, 1065, 1064, 1063, 1062,
     1061, 1060, 1058, 1044, 1711, 1734, 1775, 1796, 1819, 1857,
     1878, 1901, 1939, 1960, 1983, 2021, 2042, 2065, 2086, 2129,
     2152, 2175, 2196, 2222, 2251, 2272, 2298, 2319, 2342, 2365,
     2386, 2412, 2438, 2459, 2482, 2503, 2526, 2564, 2587, 2608,
     2634, 2655, 2678, 2699, 2730, 2747, 4994,    0, 1765,  984,
      958,  986,  957,  965,  952, 1000,  979,  957,  984,  456,
      332, 1005, 2761, 2771, 1033,  948,  266,  968, 1025, 1023,

      355,  460,  463,  387, 1022, 1020,  987,  347, 1016, 1014,
     1011, 1008, 1004, 1003, 1002, 1001,  999,  997,  356, 2802,
     2812,  996,  398,  469,  496, 2833, 2856, 2897, 2918, 2941,
     2979, 3000, 3023, 3061, 3082, 3105, 3143, 3164, 3187, 3208,
     3251, 3274, 3297, 3318, 3344, 3373, 3394, 3420, 3441, 3464,
     3487, 3508, 3534, 3560, 3581, 3604, 3625, 3648, 3686, 3709,
     3730, 3756, 3777, 3800, 3821, 3875, 3898, 3844, 3936, 3979,
     4002, 4023, 4046, 4067, 4093, 4119, 4140, 4163, 4184, 4207,
     4248,  956, 2887,  925,  900,  928,  899,  907,  896,  943,
      922,  900,  927,  493,  442,  948, 3969, 4269,  979,  894,

      328,  917,  974,  970,  400,  502,  519,  407,  968,  966,
      934,  353,  964,  961,  959,  958,  957,  956,  955,  951,
      950,  945,  450, 4238, 4292,  943,  445,  528,  565, 4323,
      873,  848,  876,  846,  853,  841,  888,  865,  840,  867,
      447,  564,  572,  449,  920,  919,  917,  915,  914,  913,
      911,  910,  908,  907,  906,  830,  888,  801, 4333, 4343,
      815,  788,  817,  788,  795,  783,  832,  811,  789,  816,
     4357,  866,  573,  865,  858,  857,  856,  855,  853,  851,
      849,  847,  844,  510,  809, 4371, 4397,  837,  836,  835,
      834,  548,  800, 4385, 4426,  830,  745,  753,  767,  825,

      823,  822,  610,  737,  745,  748,  806,  805,  792,  646,
      501,  790,  789,  755,  529,  784,  782,  750,  780,  695,
     4457,  777,  690, 4467, 4495,  773,  772,  647, 4521,  771,
      770,  654, 4484,  700,  683,  672,  700,  671,  679,  667,
      715,  693,  670,  694, 4552, 4569,  676,  650,  677,  647,
      653,  630,  678,  657,  634,  653, 4583,    0,  700,  655,
      697,  354,  695,  692,  688,  680,  672,  662,  661,  653,
      652,  651,  660,  637,  636,  634,  632,  630,  628,  618,
      617,  616,  615,    0,  605,  575, 4597, 4607,  562,  592,
      649,  558, 4638, 4651,  582,  549,  495,  503,  511,  554,

      552,  546,  704,  459,  461,  476,  521,  520,  481,  712,
      439,  606,  454,  439,  407,  625,  412,  410,  374,  404,
      390,  281, 4682,  352,  264, 4692,  698,  309,  298,  728,
     4720,  253,  250,  736, 4709, 4751, 4994, 4803, 4807, 4813,
     4817, 4817, 4822, 4824,  117, 4834, 4844, 4854, 4864, 4874,
     4884, 4894, 4904, 4914, 4924, 4934, 4944, 4954, 4964, 4974,
     4983
    } ;

static yyconst short int yy_def[762] =
    {   0,
      737,    1,    1,    1,  737,  737,  737,  737,  738,  739,
      740,  741,  742,  743,  742,  744,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  737,  737,  738,  745,
      739,  746,  740,  747,  747,  747,  747,  747,  737,  741,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  745,  748,  747,  747,  747,  747,
      747,  737,  747,  747,  747,  747,  747,  737,  745,  739,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  748,  737,  747,  747,  747,  747,  747,  747,

      747,  737,  747,  747,  737,  745,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  747,  747,  737,  737,  747,
      737,  747,  747,  747,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  747,
      737,  747,  737,  747,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  749,  737,  747,  750,  747,
      737,  737,  737,  737,  737,  737,  751,  747,  750,  737,

      747,  737,  737,  737,  737,  752,  747,  737,  747,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  747,  737,  737,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  737,  737,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  737,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  737,  757,  757,  757,  757,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  737,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  350,  350,  737,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  466,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  760,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  761,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  760,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,    0,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737
    } ;

static yyconst short int yy_nxt[5090] =
    {   0,
        6,    7,    6,    8,    6,    6,    9,    6,    6,    6,
        6,   10,    6,   11,    6,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   10,   10,
       13,   14,   13,   15,   13,   13,   13,   13,   13,   16,
       13,   13,   13,   13,   13,   17,   13,   13,   13,   13,
       13,   18,   13,   13,   13,   13,   13,   13,   19,   13,
       20,   13,   13,   13,   13,   21,   13,   22,   13,   23,
       24,   13,   13,   25,   13,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   32,   62,   63,   30,   42,

       39,   33,   31,   41,   41,   41,   41,  737,   72,   35,
       72,   36,   72,   37,   64,   74,   72,   38,   73,   31,
       31,   41,   43,   75,   65,   45,   62,   63,   99,   72,
      101,   46,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   46,   44,   47,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   44,   44,   44,   44,
       44,   41,   41,   41,   41,   41,   41,   41,  737,   72,
       72,   72,   72,   72,  737,  143,   86,   96,   76,   95,
       97,   98,   67,   49,   68,   77,   69,  107,   44,   44,
       70,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   79,   87,  737,   88,   31,   72,
       72,   72,  100,  108,   72,   72,   87,  136,   88,  104,
       72,  137,  107,  103,  121,   31,   80,  144,  122,  123,
      123,  123,  123,  123,  123,  123,  123,  123,   72,  141,
       72,  107,  177,   72,  109,  180,  140,  170,  142,   72,
      172,   87,  734,   88,  209,  724,  110,  111,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  173,  108,  187,  112,   72,  108,  113,  114,  174,
      222,  188,  115,  116,  124,   72,  117,  118,  119,   72,
      125,   72,  178,  357,  201,  107,  190,  126,  198,  127,

      730,   72,  202,  109,  128,  373,  129,  109,  130,  131,
      207,  721,  132,  181,  133,  110,  111,  203,  370,  194,
      111,  108,  195,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  368,  112,  343,  275,  113,  114,  124,  276,
      107,  115,  116,  461,  125,  117,  118,  119,  277,  459,
      732,  126,  109,  127,  731,  498,  108,  448,  128,  434,
      129,  338,  130,  131,  110,  111,  132,  728,  133,   87,
      121,  205,  272,  374,  195,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  351,  113,  211,  689,  352,  464,
      115,  116,  727,  345,  117,  442,  119,  353,  212,  443,

      481,  273,  506,  274,  213,  509,  108,  726,  444,  522,
      436,  214,  724,  215,  724,  348,  519,  252,  216,  436,
      217,  517,  218,  219,  348,  429,  220,  241,  221,  226,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  242,
      723,  721,  469,  253,  349,  243,  350,  528,  241,  542,
      348,  587,  244,  349,  245,  350,  721,  465,  439,  246,
      242,  247,  439,  248,  249,  439,  243,  250,  429,  251,
      555,  439,  254,  244,  255,  245,  256,  558,  720,  349,
      246,  350,  247,  710,  248,  249,  242,  440,  250,  441,
      251,  440,  243,  441,  440,  495,  441,  256,  439,  244,

      440,  245,  482,  619,  495,  500,  246,  241,  247,  556,
      248,  249,  519,  519,  250,  555,  251,  555,  502,  242,
      256,  495,  719,  719,  496,  243,  497,  440,  241,  482,
      495,  622,  244,  496,  245,  497,  526,  718,  717,  246,
      242,  247,  339,  248,  249,  716,  243,  250,  703,  251,
      496,  241,  497,  244,  715,  245,  715,  430,  256,  496,
      246,  571,  247,  242,  248,  249,  584,  495,  250,  243,
      251,  620,  714,  597,  584,  592,  244,  598,  245,  256,
      713,  712,  711,  246,  694,  247,  599,  248,  249,  241,
      430,  250,  707,  251,  688,  585,  496,  586,  571,  623,

      658,  242,  256,  585,  593,  586,  594,  243,  721,  700,
      241,  604,  584,  513,  244,  605,  245,  694,  694,  694,
      695,  246,  242,  247,  606,  248,  249,  724,  243,  250,
      694,  251,  694,  241,  694,  244,  694,  245,  694,  694,
      257,  585,  246,  586,  247,  242,  248,  249,  592,  584,
      250,  243,  251,  673,  688,  688,  592,  685,  244,  513,
      245,  256,  691,  688,  690,  246,  513,  247,  697,  248,
      249,  241,  698,  250,  688,  251,  722,  593,  585,  594,
      645,  699,  688,  242,  256,  593,  686,  657,  687,  243,
      688,  692,  241,  693,  688,  725,  244,  688,  245,  688,

      108,  108,  660,  246,  242,  247,  685,  248,  249,  683,
      243,  250,  704,  251,  691,  241,  705,  244,  682,  245,
      681,  680,  256,  679,  246,  706,  247,  242,  248,  249,
      685,  689,  250,  243,  251,  686,  678,  687,  691,  677,
      244,  676,  245,  692,  675,  693,  674,  246,  635,  247,
      671,  248,  249,  241,  670,  250,  669,  251,  668,  686,
      667,  735,  666,  665,  664,  242,  663,  692,  662,  736,
      661,  243,  632,  622,  628,  619,  630,  272,  244,  629,
      245,  626,  625,  624,  622,  246,  622,  247,  621,  248,
      249,  619,  619,  250,  610,  251,  260,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  279,  618,  618,  617,
      280,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      282,  306,  616,  615,  603,  614,  283,  614,  613,  295,
      612,  611,  595,  284,  607,  285,  587,  542,  528,  587,
      286,  296,  287,  600,  288,  289,  595,  297,  290,  595,
      291,  595,  295,  596,  298,  595,  299,  595,  595,  595,
      595,  300,  307,  301,  296,  302,  303,  595,  573,  304,
      297,  305,  553,  552,  551,  550,  549,  298,  548,  299,
      547,  546,  545,  310,  300,  591,  301,  526,  302,  303,
      506,  308,  304,  309,  305,  336,  337,  337,  337,  337,

      337,  337,  337,  337,  337,  296,  310,  509,  498,  494,
      587,  297,  587,  587,  295,  588,  587,  587,  298,  587,
      299,  587,  587,  583,  582,  300,  296,  301,  581,  302,
      303,  580,  297,  304,  579,  305,  578,  295,  577,  298,
      576,  299,  575,  574,  310,  522,  300,  525,  301,  296,
      302,  303,  498,  498,  304,  297,  305,  498,  499,  498,
      498,  498,  298,  498,  299,  310,  498,  559,  522,  300,
      522,  301,  511,  302,  303,  295,  511,  304,  510,  305,
      508,  498,  503,  521,  520,  519,  518,  296,  310,  517,
      516,  515,  514,  297,  513,  555,  295,  504,  464,  468,

      298,  459,  299,  459,  459,  467,  459,  300,  296,  301,
      459,  302,  303,  459,  297,  304,  459,  305,  459,  295,
      466,  298,  464,  299,  464,  463,  310,  463,  300,  462,
      301,  296,  302,  303,  460,  459,  304,  297,  305,  445,
      438,  437,  436,  435,  298,  434,  299,  311,  433,  432,
      431,  300,  430,  301,  429,  302,  303,  295,  377,  304,
      368,  305,  368,  368,  376,  368,  368,  368,  368,  296,
      310,  368,  375,  373,  373,  297,  372,  372,  295,  371,
      369,  368,  298,  354,  299,  347,  346,  345,  344,  300,
      296,  301,  343,  302,  303,  342,  297,  304,  341,  305,

      340,  295,  339,  298,  338,  299,  334,  293,  310,  292,
      300,  278,  301,  296,  302,  303,  271,  270,  304,  297,
      305,  269,  268,  267,  266,  265,  298,  264,  299,  310,
      263,  262,  258,  300,  239,  301,  238,  302,  303,  295,
      237,  304,  236,  305,  235,  234,  233,  232,  231,  230,
      229,  296,  228,  224,  223,  178,  191,  297,  191,  208,
      295,  200,  196,  204,  298,  180,  299,  108,  200,  134,
      177,  300,  296,  301,  193,  302,  303,  108,  297,  304,
      191,  305,  192,  295,  191,  298,  189,  299,  186,  134,
      134,  134,  300,  185,  301,  296,  302,  303,  134,  134,

      304,  297,  305,  134,  295,  315,  134,  134,  298,  134,
      299,  184,  183,  312,  180,  300,  296,  313,  177,  302,
      303,  177,  297,  304,  182,  305,  314,  180,  177,  298,
      179,  299,  176,  175,  171,  169,  300,  168,  301,  167,
      302,  303,  166,  165,  304,  164,  305,  295,  163,  162,
      161,  160,  159,  158,  123,  316,  157,  157,  156,  317,
      318,  318,  318,  318,  318,  319,  318,  318,  318,  155,
      295,  154,  298,  153,  299,  152,  151,  150,  149,  300,
      148,  301,  296,  302,  303,  147,  146,  304,  297,  305,
      145,  139,  138,  295,   94,  298,  135,  299,  134,  120,

       82,   30,  300,  106,  301,  296,  302,  303,  105,  323,
      304,  297,  305,  102,  295,   72,   94,   92,  298,   90,
      299,   90,   90,  320,   91,  300,  296,  301,   90,  302,
      303,   90,  297,  304,   90,  305,   90,  321,  323,  298,
      295,  299,  322,   90,   90,   89,  300,   81,  301,   85,
      302,  303,  296,   81,  304,   84,  305,   81,  297,  318,
       83,   82,   81,   72,   30,  298,   61,  299,   60,  295,
       59,   58,  300,   57,  301,   56,  302,  303,   55,   54,
      304,  296,  305,   53,   52,  307,   51,  297,   30,   28,
      295,   27,  737,  737,  298,  737,  299,  737,  737,  737,

      737,  300,  296,  301,  737,  302,  303,  737,  297,  304,
      737,  305,  737,  737,  308,  298,  309,  299,  737,  737,
      737,  737,  300,  737,  301,  737,  302,  303,  296,  737,
      304,  737,  305,  737,  297,  737,  737,  295,  737,  737,
      737,  298,  737,  299,  737,  737,  737,  737,  300,  296,
      301,  737,  302,  303,  737,  297,  304,  737,  305,  737,
      295,  737,  298,  737,  299,  737,  737,  737,  737,  300,
      737,  301,  296,  302,  324,  737,  737,  304,  297,  305,
      737,  737,  737,  295,  737,  298,  737,  299,  737,  737,
      737,  737,  300,  737,  301,  296,  302,  303,  737,  737,

      304,  297,  305,  737,  295,  737,  737,  737,  298,  737,
      299,  737,  737,  737,  326,  300,  296,  301,  737,  302,
      303,  325,  297,  304,  737,  305,  737,  737,  737,  298,
      295,  299,  737,  737,  737,  737,  300,  737,  301,  737,
      302,  303,  296,  737,  304,  737,  305,  737,  297,  737,
      737,  737,  737,  737,  737,  298,  295,  299,  737,  737,
      737,  737,  300,  327,  301,  737,  302,  303,  296,  737,
      304,  737,  305,  737,  297,  737,  737,  295,  737,  737,
      328,  298,  737,  299,  737,  737,  737,  330,  300,  296,
      301,  737,  302,  303,  737,  297,  304,  737,  305,  737,

      295,  737,  298,  737,  299,  737,  737,  737,  737,  300,
      737,  301,  296,  302,  303,  737,  329,  304,  297,  305,
      737,  295,  737,  737,  737,  298,  737,  299,  737,  737,
      331,  737,  300,  296,  301,  737,  302,  303,  737,  297,
      304,  737,  305,  737,  295,  737,  298,  737,  299,  737,
      737,  307,  737,  300,  737,  301,  296,  302,  303,  737,
      737,  304,  297,  305,  737,  737,  737,  333,  737,  298,
      737,  299,  332,  737,  737,  737,  300,  737,  301,  737,
      302,  303,  295,  737,  304,  737,  305,  737,  737,  737,
      737,  737,  348,  737,  296,  737,  737,  737,  737,  737,

      297,  737,  737,  737,  737,  737,  737,  298,  737,  299,
      737,  737,  737,  737,  300,  737,  301,  737,  302,  303,
      737,  355,  304,  737,  305,  356,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  358,  390,  737,  737,  737,
      737,  359,  737,  737,  379,  737,  737,  737,  360,  737,
      361,  737,  737,  737,  737,  362,  380,  363,  737,  364,
      365,  737,  381,  366,  737,  367,  737,  379,  737,  382,
      737,  383,  737,  737,  737,  737,  384,  391,  385,  380,
      386,  387,  737,  737,  388,  381,  389,  737,  737,  737,
      737,  737,  382,  737,  383,  737,  737,  737,  394,  384,

      737,  385,  737,  386,  387,  737,  392,  388,  393,  389,
      427,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      380,  394,  737,  737,  737,  737,  381,  737,  737,  379,
      737,  737,  737,  382,  737,  383,  737,  737,  737,  737,
      384,  380,  385,  737,  386,  387,  737,  381,  388,  737,
      389,  737,  379,  737,  382,  737,  383,  737,  737,  394,
      737,  384,  737,  385,  380,  386,  387,  737,  737,  388,
      381,  389,  737,  737,  737,  737,  737,  382,  737,  383,
      394,  737,  737,  737,  384,  737,  385,  737,  386,  387,
      379,  737,  388,  737,  389,  737,  737,  737,  737,  737,

      737,  737,  380,  394,  737,  737,  737,  737,  381,  737,
      737,  379,  737,  737,  737,  382,  737,  383,  737,  737,
      737,  737,  384,  380,  385,  737,  386,  387,  737,  381,
      388,  737,  389,  737,  379,  737,  382,  737,  383,  737,
      737,  394,  737,  384,  737,  385,  380,  386,  387,  737,
      737,  388,  381,  389,  737,  737,  737,  737,  737,  382,
      737,  383,  395,  737,  737,  737,  384,  737,  385,  737,
      386,  387,  379,  737,  388,  737,  389,  737,  737,  737,
      737,  737,  737,  737,  380,  394,  737,  737,  737,  737,
      381,  737,  737,  379,  737,  737,  737,  382,  737,  383,

      737,  737,  737,  737,  384,  380,  385,  737,  386,  387,
      737,  381,  388,  737,  389,  737,  379,  737,  382,  737,
      383,  737,  737,  394,  737,  384,  737,  385,  380,  386,
      387,  737,  737,  388,  381,  389,  737,  737,  737,  737,
      737,  382,  737,  383,  394,  737,  737,  737,  384,  737,
      385,  737,  386,  387,  379,  737,  388,  737,  389,  737,
      737,  737,  737,  737,  737,  737,  380,  737,  737,  737,
      737,  737,  381,  737,  737,  379,  737,  737,  737,  382,
      737,  383,  737,  737,  737,  737,  384,  380,  385,  737,
      386,  387,  737,  381,  388,  737,  389,  737,  379,  737,

      382,  737,  383,  737,  737,  737,  737,  384,  737,  385,
      380,  386,  387,  737,  737,  388,  381,  389,  737,  379,
      399,  737,  737,  382,  737,  383,  737,  737,  396,  737,
      384,  380,  397,  737,  386,  387,  737,  381,  388,  737,
      389,  398,  737,  737,  382,  737,  383,  737,  737,  737,
      737,  384,  737,  385,  737,  386,  387,  737,  737,  388,
      737,  389,  379,  737,  737,  737,  737,  737,  737,  737,
      400,  737,  737,  737,  401,  402,  402,  402,  402,  402,
      403,  402,  402,  402,  737,  379,  737,  382,  737,  383,
      737,  737,  737,  737,  384,  737,  385,  380,  386,  387,

      737,  737,  388,  381,  389,  737,  737,  737,  379,  737,
      382,  737,  383,  737,  737,  737,  737,  384,  737,  385,
      380,  386,  387,  737,  407,  388,  381,  389,  737,  379,
      737,  737,  737,  382,  737,  383,  737,  737,  404,  737,
      384,  380,  385,  737,  386,  387,  737,  381,  388,  737,
      389,  737,  405,  407,  382,  379,  383,  406,  737,  737,
      737,  384,  737,  385,  737,  386,  387,  380,  737,  388,
      737,  389,  737,  381,  402,  737,  737,  737,  737,  737,
      382,  737,  383,  737,  379,  737,  737,  384,  737,  385,
      737,  386,  387,  737,  737,  388,  380,  389,  737,  737,

      391,  737,  381,  737,  737,  379,  737,  737,  737,  382,
      737,  383,  737,  737,  737,  737,  384,  380,  385,  737,
      386,  387,  737,  381,  388,  737,  389,  737,  737,  392,
      382,  393,  383,  737,  737,  737,  737,  384,  737,  385,
      737,  386,  387,  380,  737,  388,  737,  389,  737,  381,
      737,  737,  379,  737,  737,  737,  382,  737,  383,  737,
      737,  737,  737,  384,  380,  385,  737,  386,  387,  737,
      381,  388,  737,  389,  737,  379,  737,  382,  737,  383,
      737,  737,  737,  737,  384,  737,  385,  380,  386,  408,
      737,  737,  388,  381,  389,  737,  737,  737,  379,  737,

      382,  737,  383,  737,  737,  737,  737,  384,  737,  385,
      380,  386,  387,  737,  737,  388,  381,  389,  737,  379,
      737,  737,  737,  382,  737,  383,  737,  737,  737,  410,
      384,  380,  385,  737,  386,  387,  409,  381,  388,  737,
      389,  737,  737,  737,  382,  379,  383,  737,  737,  737,
      737,  384,  737,  385,  737,  386,  387,  380,  737,  388,
      737,  389,  737,  381,  737,  737,  737,  737,  737,  737,
      382,  379,  383,  737,  737,  737,  737,  384,  411,  385,
      737,  386,  387,  380,  737,  388,  737,  389,  737,  381,
      737,  737,  379,  737,  737,  412,  382,  737,  383,  737,

      737,  737,  414,  384,  380,  385,  737,  386,  387,  737,
      381,  388,  737,  389,  737,  379,  737,  382,  737,  383,
      737,  737,  737,  737,  384,  737,  385,  380,  386,  387,
      737,  413,  388,  381,  389,  737,  379,  737,  737,  737,
      382,  737,  383,  737,  737,  415,  737,  384,  380,  385,
      737,  386,  387,  737,  381,  388,  737,  389,  737,  379,
      737,  382,  737,  383,  737,  737,  391,  737,  384,  737,
      385,  380,  386,  387,  737,  737,  388,  381,  389,  737,
      737,  737,  417,  737,  382,  737,  383,  416,  737,  418,
      737,  384,  737,  385,  737,  386,  387,  379,  737,  388,

      737,  389,  737,  737,  737,  737,  737,  737,  737,  380,
      418,  737,  737,  737,  737,  381,  737,  737,  737,  737,
      379,  737,  382,  737,  383,  737,  737,  737,  737,  384,
      737,  385,  380,  386,  387,  737,  418,  388,  381,  389,
      737,  379,  737,  737,  737,  382,  737,  383,  737,  737,
      737,  737,  384,  380,  385,  737,  386,  419,  737,  381,
      388,  737,  389,  737,  737,  737,  382,  379,  383,  737,
      737,  737,  737,  384,  737,  385,  737,  386,  387,  380,
      421,  388,  737,  389,  737,  381,  737,  737,  420,  737,
      737,  737,  382,  737,  383,  737,  737,  737,  737,  384,

      380,  385,  737,  386,  387,  737,  381,  388,  737,  389,
      737,  379,  737,  382,  737,  383,  737,  737,  737,  737,
      384,  737,  385,  380,  386,  387,  737,  737,  388,  381,
      389,  737,  379,  737,  737,  737,  382,  737,  383,  737,
      737,  737,  737,  384,  380,  385,  737,  386,  387,  394,
      381,  388,  737,  389,  737,  737,  737,  382,  737,  383,
      737,  737,  737,  737,  384,  737,  385,  737,  386,  387,
      737,  378,  388,  439,  389,  423,  424,  424,  424,  424,
      424,  425,  424,  424,  424,  422,  737,  737,  378,  737,
      737,  737,  380,  378,  378,  378,  378,  378,  381,  378,

      378,  378,  446,  737,  737,  737,  447,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  449,  737,  737,  737,
      737,  737,  450,  737,  737,  737,  737,  737,  737,  451,
      737,  452,  737,  737,  737,  737,  453,  737,  454,  737,
      455,  456,  737,  737,  457,  470,  458,  447,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  471,  494,  737,
      737,  737,  737,  472,  737,  737,  483,  737,  737,  737,
      473,  737,  474,  737,  737,  737,  737,  475,  484,  476,
      737,  477,  478,  737,  485,  479,  737,  480,  737,  483,
      737,  486,  737,  487,  737,  737,  737,  737,  488,  495,

      489,  484,  490,  491,  737,  737,  492,  485,  493,  737,
      737,  737,  737,  737,  486,  737,  487,  737,  737,  737,
      498,  488,  737,  489,  737,  490,  491,  737,  496,  492,
      497,  493,  554,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  484,  498,  737,  737,  737,  737,  485,  737,
      737,  483,  737,  737,  737,  486,  737,  487,  737,  737,
      737,  737,  488,  484,  489,  737,  490,  491,  737,  485,
      492,  737,  493,  737,  483,  737,  486,  737,  487,  737,
      737,  498,  737,  488,  737,  489,  484,  490,  491,  737,
      737,  492,  485,  493,  737,  737,  737,  737,  737,  486,

      737,  487,  498,  737,  737,  737,  488,  737,  489,  737,
      490,  491,  483,  737,  492,  737,  493,  737,  737,  737,
      737,  737,  737,  737,  484,  498,  737,  737,  737,  737,
      485,  737,  737,  483,  737,  737,  737,  486,  737,  487,
      737,  737,  737,  737,  488,  484,  489,  737,  490,  491,
      737,  485,  492,  737,  493,  737,  483,  737,  486,  737,
      487,  737,  737,  498,  737,  488,  737,  489,  484,  490,
      491,  737,  737,  492,  485,  493,  737,  737,  737,  737,
      737,  486,  737,  487,  499,  737,  737,  737,  488,  737,
      489,  737,  490,  491,  483,  737,  492,  737,  493,  737,

      737,  737,  737,  737,  737,  737,  484,  498,  737,  737,
      737,  737,  485,  737,  737,  483,  737,  737,  737,  486,
      737,  487,  737,  737,  737,  737,  488,  484,  489,  737,
      490,  491,  737,  485,  492,  737,  493,  737,  483,  737,
      486,  737,  487,  737,  737,  498,  737,  488,  737,  489,
      484,  490,  491,  737,  737,  492,  485,  493,  737,  737,
      737,  737,  737,  486,  737,  487,  498,  737,  737,  737,
      488,  737,  489,  737,  490,  491,  483,  737,  492,  737,
      493,  737,  737,  737,  737,  737,  737,  737,  484,  737,
      737,  737,  737,  737,  485,  737,  737,  483,  737,  737,

      737,  486,  737,  487,  737,  737,  737,  737,  488,  484,
      489,  737,  490,  491,  737,  485,  492,  737,  493,  737,
      483,  737,  486,  737,  487,  737,  737,  737,  737,  488,
      737,  489,  484,  490,  491,  737,  737,  492,  485,  493,
      737,  483,  503,  737,  737,  486,  737,  487,  737,  737,
      500,  737,  488,  484,  501,  737,  490,  491,  737,  485,
      492,  737,  493,  502,  737,  737,  486,  737,  487,  737,
      737,  737,  737,  488,  737,  489,  737,  490,  491,  737,
      737,  492,  737,  493,  483,  737,  737,  737,  737,  737,
      737,  737,  504,  737,  737,  737,  505,  506,  506,  506,

      506,  506,  507,  506,  506,  506,  737,  483,  737,  486,
      737,  487,  737,  737,  737,  737,  488,  737,  489,  484,
      490,  491,  737,  737,  492,  485,  493,  737,  737,  737,
      483,  737,  486,  737,  487,  737,  737,  737,  737,  488,
      737,  489,  484,  490,  491,  737,  511,  492,  485,  493,
      737,  483,  737,  737,  737,  486,  737,  487,  737,  737,
      508,  737,  488,  484,  489,  737,  490,  491,  737,  485,
      492,  737,  493,  737,  509,  511,  486,  483,  487,  510,
      737,  737,  737,  488,  737,  489,  737,  490,  491,  484,
      737,  492,  737,  493,  737,  485,  506,  737,  737,  737,

      737,  737,  486,  737,  487,  737,  483,  737,  737,  488,
      737,  489,  737,  490,  491,  737,  737,  492,  484,  493,
      737,  737,  495,  737,  485,  737,  737,  483,  737,  737,
      737,  486,  737,  487,  737,  737,  737,  737,  488,  484,
      489,  737,  490,  491,  737,  485,  492,  737,  493,  737,
      737,  496,  486,  497,  487,  737,  737,  737,  737,  488,
      737,  489,  737,  490,  491,  484,  737,  492,  737,  493,
      737,  485,  737,  737,  483,  737,  737,  737,  486,  737,
      487,  737,  737,  737,  737,  488,  484,  489,  737,  490,
      491,  737,  485,  492,  737,  493,  737,  483,  737,  486,

      737,  487,  737,  737,  737,  737,  488,  737,  489,  484,
      490,  512,  737,  737,  492,  485,  493,  737,  737,  737,
      483,  737,  486,  737,  487,  737,  737,  737,  737,  488,
      737,  489,  484,  490,  491,  737,  737,  492,  485,  493,
      737,  483,  737,  737,  737,  486,  737,  487,  737,  737,
      737,  514,  488,  484,  489,  737,  490,  491,  513,  485,
      492,  737,  493,  737,  737,  737,  486,  483,  487,  737,
      737,  737,  737,  488,  737,  489,  737,  490,  491,  484,
      737,  492,  737,  493,  737,  485,  737,  737,  737,  737,
      737,  737,  486,  483,  487,  737,  737,  737,  737,  488,

      515,  489,  737,  490,  491,  484,  737,  492,  737,  493,
      737,  485,  737,  737,  483,  737,  737,  516,  486,  737,
      487,  737,  737,  737,  518,  488,  484,  489,  737,  490,
      491,  737,  485,  492,  737,  493,  737,  483,  737,  486,
      737,  487,  737,  737,  737,  737,  488,  737,  489,  484,
      490,  491,  737,  517,  492,  485,  493,  737,  483,  737,
      737,  737,  486,  737,  487,  737,  737,  519,  737,  488,
      484,  489,  737,  490,  491,  737,  485,  492,  737,  493,
      737,  483,  737,  486,  737,  487,  737,  737,  495,  737,
      488,  737,  489,  484,  490,  491,  737,  737,  492,  485,

      493,  737,  737,  737,  521,  737,  486,  737,  487,  520,
      737,  522,  737,  488,  737,  489,  737,  490,  491,  483,
      737,  492,  737,  493,  737,  737,  737,  737,  737,  737,
      737,  484,  522,  737,  737,  737,  737,  485,  737,  737,
      737,  737,  483,  737,  486,  737,  487,  737,  737,  737,
      737,  488,  737,  489,  484,  490,  491,  737,  522,  492,
      485,  493,  737,  483,  737,  737,  737,  486,  737,  487,
      737,  737,  737,  737,  488,  484,  489,  737,  490,  523,
      737,  485,  492,  737,  493,  737,  737,  737,  486,  483,
      487,  737,  737,  737,  737,  488,  737,  489,  737,  490,

      491,  484,  525,  492,  737,  493,  737,  485,  737,  737,
      524,  737,  737,  737,  486,  737,  487,  737,  737,  737,
      737,  488,  484,  489,  737,  490,  491,  737,  485,  492,
      737,  493,  737,  483,  737,  486,  737,  487,  737,  737,
      737,  737,  488,  737,  489,  484,  490,  491,  737,  737,
      492,  485,  493,  737,  483,  737,  737,  737,  486,  737,
      487,  737,  737,  737,  737,  488,  484,  489,  737,  490,
      491,  737,  485,  492,  737,  493,  737,  530,  737,  486,
      737,  487,  737,  737,  737,  737,  488,  737,  489,  531,
      490,  491,  737,  737,  492,  532,  493,  737,  737,  737,

      498,  737,  533,  737,  534,  737,  737,  526,  483,  535,
      737,  536,  737,  537,  538,  737,  737,  539,  737,  540,
      527,  528,  528,  528,  528,  528,  529,  528,  528,  528,
      737,  483,  737,  486,  737,  487,  737,  737,  522,  737,
      488,  737,  489,  484,  490,  491,  737,  737,  492,  485,
      493,  737,  737,  737,  737,  737,  486,  737,  487,  737,
      737,  737,  737,  488,  737,  489,  737,  490,  491,  483,
      737,  492,  737,  493,  737,  737,  737,  737,  737,  737,
      737,  484,  737,  737,  737,  737,  737,  485,  737,  737,
      737,  737,  737,  737,  486,  737,  487,  737,  737,  737,

      737,  488,  737,  489,  737,  490,  491,  737,  737,  492,
      504,  493,  483,  737,  557,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  541,  542,  542,  542,  542,  542,
      543,  542,  542,  542,  737,  483,  737,  486,  737,  487,
      737,  737,  737,  737,  488,  737,  489,  484,  490,  491,
      737,  737,  492,  485,  493,  737,  483,  737,  737,  737,
      486,  737,  487,  737,  737,  737,  737,  488,  484,  489,
      737,  490,  544,  737,  485,  492,  737,  493,  737,  483,
      737,  486,  737,  487,  737,  737,  737,  737,  488,  737,
      489,  484,  490,  491,  737,  737,  492,  485,  493,  737,

      483,  737,  737,  737,  486,  737,  487,  737,  737,  737,
      546,  488,  484,  489,  737,  490,  491,  545,  485,  492,
      737,  493,  737,  737,  737,  486,  483,  487,  737,  737,
      737,  737,  488,  737,  489,  737,  490,  491,  484,  737,
      492,  737,  493,  737,  485,  737,  737,  737,  737,  737,
      737,  486,  483,  487,  737,  737,  737,  737,  488,  547,
      489,  737,  490,  491,  484,  737,  492,  737,  493,  737,
      485,  737,  737,  483,  737,  737,  548,  486,  737,  487,
      737,  737,  737,  550,  488,  484,  489,  737,  490,  491,
      737,  485,  492,  737,  493,  737,  483,  737,  486,  737,

      487,  737,  737,  737,  737,  488,  737,  489,  484,  490,
      491,  737,  549,  492,  485,  493,  737,  483,  737,  737,
      737,  486,  737,  487,  737,  737,  551,  737,  488,  484,
      489,  737,  490,  491,  737,  485,  492,  737,  493,  737,
      483,  737,  486,  737,  487,  737,  737,  737,  737,  488,
      495,  489,  484,  490,  491,  737,  737,  492,  485,  493,
      737,  737,  737,  553,  737,  486,  737,  487,  552,  737,
      737,  495,  488,  737,  489,  737,  490,  491,  737,  496,
      492,  497,  493,  557,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  484,  737,  737,  737,  737,  737,  485,

      737,  737,  737,  737,  737,  737,  486,  737,  487,  737,
      737,  737,  737,  488,  484,  489,  737,  490,  491,  737,
      485,  492,  737,  493,  737,  560,  737,  486,  737,  487,
      737,  737,  737,  737,  488,  737,  489,  561,  490,  491,
      737,  737,  492,  562,  493,  737,  737,  737,  737,  737,
      563,  737,  564,  737,  737,  737,  737,  565,  737,  566,
      737,  567,  568,  737,  737,  569,  737,  570,  572,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  589,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  590,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  504,  584,

      737,  737,  589,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  601,  737,  737,  737,  602,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  608,  737,  592,  737,
      609,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      737,  737,  561,  737,  737,  737,  737,  737,  562,  737,
      737,  737,  737,  737,  737,  563,  737,  564,  737,  737,
      737,  737,  565,  737,  566,  737,  567,  568,  737,  737,
      569,  531,  570,  737,  737,  737,  737,  532,  737,  737,
      737,  737,  737,  737,  533,  737,  534,  737,  737,  737,
      737,  535,  737,  536,  737,  537,  538,  108,  108,  539,

      737,  540,  627,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  631,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  658,  108,  108,  737,  737,  737,  633,  659,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  737,
      634,  737,  737,  737,  737,  635,  636,  737,  737,  737,
      737,  737,  737,  637,  646,  638,  737,  737,  737,  737,
      639,  737,  640,  737,  641,  642,  647,  737,  643,  737,
      644,  635,  648,  737,  737,  737,  737,  737,  737,  649,
      737,  650,  737,  737,  737,  737,  651,  737,  652,  737,
      653,  654,  737,  601,  655,  737,  656,  627,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  658,  737,  685,
      737,  737,  737,  737,  672,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  608,  737,  737,  737,  631,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  701,  737,
      737,  737,  702,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  634,  691,  737,  737,  737,  737,  636,  737,
      737,  737,  737,  737,  737,  637,  737,  638,  737,  737,
      737,  737,  639,  737,  640,  737,  641,  642,  737,  708,
      643,  737,  644,  709,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  737,  737,  737,  647,  737,  737,  737,

      737,  737,  648,  737,  737,  737,  737,  737,  737,  649,
      737,  650,  737,  737,  737,  737,  651,  737,  652,  737,
      653,  654,  108,  108,  655,  737,  656,  729,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  733,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  737,  737,  737,
      701,  737,  737,  633,  729,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  737,  634,  737,  737,  737,  737,
      635,  636,  737,  737,  737,  737,  737,  737,  637,  737,
      638,  737,  737,  737,  737,  639,  737,  640,  737,  641,
      642,  737,  708,  643,  737,  644,  733,  734,  734,  734,

      734,  734,  734,  734,  734,  734,   29,  737,  737,  737,
       29,   31,  737,  737,   31,   34,  737,  737,  737,  737,
       34,   40,  737,   40,   40,   41,   41,   44,  737,  737,
       44,   44,   50,   50,   66,   66,   66,   66,   66,  737,
       66,   66,   66,   66,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,  197,  737,  197,  197,  197,  197,
      197,  197,  197,  197,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  206,  737,  206,  206,  206,  206,
      206,  206,  206,  206,  210,  737,  210,  210,  210,  210,

      210,  210,  210,  210,  225,  737,  225,  225,  225,  225,
      225,  225,  225,  225,  240,  737,  240,  240,  240,  240,
      240,  240,  240,  240,  259,  737,  259,  259,  259,  259,
      259,  259,  259,  259,  294,  737,  294,  294,  294,  294,
      294,  294,  294,  294,  335,  737,  335,  335,  335,  335,
      335,  335,  335,  335,  378,  737,  378,  378,  378,  378,
      378,  378,  378,  378,  426,  737,  426,  426,  426,  426,
      426,  426,  426,  426,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  696,  737,  696,  696,  696,  696,  696,
      696,  696,  696,    5,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737
    } ;

static yyconst short int yy_chk[5090] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   11,   28,   28,   12,   14,

       12,   11,   12,   16,   16,   16,   16,   29,   35,   11,
       36,   11,   37,   11,   29,   36,   70,   11,   35,   12,
       12,   14,   14,   37,  745,   14,   62,   62,   70,   74,
       74,   14,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   16,   16,   16,   16,   16,   16,   16,   33,   67,
       69,  101,   68,   38,   33,  101,   48,   68,   38,   67,
       68,   69,   33,   15,   33,   38,   33,   85,   15,   15,
       33,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   40,   48,   40,   48,   40,   73,
       76,   77,   73,   86,   95,  103,   85,   95,   85,   77,
       96,   96,  123,   76,   88,   40,   40,  103,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   99,  100,
      142,   90,  147,  137,   86,  149,   99,  137,  100,  201,
      142,  123,  733,  123,  201,  732,   86,   86,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  143,  107,  170,   86,  207,  182,   86,   86,  143,
      207,  170,   86,   86,   90,  190,   86,   86,   86,  174,
       90,  188,  147,  317,  190,  134,  174,   90,  188,   90,

      729,  198,  192,  107,   90,  320,   90,  182,   90,   90,
      198,  728,   90,  149,   90,  107,  107,  192,  313,  182,
      182,  177,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  324,  107,  313,  253,  107,  107,  134,  253,
      196,  107,  107,  397,  134,  107,  107,  107,  253,  408,
      725,  134,  177,  134,  724,  512,  662,  401,  134,  397,
      134,  317,  134,  134,  177,  177,  134,  722,  134,  196,
      205,  196,  252,  320,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  307,  177,  206,  662,  307,  404,
      177,  177,  721,  324,  177,  391,  177,  307,  206,  391,

      423,  252,  505,  252,  206,  501,  720,  719,  391,  508,
      408,  206,  718,  206,  717,  306,  512,  226,  206,  419,
      206,  501,  206,  206,  318,  401,  206,  225,  206,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  225,
      715,  714,  419,  227,  306,  225,  306,  527,  226,  541,
      319,  544,  225,  318,  225,  318,  713,  404,  390,  225,
      226,  225,  402,  225,  225,  403,  226,  225,  423,  225,
      505,  424,  227,  226,  227,  226,  228,  508,  711,  319,
      226,  319,  226,  709,  226,  226,  227,  390,  226,  390,
      226,  402,  227,  402,  403,  494,  403,  229,  425,  227,

      424,  227,  424,  611,  506,  495,  227,  228,  227,  495,
      227,  227,  544,  523,  227,  527,  227,  541,  495,  228,
      230,  507,  708,  707,  494,  228,  494,  425,  229,  425,
      528,  615,  228,  506,  228,  506,  523,  706,  705,  228,
      229,  228,  319,  228,  228,  704,  229,  228,  702,  228,
      507,  230,  507,  229,  701,  229,  700,  403,  231,  528,
      229,  528,  229,  230,  229,  229,  542,  529,  229,  230,
      229,  611,  699,  584,  543,  573,  230,  584,  230,  232,
      698,  697,  696,  230,  695,  230,  584,  230,  230,  231,
      425,  230,  692,  230,  690,  542,  529,  542,  529,  615,

      689,  231,  233,  543,  573,  543,  573,  231,  712,  686,
      232,  592,  603,  507,  231,  592,  231,  683,  682,  681,
      680,  231,  232,  231,  592,  231,  231,  716,  232,  231,
      679,  231,  678,  233,  677,  232,  676,  232,  675,  674,
      234,  603,  232,  603,  232,  233,  232,  232,  610,  628,
      232,  233,  232,  672,  671,  670,  632,  660,  233,  529,
      233,  235,  673,  669,  668,  233,  543,  233,  685,  233,
      233,  234,  685,  233,  667,  233,  712,  610,  628,  610,
      628,  685,  666,  234,  236,  632,  660,  632,  660,  234,
      665,  673,  235,  673,  664,  716,  234,  663,  234,  661,

      727,  727,  659,  234,  235,  234,  703,  234,  234,  656,
      235,  234,  691,  234,  710,  236,  691,  235,  655,  235,
      654,  653,  237,  652,  235,  691,  235,  236,  235,  235,
      730,  727,  235,  236,  235,  703,  651,  703,  734,  650,
      236,  649,  236,  710,  648,  710,  647,  236,  727,  236,
      644,  236,  236,  237,  643,  236,  642,  236,  641,  730,
      640,  730,  639,  638,  637,  237,  636,  734,  635,  734,
      634,  237,  631,  630,  627,  626,  623,  256,  237,  622,
      237,  620,  619,  618,  617,  237,  616,  237,  614,  237,
      237,  613,  612,  237,  609,  237,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  255,  608,  607,  606,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      256,  260,  605,  604,  602,  601,  256,  600,  599,  259,
      598,  597,  596,  256,  593,  256,  591,  590,  589,  588,
      256,  259,  256,  585,  256,  256,  583,  259,  256,  582,
      256,  581,  260,  580,  259,  579,  259,  578,  577,  576,
      575,  259,  261,  259,  260,  259,  259,  574,  572,  259,
      260,  259,  570,  569,  568,  567,  566,  260,  565,  260,
      564,  563,  562,  262,  260,  561,  260,  558,  260,  260,
      557,  261,  260,  261,  260,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  261,  263,  556,  555,  554,
      553,  261,  552,  551,  262,  550,  549,  548,  261,  547,
      261,  546,  545,  540,  539,  261,  262,  261,  538,  261,
      261,  537,  262,  261,  536,  261,  535,  263,  534,  262,
      533,  262,  532,  531,  264,  526,  262,  522,  262,  263,
      262,  262,  521,  520,  262,  263,  262,  519,  518,  517,
      516,  515,  263,  514,  263,  265,  513,  511,  510,  263,
      509,  263,  504,  263,  263,  264,  503,  263,  502,  263,
      500,  499,  496,  493,  492,  491,  490,  264,  266,  489,
      488,  487,  486,  264,  485,  484,  265,  482,  422,  418,

      264,  417,  264,  416,  415,  414,  413,  264,  265,  264,
      412,  264,  264,  411,  265,  264,  410,  264,  409,  266,
      407,  265,  406,  265,  405,  400,  267,  399,  265,  398,
      265,  266,  265,  265,  396,  395,  265,  266,  265,  392,
      389,  388,  387,  386,  266,  385,  266,  268,  384,  383,
      382,  266,  381,  266,  380,  266,  266,  267,  334,  266,
      333,  266,  332,  331,  330,  329,  328,  327,  326,  267,
      269,  325,  323,  322,  321,  267,  316,  315,  268,  314,
      312,  311,  267,  308,  267,  305,  304,  303,  302,  267,
      268,  267,  301,  267,  267,  300,  268,  267,  299,  267,

      298,  269,  297,  268,  296,  268,  293,  258,  270,  257,
      268,  254,  268,  269,  268,  268,  251,  250,  268,  269,
      268,  249,  248,  247,  246,  245,  269,  244,  269,  271,
      243,  242,  239,  269,  223,  269,  222,  269,  269,  270,
      221,  269,  220,  269,  219,  218,  217,  216,  215,  214,
      213,  270,  212,  209,  208,  204,  203,  270,  202,  200,
      271,  199,  195,  194,  270,  193,  270,  191,  189,  185,
      183,  270,  271,  270,  181,  270,  270,  180,  271,  270,
      179,  270,  178,  272,  176,  271,  172,  271,  168,  167,
      166,  165,  271,  164,  271,  272,  271,  271,  163,  162,

      271,  272,  271,  161,  273,  273,  160,  159,  272,  158,
      272,  157,  156,  272,  155,  272,  273,  272,  154,  272,
      272,  153,  273,  272,  152,  272,  272,  151,  150,  273,
      148,  273,  146,  144,  140,  136,  273,  135,  273,  133,
      273,  273,  132,  131,  273,  130,  273,  274,  129,  128,
      127,  126,  125,  124,  122,  274,  121,  120,  119,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  118,
      275,  117,  274,  116,  274,  115,  114,  113,  112,  274,
      111,  274,  275,  274,  274,  110,  109,  274,  275,  274,
      104,   98,   97,  276,   93,  275,   92,  275,   91,   87,

       84,   80,  275,   79,  275,  276,  275,  275,   78,  278,
      275,  276,  275,   75,  277,   71,   66,   61,  276,   60,
      276,   59,   58,  275,   57,  276,  277,  276,   56,  276,
      276,   55,  277,  276,   54,  276,   53,  276,  279,  277,
      278,  277,  277,   52,   51,   50,  277,   49,  277,   47,
      277,  277,  278,   46,  277,   45,  277,   44,  278,  280,
       43,   42,   41,   34,   31,  278,   27,  278,   26,  279,
       25,   24,  278,   23,  278,   22,  278,  278,   21,   20,
      278,  279,  278,   19,   18,  281,   17,  279,   10,    9,
      280,    8,    5,    0,  279,    0,  279,    0,    0,    0,

        0,  279,  280,  279,    0,  279,  279,    0,  280,  279,
        0,  279,    0,    0,  281,  280,  281,  280,    0,    0,
        0,    0,  280,    0,  280,    0,  280,  280,  281,    0,
      280,    0,  280,    0,  281,    0,    0,  282,    0,    0,
        0,  281,    0,  281,    0,    0,    0,    0,  281,  282,
      281,    0,  281,  281,    0,  282,  281,    0,  281,    0,
      283,    0,  282,    0,  282,    0,    0,    0,    0,  282,
        0,  282,  283,  282,  282,    0,    0,  282,  283,  282,
        0,    0,    0,  284,    0,  283,    0,  283,    0,    0,
        0,    0,  283,    0,  283,  284,  283,  283,    0,    0,

      283,  284,  283,    0,  285,    0,    0,    0,  284,    0,
      284,    0,    0,    0,  284,  284,  285,  284,    0,  284,
      284,  283,  285,  284,    0,  284,    0,    0,    0,  285,
      286,  285,    0,    0,    0,    0,  285,    0,  285,    0,
      285,  285,  286,    0,  285,    0,  285,    0,  286,    0,
        0,    0,    0,    0,    0,  286,  287,  286,    0,    0,
        0,    0,  286,  285,  286,    0,  286,  286,  287,    0,
      286,    0,  286,    0,  287,    0,    0,  288,    0,    0,
      286,  287,    0,  287,    0,    0,    0,  288,  287,  288,
      287,    0,  287,  287,    0,  288,  287,    0,  287,    0,

      289,    0,  288,    0,  288,    0,    0,    0,    0,  288,
        0,  288,  289,  288,  288,    0,  287,  288,  289,  288,
        0,  290,    0,    0,    0,  289,    0,  289,    0,    0,
      289,    0,  289,  290,  289,    0,  289,  289,    0,  290,
      289,    0,  289,    0,  291,    0,  290,    0,  290,    0,
        0,  292,    0,  290,    0,  290,  291,  290,  290,    0,
        0,  290,  291,  290,    0,    0,    0,  291,    0,  291,
        0,  291,  290,    0,    0,    0,  291,    0,  291,    0,
      291,  291,  292,    0,  291,    0,  291,    0,    0,    0,
        0,    0,  310,    0,  292,    0,    0,    0,    0,    0,

      292,    0,    0,    0,    0,    0,    0,  292,    0,  292,
        0,    0,    0,    0,  292,    0,  292,    0,  292,  292,
        0,  309,  292,    0,  292,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  310,  336,    0,    0,    0,
        0,  310,    0,    0,  335,    0,    0,    0,  310,    0,
      310,    0,    0,    0,    0,  310,  335,  310,    0,  310,
      310,    0,  335,  310,    0,  310,    0,  336,    0,  335,
        0,  335,    0,    0,    0,    0,  335,  337,  335,  336,
      335,  335,    0,    0,  335,  336,  335,    0,    0,    0,
        0,    0,  336,    0,  336,    0,    0,    0,  338,  336,

        0,  336,    0,  336,  336,    0,  337,  336,  337,  336,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      337,  339,    0,    0,    0,    0,  337,    0,    0,  338,
        0,    0,    0,  337,    0,  337,    0,    0,    0,    0,
      337,  338,  337,    0,  337,  337,    0,  338,  337,    0,
      337,    0,  339,    0,  338,    0,  338,    0,    0,  340,
        0,  338,    0,  338,  339,  338,  338,    0,    0,  338,
      339,  338,    0,    0,    0,    0,    0,  339,    0,  339,
      341,    0,    0,    0,  339,    0,  339,    0,  339,  339,
      340,    0,  339,    0,  339,    0,    0,    0,    0,    0,

        0,    0,  340,  342,    0,    0,    0,    0,  340,    0,
        0,  341,    0,    0,    0,  340,    0,  340,    0,    0,
        0,    0,  340,  341,  340,    0,  340,  340,    0,  341,
      340,    0,  340,    0,  342,    0,  341,    0,  341,    0,
        0,  343,    0,  341,    0,  341,  342,  341,  341,    0,
        0,  341,  342,  341,    0,    0,    0,    0,    0,  342,
        0,  342,  344,    0,    0,    0,  342,    0,  342,    0,
      342,  342,  343,    0,  342,    0,  342,    0,    0,    0,
        0,    0,    0,    0,  343,  345,    0,    0,    0,    0,
      343,    0,    0,  344,    0,    0,    0,  343,    0,  343,

        0,    0,    0,    0,  343,  344,  343,    0,  343,  343,
        0,  344,  343,    0,  343,    0,  345,    0,  344,    0,
      344,    0,    0,  346,    0,  344,    0,  344,  345,  344,
      344,    0,    0,  344,  345,  344,    0,    0,    0,    0,
        0,  345,    0,  345,  347,    0,    0,    0,  345,    0,
      345,    0,  345,  345,  346,    0,  345,    0,  345,    0,
        0,    0,    0,    0,    0,    0,  346,    0,    0,    0,
        0,    0,  346,    0,    0,  347,    0,    0,    0,  346,
        0,  346,    0,    0,    0,    0,  346,  347,  346,    0,
      346,  346,    0,  347,  346,    0,  346,    0,  348,    0,

      347,    0,  347,    0,    0,    0,    0,  347,    0,  347,
      348,  347,  347,    0,    0,  347,  348,  347,    0,  349,
      349,    0,    0,  348,    0,  348,    0,    0,  348,    0,
      348,  349,  348,    0,  348,  348,    0,  349,  348,    0,
      348,  348,    0,    0,  349,    0,  349,    0,    0,    0,
        0,  349,    0,  349,    0,  349,  349,    0,    0,  349,
        0,  349,  350,    0,    0,    0,    0,    0,    0,    0,
      350,    0,    0,    0,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,    0,  351,    0,  350,    0,  350,
        0,    0,    0,    0,  350,    0,  350,  351,  350,  350,

        0,    0,  350,  351,  350,    0,    0,    0,  352,    0,
      351,    0,  351,    0,    0,    0,    0,  351,    0,  351,
      352,  351,  351,    0,  354,  351,  352,  351,    0,  353,
        0,    0,    0,  352,    0,  352,    0,    0,  351,    0,
      352,  353,  352,    0,  352,  352,    0,  353,  352,    0,
      352,    0,  352,  355,  353,  354,  353,  353,    0,    0,
        0,  353,    0,  353,    0,  353,  353,  354,    0,  353,
        0,  353,    0,  354,  356,    0,    0,    0,    0,    0,
      354,    0,  354,    0,  355,    0,    0,  354,    0,  354,
        0,  354,  354,    0,    0,  354,  355,  354,    0,    0,

      357,    0,  355,    0,    0,  356,    0,    0,    0,  355,
        0,  355,    0,    0,    0,    0,  355,  356,  355,    0,
      355,  355,    0,  356,  355,    0,  355,    0,    0,  357,
      356,  357,  356,    0,    0,    0,    0,  356,    0,  356,
        0,  356,  356,  357,    0,  356,    0,  356,    0,  357,
        0,    0,  358,    0,    0,    0,  357,    0,  357,    0,
        0,    0,    0,  357,  358,  357,    0,  357,  357,    0,
      358,  357,    0,  357,    0,  359,    0,  358,    0,  358,
        0,    0,    0,    0,  358,    0,  358,  359,  358,  358,
        0,    0,  358,  359,  358,    0,    0,    0,  360,    0,

      359,    0,  359,    0,    0,    0,    0,  359,    0,  359,
      360,  359,  359,    0,    0,  359,  360,  359,    0,  361,
        0,    0,    0,  360,    0,  360,    0,    0,    0,  360,
      360,  361,  360,    0,  360,  360,  359,  361,  360,    0,
      360,    0,    0,    0,  361,  362,  361,    0,    0,    0,
        0,  361,    0,  361,    0,  361,  361,  362,    0,  361,
        0,  361,    0,  362,    0,    0,    0,    0,    0,    0,
      362,  363,  362,    0,    0,    0,    0,  362,  361,  362,
        0,  362,  362,  363,    0,  362,    0,  362,    0,  363,
        0,    0,  364,    0,    0,  362,  363,    0,  363,    0,

        0,    0,  364,  363,  364,  363,    0,  363,  363,    0,
      364,  363,    0,  363,    0,  365,    0,  364,    0,  364,
        0,    0,    0,    0,  364,    0,  364,  365,  364,  364,
        0,  363,  364,  365,  364,    0,  366,    0,    0,    0,
      365,    0,  365,    0,    0,  365,    0,  365,  366,  365,
        0,  365,  365,    0,  366,  365,    0,  365,    0,  367,
        0,  366,    0,  366,    0,    0,  368,    0,  366,    0,
      366,  367,  366,  366,    0,    0,  366,  367,  366,    0,
        0,    0,  367,    0,  367,    0,  367,  366,    0,  369,
        0,  367,    0,  367,    0,  367,  367,  368,    0,  367,

        0,  367,    0,    0,    0,    0,    0,    0,    0,  368,
      370,    0,    0,    0,    0,  368,    0,    0,    0,    0,
      369,    0,  368,    0,  368,    0,    0,    0,    0,  368,
        0,  368,  369,  368,  368,    0,  371,  368,  369,  368,
        0,  370,    0,    0,    0,  369,    0,  369,    0,    0,
        0,    0,  369,  370,  369,    0,  369,  369,    0,  370,
      369,    0,  369,    0,    0,    0,  370,  371,  370,    0,
        0,    0,    0,  370,    0,  370,    0,  370,  370,  371,
      373,  370,    0,  370,    0,  371,    0,    0,  372,    0,
        0,    0,  371,    0,  371,    0,    0,    0,    0,  371,

      372,  371,    0,  371,  371,    0,  372,  371,    0,  371,
        0,  373,    0,  372,    0,  372,    0,    0,    0,    0,
      372,    0,  372,  373,  372,  372,    0,    0,  372,  373,
      372,    0,  374,    0,    0,    0,  373,    0,  373,    0,
        0,    0,    0,  373,  374,  373,    0,  373,  373,  376,
      374,  373,    0,  373,    0,    0,    0,  374,    0,  374,
        0,    0,    0,    0,  374,    0,  374,    0,  374,  374,
        0,  375,  374,  394,  374,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  374,    0,    0,  376,    0,
        0,    0,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  393,    0,    0,    0,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  394,    0,    0,    0,
        0,    0,  394,    0,    0,    0,    0,    0,    0,  394,
        0,  394,    0,    0,    0,    0,  394,    0,  394,    0,
      394,  394,    0,    0,  394,  421,  394,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  421,  427,    0,
        0,    0,    0,  421,    0,    0,  426,    0,    0,    0,
      421,    0,  421,    0,    0,    0,    0,  421,  426,  421,
        0,  421,  421,    0,  426,  421,    0,  421,    0,  427,
        0,  426,    0,  426,    0,    0,    0,    0,  426,  428,

      426,  427,  426,  426,    0,    0,  426,  427,  426,    0,
        0,    0,    0,    0,  427,    0,  427,    0,    0,    0,
      429,  427,    0,  427,    0,  427,  427,    0,  428,  427,
      428,  427,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  428,  430,    0,    0,    0,    0,  428,    0,
        0,  429,    0,    0,    0,  428,    0,  428,    0,    0,
        0,    0,  428,  429,  428,    0,  428,  428,    0,  429,
      428,    0,  428,    0,  430,    0,  429,    0,  429,    0,
        0,  431,    0,  429,    0,  429,  430,  429,  429,    0,
        0,  429,  430,  429,    0,    0,    0,    0,    0,  430,

        0,  430,  432,    0,    0,    0,  430,    0,  430,    0,
      430,  430,  431,    0,  430,    0,  430,    0,    0,    0,
        0,    0,    0,    0,  431,  433,    0,    0,    0,    0,
      431,    0,    0,  432,    0,    0,    0,  431,    0,  431,
        0,    0,    0,    0,  431,  432,  431,    0,  431,  431,
        0,  432,  431,    0,  431,    0,  433,    0,  432,    0,
      432,    0,    0,  434,    0,  432,    0,  432,  433,  432,
      432,    0,    0,  432,  433,  432,    0,    0,    0,    0,
        0,  433,    0,  433,  435,    0,    0,    0,  433,    0,
      433,    0,  433,  433,  434,    0,  433,    0,  433,    0,

        0,    0,    0,    0,    0,    0,  434,  436,    0,    0,
        0,    0,  434,    0,    0,  435,    0,    0,    0,  434,
        0,  434,    0,    0,    0,    0,  434,  435,  434,    0,
      434,  434,    0,  435,  434,    0,  434,    0,  436,    0,
      435,    0,  435,    0,    0,  437,    0,  435,    0,  435,
      436,  435,  435,    0,    0,  435,  436,  435,    0,    0,
        0,    0,    0,  436,    0,  436,  438,    0,    0,    0,
      436,    0,  436,    0,  436,  436,  437,    0,  436,    0,
      436,    0,    0,    0,    0,    0,    0,    0,  437,    0,
        0,    0,    0,    0,  437,    0,    0,  438,    0,    0,

        0,  437,    0,  437,    0,    0,    0,    0,  437,  438,
      437,    0,  437,  437,    0,  438,  437,    0,  437,    0,
      439,    0,  438,    0,  438,    0,    0,    0,    0,  438,
        0,  438,  439,  438,  438,    0,    0,  438,  439,  438,
        0,  440,  440,    0,    0,  439,    0,  439,    0,    0,
      439,    0,  439,  440,  439,    0,  439,  439,    0,  440,
      439,    0,  439,  439,    0,    0,  440,    0,  440,    0,
        0,    0,    0,  440,    0,  440,    0,  440,  440,    0,
        0,  440,    0,  440,  441,    0,    0,    0,    0,    0,
        0,    0,  441,    0,    0,    0,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,    0,  442,    0,  441,
        0,  441,    0,    0,    0,    0,  441,    0,  441,  442,
      441,  441,    0,    0,  441,  442,  441,    0,    0,    0,
      443,    0,  442,    0,  442,    0,    0,    0,    0,  442,
        0,  442,  443,  442,  442,    0,  445,  442,  443,  442,
        0,  444,    0,    0,    0,  443,    0,  443,    0,    0,
      442,    0,  443,  444,  443,    0,  443,  443,    0,  444,
      443,    0,  443,    0,  443,  446,  444,  445,  444,  444,
        0,    0,    0,  444,    0,  444,    0,  444,  444,  445,
        0,  444,    0,  444,    0,  445,  447,    0,    0,    0,

        0,    0,  445,    0,  445,    0,  446,    0,    0,  445,
        0,  445,    0,  445,  445,    0,    0,  445,  446,  445,
        0,    0,  448,    0,  446,    0,    0,  447,    0,    0,
        0,  446,    0,  446,    0,    0,    0,    0,  446,  447,
      446,    0,  446,  446,    0,  447,  446,    0,  446,    0,
        0,  448,  447,  448,  447,    0,    0,    0,    0,  447,
        0,  447,    0,  447,  447,  448,    0,  447,    0,  447,
        0,  448,    0,    0,  449,    0,    0,    0,  448,    0,
      448,    0,    0,    0,    0,  448,  449,  448,    0,  448,
      448,    0,  449,  448,    0,  448,    0,  450,    0,  449,

        0,  449,    0,    0,    0,    0,  449,    0,  449,  450,
      449,  449,    0,    0,  449,  450,  449,    0,    0,    0,
      451,    0,  450,    0,  450,    0,    0,    0,    0,  450,
        0,  450,  451,  450,  450,    0,    0,  450,  451,  450,
        0,  452,    0,    0,    0,  451,    0,  451,    0,    0,
        0,  451,  451,  452,  451,    0,  451,  451,  450,  452,
      451,    0,  451,    0,    0,    0,  452,  453,  452,    0,
        0,    0,    0,  452,    0,  452,    0,  452,  452,  453,
        0,  452,    0,  452,    0,  453,    0,    0,    0,    0,
        0,    0,  453,  454,  453,    0,    0,    0,    0,  453,

      452,  453,    0,  453,  453,  454,    0,  453,    0,  453,
        0,  454,    0,    0,  455,    0,    0,  453,  454,    0,
      454,    0,    0,    0,  455,  454,  455,  454,    0,  454,
      454,    0,  455,  454,    0,  454,    0,  456,    0,  455,
        0,  455,    0,    0,    0,    0,  455,    0,  455,  456,
      455,  455,    0,  454,  455,  456,  455,    0,  457,    0,
        0,    0,  456,    0,  456,    0,    0,  456,    0,  456,
      457,  456,    0,  456,  456,    0,  457,  456,    0,  456,
        0,  458,    0,  457,    0,  457,    0,    0,  459,    0,
      457,    0,  457,  458,  457,  457,    0,    0,  457,  458,

      457,    0,    0,    0,  458,    0,  458,    0,  458,  457,
        0,  460,    0,  458,    0,  458,    0,  458,  458,  459,
        0,  458,    0,  458,    0,    0,    0,    0,    0,    0,
        0,  459,  461,    0,    0,    0,    0,  459,    0,    0,
        0,    0,  460,    0,  459,    0,  459,    0,    0,    0,
        0,  459,    0,  459,  460,  459,  459,    0,  462,  459,
      460,  459,    0,  461,    0,    0,    0,  460,    0,  460,
        0,    0,    0,    0,  460,  461,  460,    0,  460,  460,
        0,  461,  460,    0,  460,    0,    0,    0,  461,  462,
      461,    0,    0,    0,    0,  461,    0,  461,    0,  461,

      461,  462,  464,  461,    0,  461,    0,  462,    0,    0,
      463,    0,    0,    0,  462,    0,  462,    0,    0,    0,
        0,  462,  463,  462,    0,  462,  462,    0,  463,  462,
        0,  462,    0,  464,    0,  463,    0,  463,    0,    0,
        0,    0,  463,    0,  463,  464,  463,  463,    0,    0,
      463,  464,  463,    0,  465,    0,    0,    0,  464,    0,
      464,    0,    0,    0,    0,  464,  465,  464,    0,  464,
      464,    0,  465,  464,    0,  464,    0,  468,    0,  465,
        0,  465,    0,    0,    0,    0,  465,    0,  465,  468,
      465,  465,    0,    0,  465,  468,  465,    0,    0,    0,

      467,    0,  468,    0,  468,    0,    0,  465,  466,  468,
        0,  468,    0,  468,  468,    0,    0,  468,    0,  468,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
        0,  467,    0,  466,    0,  466,    0,    0,  469,    0,
      466,    0,  466,  467,  466,  466,    0,    0,  466,  467,
      466,    0,    0,    0,    0,    0,  467,    0,  467,    0,
        0,    0,    0,  467,    0,  467,    0,  467,  467,  469,
        0,  467,    0,  467,    0,    0,    0,    0,    0,    0,
        0,  469,    0,    0,    0,    0,    0,  469,    0,    0,
        0,    0,    0,    0,  469,    0,  469,    0,    0,    0,

        0,  469,    0,  469,    0,  469,  469,    0,    0,  469,
      497,  469,  470,    0,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,    0,  471,    0,  470,    0,  470,
        0,    0,    0,    0,  470,    0,  470,  471,  470,  470,
        0,    0,  470,  471,  470,    0,  472,    0,    0,    0,
      471,    0,  471,    0,    0,    0,    0,  471,  472,  471,
        0,  471,  471,    0,  472,  471,    0,  471,    0,  473,
        0,  472,    0,  472,    0,    0,    0,    0,  472,    0,
      472,  473,  472,  472,    0,    0,  472,  473,  472,    0,

      474,    0,    0,    0,  473,    0,  473,    0,    0,    0,
      473,  473,  474,  473,    0,  473,  473,  472,  474,  473,
        0,  473,    0,    0,    0,  474,  475,  474,    0,    0,
        0,    0,  474,    0,  474,    0,  474,  474,  475,    0,
      474,    0,  474,    0,  475,    0,    0,    0,    0,    0,
        0,  475,  476,  475,    0,    0,    0,    0,  475,  474,
      475,    0,  475,  475,  476,    0,  475,    0,  475,    0,
      476,    0,    0,  477,    0,    0,  475,  476,    0,  476,
        0,    0,    0,  477,  476,  477,  476,    0,  476,  476,
        0,  477,  476,    0,  476,    0,  478,    0,  477,    0,

      477,    0,    0,    0,    0,  477,    0,  477,  478,  477,
      477,    0,  476,  477,  478,  477,    0,  479,    0,    0,
        0,  478,    0,  478,    0,    0,  478,    0,  478,  479,
      478,    0,  478,  478,    0,  479,  478,    0,  478,    0,
      480,    0,  479,    0,  479,    0,    0,    0,    0,  479,
      481,  479,  480,  479,  479,    0,    0,  479,  480,  479,
        0,    0,    0,  480,    0,  480,    0,  480,  479,    0,
        0,  498,  480,    0,  480,    0,  480,  480,    0,  481,
      480,  481,  480,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  481,    0,    0,    0,    0,    0,  481,

        0,    0,    0,    0,    0,    0,  481,    0,  481,    0,
        0,    0,    0,  481,  498,  481,    0,  481,  481,    0,
      498,  481,    0,  481,    0,  525,    0,  498,    0,  498,
        0,    0,    0,    0,  498,    0,  498,  525,  498,  498,
        0,    0,  498,  525,  498,    0,    0,    0,    0,    0,
      525,    0,  525,    0,    0,    0,    0,  525,    0,  525,
        0,  525,  525,    0,    0,  525,    0,  525,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  571,  587,

        0,    0,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  586,    0,    0,    0,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  594,    0,  595,    0,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
        0,    0,  587,    0,    0,    0,    0,    0,  587,    0,
        0,    0,    0,    0,    0,  587,    0,  587,    0,    0,
        0,    0,  587,    0,  587,    0,  587,  587,    0,    0,
      587,  595,  587,    0,    0,    0,    0,  595,    0,    0,
        0,    0,    0,    0,  595,    0,  595,    0,    0,    0,
        0,  595,    0,  595,    0,  595,  595,  625,  625,  595,

        0,  595,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  633,  629,  629,    0,    0,    0,  625,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,    0,
      625,    0,    0,    0,    0,  625,  625,    0,    0,    0,
        0,    0,    0,  625,  629,  625,    0,    0,    0,    0,
      625,    0,  625,    0,  625,  625,  629,    0,  625,    0,
      625,  629,  629,    0,    0,    0,    0,    0,    0,  629,
        0,  629,    0,    0,    0,    0,  629,    0,  629,    0,
      629,  629,    0,  645,  629,    0,  629,  645,  645,  645,

      645,  645,  645,  645,  645,  645,  645,  646,    0,  688,
        0,    0,    0,    0,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  657,    0,    0,    0,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  687,    0,
        0,    0,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  688,  694,    0,    0,    0,    0,  688,    0,
        0,    0,    0,    0,    0,  688,    0,  688,    0,    0,
        0,    0,  688,    0,  688,    0,  688,  688,    0,  693,
      688,    0,  688,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,    0,    0,    0,  694,    0,    0,    0,

        0,    0,  694,    0,    0,    0,    0,    0,    0,  694,
        0,  694,    0,    0,    0,    0,  694,    0,  694,    0,
      694,  694,  731,  731,  694,    0,  694,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,    0,    0,    0,
      735,    0,    0,  731,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,    0,  731,    0,    0,    0,    0,
      731,  731,    0,    0,    0,    0,    0,    0,  731,    0,
      731,    0,    0,    0,    0,  731,    0,  731,    0,  731,
      731,    0,  736,  731,    0,  731,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  738,    0,    0,    0,
      738,  739,    0,    0,  739,  740,    0,    0,    0,    0,
      740,  741,    0,  741,  741,  742,  742,  743,    0,    0,
      743,  743,  744,  744,  746,  746,  746,  746,  746,    0,
      746,  746,  746,  746,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  749,    0,  749,  749,  749,  749,
      749,  749,  749,  749,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  751,    0,  751,  751,  751,  751,
      751,  751,  751,  751,  752,    0,  752,  752,  752,  752,

      752,  752,  752,  752,  753,    0,  753,  753,  753,  753,
      753,  753,  753,  753,  754,    0,  754,  754,  754,  754,
      754,  754,  754,  754,  755,    0,  755,  755,  755,  755,
      755,  755,  755,  755,  756,    0,  756,  756,  756,  756,
      756,  756,  756,  756,  757,    0,  757,  757,  757,  757,
      757,  757,  757,  757,  758,    0,  758,  758,  758,  758,
      758,  758,  758,  758,  759,    0,  759,  759,  759,  759,
      759,  759,  759,  759,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  761,    0,  761,  761,  761,  761,  761,
      761,  761,  761,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/ChineseCharParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "../src/ChineseCharParser.l"

/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.cs.cmu.edu/~lemur/license.html
 *
 *==========================================================================
*/


#include "ChineseCharParser.hpp"

#include <cstring>

#include <cctype>
#include <cstdlib>
#include <cstdio>

#include <iostream>
#include <fstream>

#define B_DOC 1
#define E_DOC 2
#define B_DOCHDR 12
#define E_DOCHDR 13
#define F_DOCNO 3
#define WORD 11
#define UPWORD 18
#define CONTRACTION 14
#define ACRONYM 15
#define ACRONYM2 17
#define UNKNOWN 16
#define B_TEXT 19
#define E_TEXT 20


extern FILE * ChineseCharin;
extern char * ChineseChartext;

long CCpos;

#define SKIP 1

#line 1804 "../src/ChineseCharParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 88 "../src/ChineseCharParser.l"


#line 1958 "../src/ChineseCharParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 738 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4994 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_DOC; /*1*/}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_DOC; /*2*/}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return F_DOCNO; /*3*/}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 93 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT; /*4*}
"</TEXT>"                           { CCpos += ChineseCharleng; return E_TEXT; /*5*}
"<HL>"                              { CCpos += ChineseCharleng; return B_TEXT;/*6*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*7*/}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 97 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*8*/}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 98 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*9*/}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 99 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*10*/}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*11*/}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*12*/ }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*13*/ }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT; /*14*/}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*15*/}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap tags */ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap other tags*/}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap symbols */ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap symbols */ }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap one chinese punctutions */ } 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return UPWORD; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return ACRONYM2; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return CONTRACTION;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return ACRONYM; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; /* chinese number or date */ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; /* single chinese char */ }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap newline */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return UNKNOWN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 120 "../src/ChineseCharParser.l"
ECHO;
	YY_BREAK
#line 2183 "../src/ChineseCharParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 738 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 738 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 737);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 120 "../src/ChineseCharParser.l"


#define OUTER 0
#define DOC 1
#define TEXT 9

ChineseCharParser::ChineseCharParser() {
  state = OUTER;
}

long ChineseCharParser::fileTell() {
  return CCpos;
}

void ChineseCharParser::parseFile(char * filename) {  
  CCpos = 0;
  ChineseCharin = fopen(filename, "r");
  doParse();
  fclose(ChineseCharin);
}

void ChineseCharParser::parseBuffer(char* buf, int len) {
  yy_scan_bytes(buf, len);
  doParse();
}


void ChineseCharParser::doParse() {
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering a tag
  // can transition the machine into another state.
  // When in the TEXT state, text is parsed.
  while (tok = ChineseCharlex()) {
      //      fprintf(stderr, "parsing tok %d %s\n", tok, ChineseChartext);
    switch (tok) {	
    case E_DOC:
      state = OUTER;
      break;
    
    case B_DOC:
      state = DOC;
      docpos = CCpos - ChineseCharleng;
      break;

    case F_DOCNO:
      {
        // Extract the document number and pass it on.
	char * dn = ChineseChartext + 7;
	while (isspace(*dn)) dn++;
	char * de = dn;
	while (!isspace(*de) && *de != '<') de++;
	*de = '\0';
	if (textHandler != NULL) textHandler->foundDoc(dn);

	state = TEXT;
	break;
      }

    case B_TEXT:
      state = TEXT;
      break;

    case E_TEXT:
      state = DOC;
      break;
         
    case WORD:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case CONTRACTION:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case UPWORD:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case ACRONYM:
      if (state == TEXT) {
	char * e = ChineseChartext;
	for (char * c = ChineseChartext; *c != '\0'; c++) {
	  if (*c != '.') *(e++) = *c;
	}
	*e = '\0';
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;
    
    case ACRONYM2:
      if (state == TEXT) {
        char * c;
	// strip suffix
	for (c = ChineseChartext; *c != '\'' && *c != '\0' && *c != 's'; c++);
        *c = '\0';
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);	
      }      
      break;
    }
  }
}

