#define yy_create_buffer InQuery_create_buffer
#define yy_delete_buffer InQuery_delete_buffer
#define yy_scan_buffer InQuery_scan_buffer
#define yy_scan_string InQuery_scan_string
#define yy_scan_bytes InQuery_scan_bytes
#define yy_flex_debug InQuery_flex_debug
#define yy_init_buffer InQuery_init_buffer
#define yy_flush_buffer InQuery_flush_buffer
#define yy_load_buffer_state InQuery_load_buffer_state
#define yy_switch_to_buffer InQuery_switch_to_buffer
#define yyin InQueryin
#define yyleng InQueryleng
#define yylex InQuerylex
#define yyout InQueryout
#define yyrestart InQueryrestart
#define yytext InQuerytext

#line 19 "../src/InQueryOpParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
static yyconst short int yy_accept[569] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   60,
       60,   60,   60,   60,   58,   55,   59,   59,   60,   59,
        4,    5,    4,    4,    1,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    6,    7,    0,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   31,   58,    0,    0,   58,   59,    0,    0,
       59,   59,    0,   59,   56,   59,   59,   59,   59,   59,
        4,    1,    2,    0,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    2,    4,    4,    4,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
        0,   58,   59,    0,   59,   59,   59,    0,   57,   56,
        0,   59,   59,   59,   59,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    2,    4,    4,    4,    4,    4,
        0,    8,    9,   10,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,   35,
        0,   36,   37,   38,   39,    0,    0,    0,    0,    0,
       46,   48,   47,   49,   52,    0,    0,    0,    0,   58,
       59,   59,   59,   59,   59,   59,    4,    1,    2,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,   11,    0,   12,   23,    0,   24,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   51,    0,    0,   53,   54,   58,   59,   59,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    0,    0,    0,
        0,   32,    0,    0,    0,   33,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    0,    0,    0,    0,   21,
       17,    0,    0,   22,   18,    0,    0,    0,    0,    0,
       44,    0,   45,   58,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,   13,   14,   25,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    0,    0,    0,
        0,   29,   30,   42,   43,    4,    4,    4,    4,    4,

        4,    4,    4,    0,    0,    0,    0,    4,    4,    4,
        4,    0,    0,    0,    0,    0,    0,    4,    4,    4,
        4,    4,    4,    0,    0,    0,    0,    0,    0,    4,
        4,    4,    4,    4,    4,    0,    0,    0,    0,    0,
        0,    4,    4,    4,    4,    4,    4,   19,    0,    0,
       20,    0,    0,    4,    4,    4,    4,    4,    4,   15,
       27,   16,   28,    4,    4,    4,    4,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    1,    1,    1,    7,
        8,    9,    1,   10,   11,   12,    1,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,   14,    1,
       15,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   26,   37,   38,   39,   26,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   26,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   26,   61,   62,
       63,   26,    1,    1,    1,    1,    1,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   64,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   64,   65,   65,   65,
       65,   65,   65,   65,   65
    } ;

static yyconst int yy_meta[67] =
    {   0,
        1,    2,    3,    2,    1,    4,    1,    1,    1,    5,
        6,    7,    8,    1,    1,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    1,   10,   11
    } ;

static yyconst short int yy_base[612] =
    {   0,
        0,   66,  132,  198,   14,   21,   31,   39, 1511, 2867,
     1467,  252,    0, 1496,   38, 2867,   41,   78,    0,  313,
       12,   55,   19,  371, 2867, 2867,  432,   23,  498,   37,
      564,  630,   92,  696, 2867, 2867, 1503, 1494,    8,   44,
       62,   99,  125,   67,   58,  132,  134,  100,  120,   60,
       67, 1453,   68,   53,   56,   65, 1464, 1450,  133,  121,
       57, 1445,    0, 1489, 1472, 1471,  114,    0, 1480, 1469,
     1469,  173,  156,  210, 1476,  128,  163,  155,  151,  232,
      187, 2867, 2867,  229, 2867,  234,  227,  248,  210,  322,
      326,  336,  250,  245,  329,  324,  441,  331,  239,  253,

      351,  402,  408,  412,  427,  356,  460,  444,  482,  457,
      463,  762,  361,  465,  828,  894,  960, 1026, 1092, 1158,
      470, 1224,  525,  472,  184,  207, 1290, 1356,  478,  531,
     1476, 1459, 1433,  221, 1423, 1440, 1446, 1414, 1420,  209,
     1438,    4, 1413, 1434, 1450, 1408, 1423, 1427, 1402, 1428,
     1402, 1447, 2867, 2867, 1425, 1425,  248, 1399, 1399,  471,
     1427, 1425, 1401, 1399, 1438, 1414, 1389, 1395, 1434,  329,
     1433,  383,    0, 1441, 1440, 1430,  342, 1429, 2867, 1436,
        0, 1422, 1486, 1550, 1614,  545,  547,  451,  552,  375,
      533,  517,  543,  511,  579,  549,  576,  590,  581,  583,

      600,  586,  610,  602,  615,  604,  606,  617,  625,  644,
      646,  658,  660,  664,  669,  653,  684,  667,  678,  649,
      707,  682,  720,  709, 1678, 1426, 1422, 1744,  680, 1810,
      668, 1876,  716, 2867, 2867,  744, 1942, 2008, 2074, 2140,
     1416, 2867, 2867, 2867, 1398, 1372, 1371, 1375, 1382, 1349,
     1356, 1383,  257, 1389, 1357,  636, 1362, 2867, 1367, 2867,
     1338, 2867, 2867, 2867, 2867, 1343, 1342,  254, 1289, 1294,
     2867, 2867, 2867, 2867, 1307, 1290, 1259, 1281,    0,  725,
     1279,  717,  721,  675,  737,  714,  751, 1286, 1272,  722,
      749,  776,  780,  786,  757,  782,  784,  790,  792,  813,

      796,  798,  824,  807,  800,  843,  804,  815,  810,  846,
      853,  855,  857,  859,  862,  864,  869,  866,  871,  877,
      879,  905,  907,  881,  912, 2206,  160,  832, 1260,    0,
      878, 1240,  859, 1212,  377,  407, 2867, 1207, 2867, 1166,
     1185, 1174, 1172, 1161, 1127, 1117, 1112, 1102, 1100, 1067,
     1105, 1076, 2867, 1050, 1017, 2867, 2867,  339, 1058, 2272,
      919,  923,  930,  921,  933,  937,  939,  943,  970,  974,
      949,  947,  956,  977,  979,  981,  985,  988,  991,  995,
      998, 1000, 1002, 1004, 1007, 2336, 2402, 1035, 1003, 1013,
      977, 2867,  462,  990,  996, 2867,  131,  956,  950,  955,

      904,  917,  916,  885,  876,  903, 1013, 1040, 1038, 1042,
     1044, 1046, 1048, 1052, 1054, 1061, 1056, 1065, 1072, 1069,
     1101, 1107, 1075, 1079, 1112,  876,  839,  843,  817, 2867,
     2867,  818,  826, 2867, 2867,  804,  772,  779,  726,  755,
     2867,  721, 2867,  748, 1081, 1077, 1121, 1123, 1126, 1130,
     1134, 1132, 1136, 1138, 1140, 1142, 1145, 1147, 1169, 1171,
     1174, 1176, 1180, 2867, 2867, 2867, 2867,  708,  707,  420,
      615,  626,  596,  633,  613, 1183, 1189, 1192, 1195, 1207,
     1198, 1210, 1201, 1213, 1203, 1238, 1240,  600,  585,  558,
      546, 2867, 2867,  567,  554, 1242, 1247, 1258, 1205, 1219,

     1250, 1261, 1263,  560,  525,  466,  498, 1253, 1272, 1265,
     1274,  514,  490,  473,  455,  432,  416, 1299, 1276, 1302,
     1279, 1315, 1306,  437,  426,  386,  368,  312,  286, 1309,
     1318, 1325, 1329, 1331, 1333,  300,  234,  226,  165,  164,
      104, 1338, 1341, 1343, 1336, 1321, 1345, 2867,  108,   79,
     2867,   58,   24, 1374, 1377, 1379, 1381, 1393, 1383, 2867,
     2867, 2867, 2867, 1386, 1391, 1396, 1398, 2867, 2468, 2479,
     2485, 2490, 2495, 2505, 2515, 2525, 2536, 2547, 2558, 2569,
     2580, 2584, 2587, 2595, 2598, 2602, 2612, 2623, 2634, 2645,
     2656, 2667, 2678, 2689, 2694, 2704, 2714, 2724, 2734, 2744,

     2754, 2765, 2776, 2787, 2798, 2809, 2820, 2824, 2834, 2845,
     2855
    } ;

static yyconst short int yy_def[612] =
    {   0,
      569,  569,  570,  570,    2,    2,    2,    2,  568,  568,
      568,  568,  571,  568,  572,  568,  573,  573,  574,  575,
      576,  568,  576,  576,  568,  568,  577,  576,  578,  576,
      579,  579,  580,  581,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  571,  568,  568,  582,  572,  583,  584,  585,
      586,  573,  568,  586,  587,  568,  584,  585,  586,  573,
      576,  568,  568,  568,  568,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  577,  576,  576,  588,  578,  589,  590,  591,  592,
       32,  592,  593,  576,  568,  568,  590,  591,  122,   32,
      594,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  582,
      582,  572,  583,  584,  584,  595,  585,  595,  568,  587,
      596,  597,  598,  599,  600,  601,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  588,  225,  116,  589,  127,  602,
      128,  602,  576,  568,  568,  603,  604,  605,  606,  607,
      594,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  608,  572,
      585,  584,  585,  595,  585,  595,  601,  594,  594,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  609,  116,  128,  127,  128,
      232,  128,  232,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  608,  610,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  609,  611,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  568,  568,  568,
      568,  568,  568,  568,  568,  576,  576,  576,  576,  576,

      576,  576,  576,  568,  568,  568,  568,  576,  576,  576,
      576,  568,  568,  568,  568,  568,  568,  576,  576,  576,
      576,  576,  576,  568,  568,  568,  568,  568,  568,  576,
      576,  576,  576,  576,  576,  568,  568,  568,  568,  568,
      568,  576,  576,  576,  576,  576,  576,  568,  568,  568,
      568,  568,  568,  576,  576,  576,  576,  576,  576,  568,
      568,  568,  568,  576,  576,  576,  576,    0,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568
    } ;

static yyconst short int yy_nxt[2934] =
    {   0,
       10,   10,   10,   10,   11,   12,   10,   10,   13,   10,
       10,   14,   15,   16,   10,   22,   22,   22,   82,   83,
       35,   26,   22,   22,   22,   82,   83,   35,   26,   82,
       83,   18,   22,   22,   22,  113,  132,   36,   26,   10,
       22,   22,   22,   82,   83,   36,   26,   65,  255,   66,
       67,   69,   70,   71,  256,   18,   84,   84,   84,  134,
      133,   86,   85,   19,   20,   10,   10,   10,   10,   10,
       11,   12,   10,   10,   13,   10,   10,   14,   15,   16,
       10,   73,  148,  168,  135,  136,  563,  150,   69,   70,
       74,  137,   75,   76,   76,   76,  165,   18,  125,  126,

      166,  138,  562,   73,  142,   10,  139,  149,  135,  143,
      138,  151,  160,  146,   75,  139,  163,  561,  147,  164,
      165,   18,  140,   65,  167,   66,  172,  560,  141,   19,
       20,   10,   21,   22,   22,   22,   23,   24,   25,   26,
       27,   21,   21,   28,   29,   30,   21,  142,  144,  155,
      152,  152,  143,  157,  145,  161,  156,   81,  162,   73,
      553,  158,  178,   32,  153,  174,  157,  176,  159,   81,
       75,   21,  327,  146,  158,  152,  152,  157,  147,  163,
      434,  159,  164,   69,   70,   71,  435,   32,  154,  154,
      157,  181,  181,   82,   83,   33,   34,   21,   21,   22,

       22,   22,   23,   24,   25,   26,   27,   21,   21,   28,
       29,   30,   21,   73,  181,  184,   82,   83,  181,  183,
      552,  178,   74,  551,   75,  189,  181,  182,  252,   32,
       84,   84,   84,   82,   83,  253,   85,   21,  186,   87,
       82,   83,   69,   70,   71,   82,   83,  181,  181,  245,
      190,   82,   83,   32,   82,   83,   82,   83,  550,   82,
       83,   33,   34,   21,   38,  203,  549,   39,   40,   41,
      181,  181,   42,  246,  205,  220,  187,  268,   43,   44,
       45,   46,   47,   48,  353,   49,  221,   50,   51,  342,
      204,  343,   52,   53,   54,  181,  185,   55,  206,  220,

      188,  268,   56,   57,   58,   59,   60,   48,  353,   61,
      222,   50,   62,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   76,   76,   82,   83,
       82,   83,   82,   83,  548,   82,   83,   82,   83,  210,
      279,  170,   82,   83,  541,  191,  211,  207,   65,  195,
      406,  192,   76,  281,  176,  196,  212,   82,   83,  199,
      540,  208,   82,   83,  213,  200,  216,   82,   83,  217,
      193,  214,  207,  113,  197,  194,   76,   82,   83,  198,
      212,   82,   83,   87,  201,  209,   88,   89,   90,  202,
      218,   91,   65,  219,   66,  280,  204,   92,   93,   94,

       95,   96,   97,  188,   98,  389,   99,  100,   82,   83,
      539,  101,  102,  103,   82,   83,  104,  223,   82,   83,
      538,  105,  106,  107,  108,  109,   97,  294,  110,  389,
       99,  111,   81,   82,   83,  389,   81,   81,   82,   83,
       81,   81,  190,   81,   73,   81,   81,   82,   83,  537,
       82,   83,  490,  215,  536,  123,  193,   82,   83,  389,
      197,  194,  207,   82,   83,  198,   82,   83,  529,   82,
       83,   82,   83,  568,   73,  201,  490,  224,   82,   83,
      202,  568,  120,  160,   81,   75,  430,  207,   82,   83,
      120,  528,   81,  431,  291,   81,   81,   81,   81,  527,

      209,  526,   81,   81,   82,   83,   81,  114,   81,  115,
      116,   81,   81,  206,  212,  515,  218,   82,   83,  219,
      222,  516,  213,   82,   83,  525,  179,  179,  180,  214,
       81,  234,  235,  524,  568,  236,  236,   81,  212,   82,
       83,  236,  239,  120,  296,   81,  241,  242,  241,   82,
       83,  288,  289,   82,   83,   82,   83,  517,   82,   83,
      514,   81,  298,   81,   81,  290,  495,  295,   81,   81,
       82,   83,   81,   81,  118,  119,  120,   81,   81,  494,
      292,  301,   82,   83,  512,   82,   83,   82,   83,   82,
       83,  513,   82,   83,  236,  240,   82,   83,  299,  507,

      306,  297,  506,   81,  293,  300,   82,   83,   82,   83,
       82,   83,   82,   83,  505,  305,   82,   83,   87,  504,
      302,   82,   83,   82,   83,  495,  303,   81,  308,   81,
       81,   82,   83,   73,   81,   81,   82,   83,   81,   81,
      118,  119,  122,   81,  123,  494,  304,  309,  493,  311,
       82,   83,   82,   83,  492,   82,   83,  491,  307,   82,
       83,  322,  312,  310,   82,   83,   82,   83,  346,   81,
       82,   83,   73,   82,   83,   82,   83,  313,  314,  328,
      318,  215,  568,  123,   82,   83,  178,  315,   82,   83,
       82,   83,  346,   81,  347,   81,  124,   76,   76,   76,

      124,  124,  125,  126,  124,  124,  127,  128,  129,  124,
      124,  315,  319,   82,   83,   82,   83,  316,  320,  568,
      317,  325,   82,   83,  489,  568,   82,   83,   82,   83,
      321,   81,  231,  176,  568,  124,   66,  280,  181,  360,
      488,  324,  323,   81,  229,   76,   76,   76,  281,  176,
      125,  126,  241,  242,  241,   82,   83,  288,  289,  124,
      444,   81,   81,   82,   83,  475,   81,   81,   82,   83,
       81,   81,  293,   81,  474,   81,   81,  181,  360,  473,
      181,  182,   82,   83,  181,  183,   82,   83,   82,   83,
       82,   83,   82,   83,  361,  364,   82,   83,   82,   83,

      181,  183,   82,   83,   82,   83,   82,   83,  472,   81,
       82,   83,  365,   82,   83,  371,   82,   83,  368,   82,
       83,   82,   83,  362,  471,   81,   81,   81,   81,  363,
       82,   83,   81,   81,   82,   83,   81,   81,   81,   81,
      225,   81,   81,  470,  367,  369,  366,  370,  372,   82,
       83,  375,   82,   83,  469,  377,  373,  468,  376,   82,
       83,   82,   83,   82,   83,   82,   83,   81,   82,   83,
       82,   83,   82,   83,  379,   82,   83,   82,   83,  467,
      373,  466,  374,   82,   83,   82,   83,   82,   83,  232,
      378,   81,  380,   81,   81,   81,  231,  465,   81,   81,

       82,   83,   81,  114,   81,  115,  227,   81,   81,  382,
      464,   82,   83,   82,   83,  444,  380,  322,   82,   83,
      443,  381,  236,  387,  385,   82,   83,   82,   83,   82,
       83,  442,  384,   81,  383,  441,   82,   83,  440,   82,
       83,  236,  387,   82,   83,   82,   83,  407,  409,   82,
       83,  408,  439,   82,   83,   82,   83,   81,  408,   81,
       81,  411,   82,   83,   81,   81,   82,   83,   81,   81,
       81,   81,  414,   81,   81,  408,   82,   83,  438,  410,
       82,   83,  408,   82,   83,   82,   83,   82,   83,  412,
      415,   82,   83,  413,   82,   83,  437,   82,   83,   81,

      416,   82,   83,  421,   82,   83,   82,   83,   82,   83,
       82,   83,  436,   82,   83,  419,  114,  433,  425,   82,
       83,  417,  432,   81,  422,   81,   81,  418,  174,  429,
       81,   81,   82,   83,   81,   81,   81,   81,  423,   81,
       81,  428,  445,  420,   82,   83,   82,   83,   82,   83,
       82,   83,   82,   83,   82,   83,  427,  424,   82,   83,
       82,   83,   82,   83,  426,   81,  447,   82,   83,  279,
      449,   82,   83,  452,  405,   82,   83,  450,   82,   83,
      451,   82,   83,   82,   83,   82,   83,   82,   83,   81,
      404,   81,   81,  446,  448,  457,   81,   81,   82,   83,

       81,   81,   81,   81,  230,   81,   81,   82,   83,  403,
      453,  456,  455,   82,   83,  476,  454,  458,   82,   83,
      402,  461,  459,  462,  463,  401,  460,   82,   83,   82,
       83,   81,   82,   83,  400,  477,   82,   83,   82,   83,
       82,   83,   82,   83,   82,   83,   82,   83,   82,   83,
      399,   82,   83,   82,   83,   81,  398,   81,   81,  478,
      481,  397,   81,   81,   82,   83,   81,   81,   81,  232,
      396,   81,   81,  480,  484,   82,   83,   82,   83,  482,
       82,   83,   82,   83,  395,  479,   82,   83,  486,   82,
       83,  394,  463,  393,  483,   82,   83,   81,   82,   83,

      485,   82,   83,  392,   82,   83,  391,   82,   83,   82,
       83,   82,   83,   82,   83,  497,   82,   83,  487,   82,
       83,   81,  390,   81,   81,   82,   83,   73,   81,   81,
       82,   83,   81,   81,   81,  232,  122,   81,  123,  496,
      388,  500,  498,  499,   82,   83,   82,   83,   82,   83,
      502,  328,  503,   82,   83,  501,   82,   83,  511,   82,
       83,  508,  568,   81,   82,   83,  498,   82,   83,   82,
       83,   82,   83,  502,  242,  503,  509,  518,   82,   83,
       82,   83,   82,   83,  519,   82,   83,   81,  242,   81,
       81,  176,  174,  358,   81,   81,   82,   83,   81,   81,

       81,   81,  510,   81,   81,   82,   83,  520,   82,   83,
      357,  531,   82,   83,  521,   82,   83,  356,  530,  275,
      522,   82,   83,  533,   82,   83,  542,   82,   83,   81,
      532,   82,   83,  523,  355,   82,   83,   82,   83,   82,
       83,  543,   82,   83,   82,   83,  354,   82,   83,   82,
       83,   82,   83,  236,  237,   81,   81,  352,  535,  544,
       81,   81,   82,   83,   81,   81,   81,   81,  230,   81,
       81,  545,  554,  555,  534,  556,  351,  558,  350,  546,
       82,   83,  349,   82,   83,   82,   83,   82,   83,   82,
       83,  547,   82,   83,  557,   81,  564,   82,   83,   82,

       83,  559,   82,   83,   82,   83,  348,  345,  344,  341,
      340,  339,  338,  337,  336,  335,  334,  565,  242,  236,
      238,   81,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  327,   76,   76,  566,  226,  180,
      568,  178,  568,  568,  279,  567,  278,  246,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  267,  266,   38,
      265,   76,  264,  263,  262,  261,  260,  259,  258,  257,
      254,  251,  250,  249,  248,  247,  244,  243,  242,  180,
      178,  176,  174,  170,  169,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  283,  284,   76,

       76,   64,  167,  151,  149,  133,   38,  131,   64,   37,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,   76,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  286,  568,   76,   76,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,   76,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   77,   78,   79,   76,   76,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,   76,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,   76,   81,  568,
      568,  568,   81,   81,   82,   83,   81,   81,   81,  326,
      225,   81,   81,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,   81,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,   81,  568,   81,   81,  568,  568,  568,   81,   81,
       82,   83,   81,   81,   81,   81,  568,   81,   81,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,   81,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,   81,  568,   81,
       81,  568,  568,  568,   81,   81,   82,   83,   81,   81,
       81,  232,  568,   81,   81,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,   81,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,   81,  568,   81,   81,  568,  568,  568,
       81,   81,   82,   83,   81,   81,   81,   81,  568,   81,
       81,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,   81,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,   81,
      568,   81,  124,   76,   76,   76,  124,  124,  125,  126,
      124,  124,  124,  124,  568,  124,  124,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  124,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  124,  568,   81,  124,   76,
       76,   76,  124,  124,  125,  126,  124,  124,  124,  330,
      331,  124,  124,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  124,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  124,  568,   81,  124,   76,   76,   76,  124,  124,
      125,  126,  124,  124,  124,  333,  568,  124,  124,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  124,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  124,  568,   81,
      124,   76,   76,   76,  124,  124,  125,  126,  124,  124,
      127,  128,  129,  124,  124,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  124,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  124,  568,   81,   81,  568,  568,  568,
       81,   81,   82,   83,   81,   81,   81,   81,  568,   81,
       81,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,   81,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,   81,
      568,   81,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  286,  568,   76,   76,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,   76,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,   76,   81,  568,  568,  568,
       81,   81,   82,   83,   81,   81,   81,  326,  568,   81,
       81,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,   81,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,   81,

      568,   81,  124,   76,   76,   76,  124,  124,  125,  126,
      124,  124,  124,  333,  568,  124,  124,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  124,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  124,  568,   81,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       63,  568,   63,   63,   68,  568,   68,   68,  568,   68,

       72,   72,   72,  568,   72,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   81,  568,  568,   81,   81,
       81,   81,   81,   81,   81,   81,  112,  568,  568,  112,
      112,  112,  112,  112,  112,  112,  112,  117,  568,  568,
      117,  117,  117,  117,  117,  117,  117,  117,  121,  568,
      568,  121,  121,  121,  121,  121,  121,  121,  121,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  171,  568,  171,  173,  568,  173,  175,  568,  568,

      568,  568,  175,  568,  175,  177,  568,  177,   71,   71,
      568,   71,  179,  179,  179,  568,  179,  179,  179,  179,
      179,  179,  179,  226,  568,  568,  226,  226,  226,  226,
      226,  226,  226,  226,  228,  568,  568,  228,  228,  228,
      228,  228,  228,  228,  228,  229,  568,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  231,  568,  568,  231,
      231,  231,  231,  231,  231,  231,  231,  120,  568,  568,
      120,  120,  120,  120,  120,  120,  120,  120,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      176,  176,  568,  176,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  230,  568,  568,  230,  230,
      230,  230,  230,  230,  230,  230,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  359,  568,  359,  386,  568,  568,  386,  386,  386,
      386,  386,  386,  386,  386,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,    9,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568
    } ;

static yyconst short int yy_chk[2934] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,   21,   21,
        5,    5,    6,    6,    6,   23,   23,    6,    6,   28,
       28,    1,    7,    7,    7,   28,   39,    7,    7,    1,
        8,    8,    8,   30,   30,    8,    8,   15,  142,   15,
       15,   17,   17,   17,  142,    1,   22,   22,   22,   40,
       39,   23,   22,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   18,   44,   53,   40,   41,  553,   45,   18,   18,
       18,   41,   18,   33,   33,   33,   50,    2,   33,   33,

       51,   54,  552,   48,   55,    2,   54,   44,   53,   55,
       41,   45,   48,   56,   48,   41,   61,  550,   56,   61,
       50,    2,   42,   67,   51,   67,   67,  549,   42,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   42,   43,   47,
       46,   59,   42,   60,   43,   49,   47,   33,   49,   73,
      541,   60,   79,    3,   46,   77,   47,   78,   60,  327,
       73,    3,  327,   43,   47,   46,   59,   60,   43,   49,
      397,   47,   49,   72,   72,   72,  397,    3,   46,   59,
       47,   76,   76,   81,   81,    3,    3,    3,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,   74,   79,   79,   89,   89,   78,   78,
      540,   74,   74,  539,   74,   89,   77,   77,  140,    4,
       84,   84,   84,   87,   87,  140,   84,    4,   86,   87,
       86,   86,   80,   80,   80,   99,   99,  125,  125,  134,
       89,   94,   94,    4,   88,   88,   93,   93,  538,  100,
      100,    4,    4,    4,   12,   93,  537,   12,   12,   12,
      126,  126,   12,  134,   94,   99,   88,  157,   12,   12,
       12,   12,   12,   12,  268,   12,  100,   12,   12,  253,
       93,  253,   12,   12,   12,   80,   80,   12,   94,   99,

       88,  157,   12,   12,   12,   12,   12,   12,  268,   12,
      100,   12,   12,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   90,   90,
       96,   96,   91,   91,  536,   95,   95,   98,   98,   96,
      170,  170,   92,   92,  529,   90,   96,   95,  358,   91,
      358,   90,   20,  177,  177,   91,   96,  101,  101,   92,
      528,   95,  106,  106,   96,   92,   98,  113,  113,   98,
       90,   96,   95,  113,   91,   90,   20,   24,   24,   91,
       96,  190,  190,   24,   92,   95,   24,   24,   24,   92,
       98,   24,  172,   98,  172,  172,  106,   24,   24,   24,

       24,   24,   24,  101,   24,  335,   24,   24,  102,  102,
      527,   24,   24,   24,  103,  103,   24,  102,  104,  104,
      526,   24,   24,   24,   24,   24,   24,  190,   24,  335,
       24,   24,   27,  105,  105,  336,   27,   27,   27,   27,
       27,   27,  102,   27,   97,   27,   27,   97,   97,  525,
      108,  108,  470,   97,  524,   97,  103,  188,  188,  336,
      104,  103,  108,  110,  110,  104,  107,  107,  517,  111,
      111,  114,  114,  121,  160,  105,  470,  114,  124,  124,
      105,  129,  121,  160,  121,  160,  393,  108,  109,  109,
      129,  516,  129,  393,  188,   27,   27,   27,   29,  515,

      108,  514,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  107,  109,  506,  110,  194,  194,  110,
      111,  506,  109,  192,  192,  513,  123,  123,  123,  109,
      123,  123,  123,  512,  130,  124,  124,   29,  109,  191,
      191,  129,  129,  130,  192,  130,  186,  186,  186,  193,
      193,  186,  186,  187,  187,  196,  196,  507,  189,  189,
      505,   29,  194,   29,   31,  187,  495,  191,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  494,
      189,  196,  197,  197,  504,  195,  195,  199,  199,  200,
      200,  504,  202,  202,  130,  130,  198,  198,  195,  491,

      200,  193,  490,   31,  189,  195,  201,  201,  204,  204,
      206,  206,  207,  207,  489,  199,  203,  203,  207,  488,
      197,  205,  205,  208,  208,  475,  197,   31,  202,   31,
       32,  209,  209,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,  474,  198,  203,  473,  205,
      210,  210,  211,  211,  472,  220,  220,  471,  201,  216,
      216,  220,  206,  204,  212,  212,  213,  213,  256,   32,
      214,  214,  215,  218,  218,  215,  215,  210,  211,  231,
      216,  215,  229,  215,  219,  219,  284,  212,  222,  222,
      217,  217,  256,   32,  256,   32,   34,   34,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  212,  217,  221,  221,  224,  224,  213,  218,  282,
      214,  224,  233,  233,  469,  286,  223,  223,  290,  290,
      219,  231,  231,  283,  280,   34,  280,  280,  284,  284,
      468,  222,  221,  229,  229,  236,  236,  236,  285,  285,
      236,  236,  287,  287,  287,  291,  291,  287,  287,   34,
      444,   34,  112,  295,  295,  442,  112,  112,  112,  112,
      112,  112,  223,  112,  440,  112,  112,  286,  286,  439,
      282,  282,  292,  292,  283,  283,  293,  293,  296,  296,
      297,  297,  294,  294,  292,  295,  298,  298,  299,  299,

      285,  285,  301,  301,  302,  302,  305,  305,  438,  236,
      307,  307,  296,  304,  304,  301,  309,  309,  299,  300,
      300,  308,  308,  293,  437,  112,  112,  112,  115,  294,
      303,  303,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  436,  298,  300,  297,  300,  302,  306,
      306,  304,  310,  310,  433,  308,  303,  432,  306,  311,
      311,  312,  312,  313,  313,  314,  314,  115,  315,  315,
      316,  316,  318,  318,  314,  317,  317,  319,  319,  429,
      303,  428,  303,  320,  320,  321,  321,  324,  324,  331,
      313,  115,  315,  115,  116,  328,  328,  427,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  317,
      426,  322,  322,  323,  323,  406,  315,  322,  325,  325,
      405,  316,  333,  333,  325,  361,  361,  364,  364,  362,
      362,  404,  324,  116,  323,  403,  363,  363,  402,  365,
      365,  331,  331,  366,  366,  367,  367,  361,  365,  368,
      368,  362,  401,  372,  372,  371,  371,  116,  363,  116,
      117,  368,  373,  373,  117,  117,  117,  117,  117,  117,
      117,  117,  371,  117,  117,  362,  369,  369,  400,  367,
      370,  370,  363,  374,  374,  375,  375,  376,  376,  369,
      372,  377,  377,  370,  378,  378,  399,  379,  379,  117,

      373,  380,  380,  378,  381,  381,  382,  382,  383,  383,
      384,  384,  398,  385,  385,  376,  385,  395,  385,  407,
      407,  374,  394,  117,  379,  117,  118,  375,  118,  391,
      118,  118,  118,  118,  118,  118,  118,  118,  381,  118,
      118,  390,  407,  377,  409,  409,  408,  408,  410,  410,
      411,  411,  412,  412,  413,  413,  389,  382,  414,  414,
      415,  415,  417,  417,  388,  118,  409,  416,  416,  359,
      412,  418,  418,  414,  355,  420,  420,  412,  419,  419,
      413,  423,  423,  446,  446,  424,  424,  445,  445,  118,
      354,  118,  119,  408,  410,  419,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  421,  421,  352,
      416,  418,  417,  422,  422,  445,  416,  420,  425,  425,
      351,  423,  421,  424,  425,  350,  422,  447,  447,  448,
      448,  119,  449,  449,  349,  446,  450,  450,  452,  452,
      451,  451,  453,  453,  454,  454,  455,  455,  456,  456,
      348,  457,  457,  458,  458,  119,  347,  119,  120,  447,
      452,  346,  120,  120,  120,  120,  120,  120,  120,  120,
      345,  120,  120,  451,  457,  459,  459,  460,  460,  455,
      461,  461,  462,  462,  344,  448,  463,  463,  459,  476,
      476,  343,  463,  342,  456,  477,  477,  120,  478,  478,

      458,  479,  479,  341,  481,  481,  340,  483,  483,  485,
      485,  499,  499,  480,  480,  481,  482,  482,  461,  484,
      484,  120,  338,  120,  122,  500,  500,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  480,
      334,  484,  482,  483,  486,  486,  487,  487,  496,  496,
      486,  332,  487,  497,  497,  485,  501,  501,  499,  508,
      508,  496,  329,  122,  498,  498,  482,  502,  502,  503,
      503,  510,  510,  502,  289,  503,  497,  508,  509,  509,
      511,  511,  519,  519,  508,  521,  521,  122,  288,  122,
      127,  281,  127,  278,  127,  127,  127,  127,  127,  127,

      127,  127,  498,  127,  127,  518,  518,  509,  520,  520,
      277,  519,  523,  523,  510,  530,  530,  276,  518,  275,
      510,  522,  522,  521,  531,  531,  530,  546,  546,  127,
      520,  532,  532,  511,  270,  533,  533,  534,  534,  535,
      535,  531,  545,  545,  542,  542,  269,  543,  543,  544,
      544,  547,  547,  127,  127,  127,  128,  267,  523,  532,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  533,  542,  543,  522,  544,  266,  546,  261,  534,
      554,  554,  259,  555,  555,  556,  556,  557,  557,  559,
      559,  535,  564,  564,  545,  128,  555,  565,  565,  558,

      558,  547,  566,  566,  567,  567,  257,  255,  254,  252,
      251,  250,  249,  248,  247,  246,  245,  556,  241,  128,
      128,  128,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  227,  182,  182,  558,  226,  180,
      178,  176,  175,  174,  171,  559,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  159,  158,  156,  155,  152,
      151,  182,  150,  149,  148,  147,  146,  145,  144,  143,
      141,  139,  138,  137,  136,  135,  133,  132,  131,   75,
       71,   70,   69,   66,   65,  182,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,   64,   62,   58,   57,   52,   38,   37,   14,   11,
        9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  183,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  183,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,    0,  184,  184,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  184,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  184,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  185,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  225,    0,
        0,    0,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  225,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  225,    0,  225,  228,    0,    0,    0,  228,  228,
      228,  228,  228,  228,  228,  228,    0,  228,  228,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  228,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  228,    0,  228,
      230,    0,    0,    0,  230,  230,  230,  230,  230,  230,
      230,  230,    0,  230,  230,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  230,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  230,    0,  230,  232,    0,    0,    0,
      232,  232,  232,  232,  232,  232,  232,  232,    0,  232,
      232,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  232,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  232,
        0,  232,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,    0,  237,  237,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  237,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  237,    0,  237,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  238,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  238,    0,  238,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,    0,  239,  239,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  239,    0,  239,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  240,    0,  240,  326,    0,    0,    0,
      326,  326,  326,  326,  326,  326,  326,  326,    0,  326,
      326,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  326,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  326,
        0,  326,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,    0,  360,  360,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  360,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  360,  386,    0,    0,    0,
      386,  386,  386,  386,  386,  386,  386,  386,    0,  386,
      386,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  386,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  386,

        0,  386,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,    0,  387,  387,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  387,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  387,    0,  387,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      571,    0,  571,  571,  572,    0,  572,  572,    0,  572,

      573,  573,  573,    0,  573,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,    0,    0,  576,  576,
      576,  576,  576,  576,  576,  576,  577,    0,    0,  577,
      577,  577,  577,  577,  577,  577,  577,  578,    0,    0,
      578,  578,  578,  578,  578,  578,  578,  578,  579,    0,
        0,  579,  579,  579,  579,  579,  579,  579,  579,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  582,    0,  582,  583,    0,  583,  584,    0,    0,

        0,    0,  584,    0,  584,  585,    0,  585,  586,  586,
        0,  586,  587,  587,  587,    0,  587,  587,  587,  587,
      587,  587,  587,  588,    0,    0,  588,  588,  588,  588,
      588,  588,  588,  588,  589,    0,    0,  589,  589,  589,
      589,  589,  589,  589,  589,  590,    0,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,    0,    0,  591,
      591,  591,  591,  591,  591,  591,  591,  592,    0,    0,
      592,  592,  592,  592,  592,  592,  592,  592,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      595,  595,    0,  595,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  602,    0,    0,  602,  602,
      602,  602,  602,  602,  602,  602,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  605,  605,

      605,  605,  605,  605,  605,  605,  605,  605,  605,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  608,    0,  608,  609,    0,    0,  609,  609,  609,
      609,  609,  609,  609,  609,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/InQueryOpParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "../src/InQueryOpParser.l"

/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.lemurproject.org/license.html
 *
 *==========================================================================
*/

#include "InQueryOpParser.hpp"

#include <cstring>
#include <cctype>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <fstream>

#define ON   1
#define OFF  0
#define WORD 2
#define LEFT_PAREN 3
#define RIGHT_PAREN 4
#define AND 7
#define BOOLEANAND 8
#define BOOLEANAND_NOT 9
#define FILTER_REQUIRE 10
#define FILTER_REJECT 11
#define FIELD_OP 12
#define LITERAL 13
#define MAX_OP 14
#define NOT 17
#define ODN 18
#define OR 19
#define PARSUMN 20
#define PHRASE 21
#define SUM 22
#define SYN 23
#define UWN 24
#define WSUM 25
#define NUMBER 26
#define QBEGIN 30
#define QBEGINT 33
#define QEND 31
#define PROP 32

/* PAREN OPERATIONS:
 * NL_LPAREN :   called when a left paren is seen.  If paren_stack is 
 *		empty, we're not inside an operator so this is a 
 *              Natural Language paren.  If paren_stack is not empty, 
 *		but PARENLEVEL is zero, then the paren we're seeing 
 *		is the operator's left paren; if the PARENLEVEL is > 0, 
 *		then again it's a natural language paren we're looking at.
 *              RESULT: returns 1 if this is a Natural Language left paren.
 *              SIDE EFFECT: increments PARENLEVEL
 * NL_RPAREN;   see above.
 *              RESULT: returns 1 if this is a Natural Language right paren.
 *		SIDE EFFECT: decrements PARENLEVEL
 */

int paren_stack[NESTING_LIMIT];
int paren_stack_top=0;
char wsize[30];
#define push_paren_stack(op) {paren_stack[paren_stack_top++]=op;}
#define pop_paren_stack() {if(paren_stack_top>0)paren_stack_top--;}
#define parseError(msg) {cout << msg << endl; exit(1); }

char * getsize() { 
  int l=yyleng; 
  strcpy(wsize, yytext); 
  while(!isdigit(wsize[l-1])) l--;  
  wsize[l]='\0';
  l=0;
  while(!isdigit(wsize[l])) l++; 
  return &wsize[l];
}


#define LIT 1
#define OP 2
#define NEST 3

#line 1316 "../src/InQueryOpParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 118 "../src/InQueryOpParser.l"



#line 1471 "../src/InQueryOpParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 569 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2867 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "../src/InQueryOpParser.l"
{ /* parens jammed together */
    push_paren_stack(LIT); 
    return LEFT_PAREN; 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 126 "../src/InQueryOpParser.l"
{ /* NL paren? */ /* words and parens jammed together */
  if(yyleng>1) {
    yytext[yyleng-1]='\0';
    yyless(yyleng-1);
    return WORD;
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 135 "../src/InQueryOpParser.l"
{
  pop_paren_stack();
  if(paren_stack_top>0)
    BEGIN(paren_stack[paren_stack_top]);
  else 
   BEGIN(0);
  return RIGHT_PAREN;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 144 "../src/InQueryOpParser.l"
{
  return  WORD;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 148 "../src/InQueryOpParser.l"
{; /* delimiters */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 150 "../src/InQueryOpParser.l"
{
                            push_paren_stack(OP);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 154 "../src/InQueryOpParser.l"
{
                            push_paren_stack(NEST);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 159 "../src/InQueryOpParser.l"
{ /* Ignore comments */ }
	YY_BREAK
case 9:
#line 162 "../src/InQueryOpParser.l"
case 10:
YY_RULE_SETUP
#line 162 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (AND); }
	YY_BREAK
case 11:
#line 165 "../src/InQueryOpParser.l"
case 12:
YY_RULE_SETUP
#line 165 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND); }
	YY_BREAK
case 13:
#line 168 "../src/InQueryOpParser.l"
case 14:
YY_RULE_SETUP
#line 168 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND_NOT); }
	YY_BREAK
case 15:
#line 172 "../src/InQueryOpParser.l"
case 16:
#line 173 "../src/InQueryOpParser.l"
case 17:
#line 174 "../src/InQueryOpParser.l"
case 18:
YY_RULE_SETUP
#line 174 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (FILTER_REQUIRE); }
	YY_BREAK
case 19:
#line 177 "../src/InQueryOpParser.l"
case 20:
#line 178 "../src/InQueryOpParser.l"
case 21:
#line 179 "../src/InQueryOpParser.l"
case 22:
YY_RULE_SETUP
#line 179 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (FILTER_REJECT); }
	YY_BREAK
case 23:
#line 183 "../src/InQueryOpParser.l"
case 24:
#line 184 "../src/InQueryOpParser.l"
case 25:
#line 185 "../src/InQueryOpParser.l"
case 26:
#line 186 "../src/InQueryOpParser.l"
case 27:
#line 187 "../src/InQueryOpParser.l"
case 28:
#line 188 "../src/InQueryOpParser.l"
case 29:
#line 189 "../src/InQueryOpParser.l"
case 30:
#line 190 "../src/InQueryOpParser.l"
case 31:
YY_RULE_SETUP
#line 190 "../src/InQueryOpParser.l"
{ 
			  /* User keyword/generics are prefixed with a 
			   * "*".   "#" is old-style, retained for 
			   * compatibility.
			   */

			  return  WORD; }
	YY_BREAK
case 32:
#line 199 "../src/InQueryOpParser.l"
case 33:
YY_RULE_SETUP
#line 199 "../src/InQueryOpParser.l"
{ /* field operator */
                          BEGIN(OP);
                          return (FIELD_OP);
                        }
	YY_BREAK
case 34:
#line 205 "../src/InQueryOpParser.l"
case 35:
YY_RULE_SETUP
#line 205 "../src/InQueryOpParser.l"
{ /* literal operator */
                          BEGIN LIT;
                          return(LITERAL);
                        }
	YY_BREAK
case 36:
#line 211 "../src/InQueryOpParser.l"
case 37:
YY_RULE_SETUP
#line 211 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (MAX_OP); }
	YY_BREAK
case 38:
#line 215 "../src/InQueryOpParser.l"
case 39:
YY_RULE_SETUP
#line 215 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (NOT); }
	YY_BREAK
case 40:
#line 219 "../src/InQueryOpParser.l"
case 41:
YY_RULE_SETUP
#line 219 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (OR); }
	YY_BREAK
case 42:
#line 223 "../src/InQueryOpParser.l"
case 43:
YY_RULE_SETUP
#line 223 "../src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (PARSUMN);
			}
	YY_BREAK
case 44:
#line 229 "../src/InQueryOpParser.l"
case 45:
YY_RULE_SETUP
#line 229 "../src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (PHRASE);
			}
	YY_BREAK
case 46:
#line 235 "../src/InQueryOpParser.l"
case 47:
YY_RULE_SETUP
#line 235 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (SUM); }
	YY_BREAK
case 48:
#line 239 "../src/InQueryOpParser.l"
case 49:
YY_RULE_SETUP
#line 239 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (SYN); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 242 "../src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (ODN);
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "../src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (PROP);
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 251 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
			  return (UWN);
			}
	YY_BREAK
case 53:
#line 256 "../src/InQueryOpParser.l"
case 54:
YY_RULE_SETUP
#line 256 "../src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (WSUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 259 "../src/InQueryOpParser.l"
{ /* end of query token */
			  return QEND;
                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 263 "../src/InQueryOpParser.l"
{ /* begin query token */
			  return QBEGIN;
                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "../src/InQueryOpParser.l"
{ /* begin text query token */
                          yyless(yyleng-1);
			  return QBEGINT;
                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 272 "../src/InQueryOpParser.l"
{
                          return (NUMBER);
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "../src/InQueryOpParser.l"
{ 
                          return  WORD;
                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 280 "../src/InQueryOpParser.l"
{ /* Ignore unexpected stuff */ 
                        }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 283 "../src/InQueryOpParser.l"
ECHO;
	YY_BREAK
#line 1851 "../src/InQueryOpParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LIT):
case YY_STATE_EOF(OP):
case YY_STATE_EOF(NEST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 66);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 569 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 66;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 569 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 568);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 283 "../src/InQueryOpParser.l"


lemur::parse::InQueryOpParser::InQueryOpParser() {
  state = 0;
  iden = identifier;
}

void lemur::parse::InQueryOpParser::finishing_nesting_qnote(int top) {
  int tok;
  while((tok=(int)InQuerylex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(paren_stack_top == top)
	return;
    }
    else
      parseQryNode(tok);
  }
}


void lemur::parse::InQueryOpParser::parseNestingOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseNestingOp: missing LEFT_PAREN");
  }
  return;
}

void lemur::parse::InQueryOpParser::finishing_prox_qnote(int top) {
  int tok;
  while((tok=(int)InQuerylex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(paren_stack_top == top)
	return;
    }
    else
      parseProxNode(tok);
  }
}

void lemur::parse::InQueryOpParser::parseProxOp(char *op, char *size) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void lemur::parse::InQueryOpParser::parsePassageOp(char *op, char *size) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void lemur::parse::InQueryOpParser::parseSynOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void lemur::parse::InQueryOpParser::parsePropOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parsePropOp: missing LEFT_PAREN");
  }
  return;
}

void lemur::parse::InQueryOpParser::parseTermOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      while((nxtok=(int)InQuerylex())) {
	switch(nxtok) {
	case NUMBER:
	case WORD:
	  if (textHandler != NULL) textHandler->foundWord(InQuerytext);
	  break;

	case LITERAL:
	  parseQryNode(nxtok);
	  break;

	case RIGHT_PAREN:
	  if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	  return;
	default:
	  parseError (" parseTermOp: Syntax error");
	}
      }
    }
    else 
      parseError (" parseTermOp: missing LEFT_PAREN");
  }
  return;
}

void lemur::parse::InQueryOpParser::parseProxNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InQuerytext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InQuerytext);
      }
      return;
      break;

    case ODN:
      parseProxOp("#ODN", getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", getsize());
      break;

  case PROP:
    parsePropOp("#PROP"); // should have its own parse method.
      break;
  
  default:
    parseError ("parseProxNode: PARSE ERROR: proximity op allows only prox child");
    }
}


void lemur::parse::InQueryOpParser::parseQryNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InQuerytext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InQuerytext);
      }
      return;
      break;

    case AND:
      parseNestingOp("#AND");
      break;
    case OR:
      parseNestingOp("#OR");
      break;
    case BOOLEANAND:
      parseNestingOp("#BAND");
      break;
    case BOOLEANAND_NOT:
      parseNestingOp("#BANDNOT");
      break;
    case FILTER_REQUIRE:
      parseNestingOp("#FILTREQ");
      break;

    case FILTER_REJECT:
      parseNestingOp("#FILTREJ");
      break;

    case FIELD_OP:
      parseTermOp("#FIELD");
      break;

    case LITERAL:
      if (state) {
	// useless in Lemur because of no such an indexed term
	int nxtok=(int)InQuerylex();
	if (textHandler != NULL) textHandler->foundSymbol("#LIT");
	if(nxtok == LEFT_PAREN) {
	  if (textHandler != NULL) {
	    textHandler->foundSymbol("LPAREN");
	    if((nxtok=InQuerylex())==WORD)
	      textHandler->foundSymbol(InQuerytext);
	    else
	      parseError ("parseQryNode: #lit needs a term");
	  }
	}
	else
	  parseError ("parseQryNode: #lit needs LEFT_PAREN");
      }
      return;
      break;

    case MAX_OP:
      parseNestingOp("#MAX");
      break;

    case NOT:
      parseNestingOp("#NOT");
      break;

    case ODN:
      parseProxOp("#ODN", getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", getsize());
      break;

    case PARSUMN:
      parsePassageOp("#PASSAGE", getsize());
      break;

    case PHRASE:
      parseProxOp("#ODN", "3");
      break;

    case SUM:
      parseNestingOp("#SUM");
      break;

    case WSUM:
      if (state) {
	int tok, wsum_top;
	if (textHandler != NULL) textHandler->foundSymbol("#WSUM");
	tok=(int)InQuerylex();
	if(tok == LEFT_PAREN) {
	  if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
	  wsum_top=paren_stack_top-1;
	  while((tok=(int)InQuerylex())) {
	    if(tok == RIGHT_PAREN) {
	      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	      if(paren_stack_top == wsum_top)
		return;
	      else
		parseError ("parseQryNode: #WSUM unmatched paren");
	    }
	    else if(tok == NUMBER) {
	      // Syntax: #WSUM(w1 q1 w2 q2 ... wn qn)
	      if (textHandler != NULL) textHandler->foundWord(InQuerytext);
	      tok=(int)InQuerylex();
	      parseQryNode(tok);
	    }
	    else
	      parseError ("parseQryNode: #WSUM syntax error");
	  }
	}
	else
	  parseError ("parseQryNode: #WSUM needs a LEFT_PAREN");
      }
      break;
  case PROP:
    parsePropOp("#PROP"); // should have its own parse method.
      break;
  
  default:
      parseError ("parseQryNode: PARSE ERROR: unknown token");
    }
}

long lemur::parse::InQueryOpParser::fileTell() const {
  int offset = yy_c_buf_p-YY_CURRENT_BUFFER->yy_ch_buf;
  if (InQueryin) {
    long begin = ftell(InQueryin)-YY_CURRENT_BUFFER->yy_n_chars;
    return begin+offset;
  } 
  return offset;
}


void lemur::parse::InQueryOpParser::parseBuffer(char* buf, int len) {
  yy_scan_bytes(buf, len);
  doParse();
}

void lemur::parse::InQueryOpParser::parseFile(const string &filename) {
  parsefile=filename;
  InQueryin = fopen(filename.c_str(), "rb");
  doParse();
  fclose(InQueryin);
}

void lemur::parse::InQueryOpParser::doParse() {
  
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering an op 
  // can transition the machine into another state.
  while (tok = InQuerylex()) {
    switch (tok) {	
    case QEND:
      // end of a query
      if(paren_stack_top>0)
	parseError ("parse: PARSE ERROR: unmatched paren");
      state = 0;
      break;
      
    case QBEGIN: {
      // start a new query, its id is treated as a docid
      char * qid=strdup(InQuerytext);
      char *tofree=qid;
      int ql = strlen(InQuerytext);
      state = 1;
      while(*qid && !isdigit(*qid))
	qid++;
      while(ql > 0 && !isdigit(tofree[ql-1]))
	tofree[--ql]='\0';
      paren_stack_top=0;
      if (textHandler != NULL) textHandler->foundDoc(qid);
      free(tofree);
      break;
    }

    case QBEGINT: {
      // start a new query, its id is treated as a docid
      // It doesn't start with an operator, so wrap it in a #SUM
      char * qid=strdup(InQuerytext);
      char *tofree=qid;
      int ql = strlen(InQuerytext);
      state = 1;
      while(*qid && !isdigit(*qid))
	qid++;
      while(ql > 0 && !isdigit(tofree[ql-1]))
	tofree[--ql]='\0';
      paren_stack_top=0;
      if (textHandler != NULL) textHandler->foundDoc(qid);
      free(tofree);
      if (textHandler != NULL) textHandler->foundSymbol("#SUM");
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      while((tok = InQuerylex())) {
	if (tok == QEND) {	  
	  if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	  state = 0;
	  break;
	} else {
	  parseQryNode(tok);
	}
      }
    
    break;
    }
    default:
      parseQryNode(tok);
    }
  }
}
