/*! \mainpage Lemur Toolkit Documentation

  \section install Installation 
 
  - To configure the lemur toolkit
      -# go to top level lemur directory.
      -# run <tt>configure</tt> to generate MakeDefns, Makefile, 
         and Makefile.app. <tt>configure</tt> accepts following arguments:
		- <tt>--enable-distrib</tt> compiles and installs 
		  the distributed retrieval components. Default is disabled.
		- <tt>--enable-summarization</tt> compiles and installs the
		  summarization components. Default is disabled.
		- <tt>--enable-cluster</tt> compiles and installs the
		  document clustering components. Default is disabled.
		- <tt>--enable-assert</tt> Enable assert statements in
                  the code. Default is disabled.
		- <tt>--prefix=&lt;install-directory&gt;</tt> Specifies the 
		  directory for the installed toolkit. 
		  Default is /usr/local.
		- <tt>--enable-java</tt> compiles and installs the
		  swig generated java wrappers. Default is disabled.
		- <tt>--enable-php</tt> compiles and installs the
		  swig generated php wrappers. Default is disabled.
		- <tt>--enable-csharp</tt> compiles and installs the
		  swig generated C# wrappers. Default is disabled.
		- <tt>--with-javahome=&lt;path&gt;</tt> Path to JAVAHOME for
		  compiling the swig generated shared library. 
		- <tt>--with-php-config=&lt;path&gt;</tt> Path to php-config
                  binary. Only required if php-config is not on the path. 
		- <tt>--with-swig=&lt;path&gt;</tt> Path to swig binary. Only
		  required if the wrapper interfaces are changed. 
                - <tt>--with-site-seed=&lt;hostname&gt;</tt> Hostname
                  to use as the seed for building a site search index.

  - To make the lemur toolkit library and applications
      -# go to top level lemur directory.
      -# run <tt>make</tt> (or gmake)

  - To clean the lemur toolkit (remove everything but the source)
      -# go to top level lemur directory.
      -# run <tt>make clean</tt> (or gmake clean)

  - To install the lemur toolkit library and applications.
      -# follow the instructions above for configuring and making the 
         toolkit library and applications.
      -# go to top level lemur directory.
      -# run <tt>make install</tt> (or gmake install)

The lemur include files will be installed in
&lt;install-directory&gt;/include, the lemur library will be installed in
&lt;install-directory&gt;/lib/liblemur.a, and the applications will be
installed in &lt;install-directory&gt;/bin. If you only want the applications,
you can use <tt>make install-bin</tt>. If you only want the library and 
header files, you can use <tt>make install-lib</tt>. 


<p> If configured with --enable-java, documentation
for the Lemur JNI will be installed in
&lt;install-directory&gt;/share/lemur/JNIdoc. The file index.html points into the
javadoc generated documentation.

<p>If configured with --enable-java,
the shared library will be installed in
&lt;install-directory&gt;/lib/liblemur_jni.so and the java class files will be
installed in &lt;install-directory&gt;/share/lemur/lemur.jar and
&lt;install-directory&gt;/share/lemur/indri.jar, for the Lemur and Indri
APIS. You will need to 
add &lt;install-directory&gt;/lib to your LD_LIBRARY_PATH and add
the appropriate jar file(s) to your CLASSPATH to use the
JNI interface.

<p> Four additional jar files are installed. RetUI.jar provides a basic
document retrieval GUI for interactive queries, using the Indri
API. IndexUI.jar provides a 
basic collection indexing GUI for building an indri
repository. LemurRet.jar provides a basic document retrieval GUI for
interactive queries using the Lemur API. LemurIndex.jar provides a basic
collection indexing GUI for building Lemur indexes. All are
installed in &lt;install-directory&gt;/share/lemur and can be run with 
<br>
<pre>
java -jar &lt;jarfilename&gt;
</pre>

<p>If configured with --enable-php,
the shared library will be installed in
&lt;install-directory&gt;/lib/libindri_php.so. You will need to manually
install it in the correct extensions directory for your php
configuration. Note that only portions of the Indri API are wrapped for
use with PHP.

<p>If configured with --enable-csharp,
the shared library will be installed in
&lt;install-directory&gt;/lib/liblemur_csharp.so. The C# wrapper classes
assembly will be installed  in &lt;install-directory&gt;/lib/LemurCsharp.dll
This assembly should be referenced by your C# program.

  \section program  Programming with the lemur toolkit

To build an application using the toolkit library:

      -# follow the instructions above for installing the 
         toolkit library.
      -# Copy Makefile.app from the top level lemur directory to the 
         directory with your application's source code. Edit the file 
	 and fill in values for
        - OBJS -- list of each of the object files needed to build 
	  your application.
	- PROG -- name for your application.
      -# use <tt>make -f Makefile.app</tt> to build your application.

  \section change  Change the toolkit

Modifying the toolkit is not recommended, but individual users may need 
to customize its behavior.

  - To modify an existing file or add a file to an existing directory:
      -# Make the changes
      -# follow the instructions above for making the 
         toolkit library and applications.
      -# follow the instructions above for installing the 
         toolkit library.

  - To add a new (library) module to the toolkit:
      -# Add the module subdirectory to lemur, for example 
       "<new-module-dir>".
      -# Put all include files in the subdirectory named 
       "<new-module-dir>/include".
      -# Put all implementation files in the subdirectory named 
       "<new-module-dir>/src".
      -# Add the module directory name to the Makefile variable LIBDIRS
  and to the MakeDefns variables MODULES and ALLMODULES. New modules
  should be placed at the front of the lists.
       <b>Note:</b> If you rerun configure, you will have to make this 
       change again. Advanced users should edit MakeDefns.in to add the
  module directory name to ALLMODULES and edit configure.ac to add 
       an AC_ARG_ENABLE for the new module (see the distrib entry in 
       configure.ac) and then use autoconf to generate a new configure 
       script. 
      -# Copy a Makefile from an existing module directory 
      (e.g, index/src/Makefile) to <new-module-dir>/src, and change 
      the variable MODULE to the name of the new module (<new-module-dir>).

      \section runapp  To run lemur applications

  - Create a parameter file with value definitions for all the
  input variables of an application.
  For example, 
  <PRE>
    &lt;parameters&gt;
      &lt;index&gt;/usr0/mydata/index.ifp&lt;/index&gt;
    &lt;/parameters&gt;
  </PRE>
   Most applications will display a list of required input variables, 
if you run it with the "--help" option. 

  -  Run the application program without the parameter file as the 
  only argument.


  \section sampledata To try the sample data

  - Go to the data directory, run "test_pos_index.sh" which is a 
  self-explanatory shell script that will build an index, run 
  several retrieval algorithms with some sample parameter files, 
  and then evaluate the retrieval performance.

 */
