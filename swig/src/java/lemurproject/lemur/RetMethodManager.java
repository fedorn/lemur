/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package lemurproject.lemur;

public class RetMethodManager {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected RetMethodManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RetMethodManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
  }

        /**
           Run a string query with a given retrieval method instance.
           @param searchQuery the query to run
           @param m The retrieval method to use.
           @return array of IndexedReal results
           @throws Exception if a lemur::api::Exception was thrown by the JNI library.
        */

public static IndexedReal[] runQuery(String searchQuery, IndriRetMethod m) throws Exception
  {
    return RetMethodManager.runIndriQuery(searchQuery, m);
  }
/**
   Run a string query with a given retrieval method instance.
   @param searchQuery the query to run
   @param m The retrieval method to use.
   @return array of IndexedReal results
   @throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/

public static IndexedReal[] runQuery(String searchQuery, StructQueryRetMethod m) throws Exception
  {
    return RetMethodManager.runStructQuery(searchQuery, m);
  }
/**
   Run a string query with a given retrieval method instance.
   @param searchQuery the query to run
   @param m The retrieval method to use.
   @return array of IndexedReal results
   @throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/

public static IndexedReal[] runQuery(String searchQuery, TextQueryRetMethod m) throws Exception
  {
    return RetMethodManager.runTextQuery(searchQuery, m);
  }
 
 
  
/**
Create a retrieval model
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static RetrievalMethod createModel(Index ind, ScoreAccumulator accum, String type) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_createModel__SWIG_0(Index.getCPtr(ind), ind, ScoreAccumulator.getCPtr(accum), accum, type);
}

  
/**
Create a retrieval model
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static RetrievalMethod createModel(Index ind, ScoreAccumulator accum) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_createModel__SWIG_1(Index.getCPtr(ind), ind, ScoreAccumulator.getCPtr(accum), accum);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runTextQuery(String query, TextQueryRetMethod model, String stopfile, String stemtype, String datadir, String func) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runTextQuery__SWIG_0(query, TextQueryRetMethod.getCPtr(model), model, stopfile, stemtype, datadir, func);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runTextQuery(String query, TextQueryRetMethod model, String stopfile, String stemtype, String datadir) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runTextQuery__SWIG_1(query, TextQueryRetMethod.getCPtr(model), model, stopfile, stemtype, datadir);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runTextQuery(String query, TextQueryRetMethod model, String stopfile, String stemtype) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runTextQuery__SWIG_2(query, TextQueryRetMethod.getCPtr(model), model, stopfile, stemtype);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runTextQuery(String query, TextQueryRetMethod model, String stopfile) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runTextQuery__SWIG_3(query, TextQueryRetMethod.getCPtr(model), model, stopfile);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runTextQuery(String query, TextQueryRetMethod model) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runTextQuery__SWIG_4(query, TextQueryRetMethod.getCPtr(model), model);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runStructQuery(String query, StructQueryRetMethod model, String stopfile, String stemtype, String datadir, String func) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runStructQuery__SWIG_0(query, StructQueryRetMethod.getCPtr(model), model, stopfile, stemtype, datadir, func);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runStructQuery(String query, StructQueryRetMethod model, String stopfile, String stemtype, String datadir) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runStructQuery__SWIG_1(query, StructQueryRetMethod.getCPtr(model), model, stopfile, stemtype, datadir);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runStructQuery(String query, StructQueryRetMethod model, String stopfile, String stemtype) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runStructQuery__SWIG_2(query, StructQueryRetMethod.getCPtr(model), model, stopfile, stemtype);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runStructQuery(String query, StructQueryRetMethod model, String stopfile) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runStructQuery__SWIG_3(query, StructQueryRetMethod.getCPtr(model), model, stopfile);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runStructQuery(String query, StructQueryRetMethod model) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runStructQuery__SWIG_4(query, StructQueryRetMethod.getCPtr(model), model);
}

  
/**
      Automatically generate query models from the given query and run through
      given retrieval model. Stopword file and stemmer are optional
      query terms delimited by space
@throws Exception if a lemur::api::Exception was thrown by the JNI library.
*/
public static IndexedReal[] runIndriQuery(String query, IndriRetMethod model) throws java.lang.Exception {
  return lemurJNI.RetMethodManager_runIndriQuery(query, IndriRetMethod.getCPtr(model), model);
}

}
