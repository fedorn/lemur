/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




  // includes for the lemur classes
  // could be put in the various individual .i files
#include "IndexManager.hpp"
#include "BasicCollectionProps.hpp"
#include "RetMethodManager.hpp"
#include "StructQueryRetMethod.hpp"
#include "TextQueryRetMethod.hpp"
#include "MatchInfo.hpp"
#include "ElemDocMgr.hpp"
  

#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>



  void java_fill_indexedrealvector( JNIEnv* jenv, const lemur::api::IndexedRealVector& input, jobjectArray result ) {
    if (!result) {
      return ;
    }
    jclass clazz = jenv->FindClass("lemurproject/lemur/IndexedReal");
    jmethodID constructor = jenv->GetMethodID(clazz, "<init>", "()V" );
    jfieldID scoreField = jenv->GetFieldID(clazz, "val", "D" );
    jfieldID idField = jenv->GetFieldID(clazz, "ind", "I" );
    jsize size = jenv->GetArrayLength(result);
    jsize limit = std::min((size_t)size, input.size());

    for( jsize i=0; i<limit; i++ ) {
      jobject ser = jenv->NewObject(clazz, constructor);
      jenv->SetDoubleField(ser, scoreField, input[i].val );
      jenv->SetIntField(ser, idField, input[i].ind );
      jenv->SetObjectArrayElement(result, i, ser);
    }
  }
  jobjectArray java_build_indexedrealvector( JNIEnv* jenv, const lemur::api::IndexedRealVector& input ) {
    jclass clazz = jenv->FindClass("lemurproject/lemur/IndexedReal");
    jobjectArray result;
    result = jenv->NewObjectArray(input.size(), clazz, NULL);
    java_fill_indexedrealvector(jenv, input, result);
    return result;
  }

  
SWIGINTERN char *lemur_api_DocumentManager_docElement(lemur::api::DocumentManager *self,std::string const &docid,std::string const &elt){
            lemur::parse::ElemDocMgr *dm = dynamic_cast<lemur::parse::ElemDocMgr *>(self);
            if (dm)
              return dm->getElement(docid.c_str(), elt.c_str());
            else
              return NULL;
          }
SWIGINTERN void lemur_api_Index_setProps(lemur::api::Index *self){
            const lemur::parse::BasicCollectionProps* props = dynamic_cast<const lemur::parse::BasicCollectionProps*> (self->collectionProps());
            if (props) {
              const lemur::parse::Property* p = NULL;
              props->startIteration();
              while (props->hasMore()) {
                p = props->nextEntry();
                if (p->getType() == lemur::parse::Property::STRING) 
                  lemur::api::ParamSet(p->getName(),(char*)p->getValue());
              }
            }
          }
SWIGINTERN lemur::api::Query *lemur_api_Query_makeQuery__SWIG_0(std::string query,std::string const &stopfile="",std::string const &stemtype="",std::string const &datadir="",std::string const &func=""){
          lemur::api::Stopper* stopper = lemur::api::TextHandlerManager::createStopper(stopfile);
          lemur::api::Stemmer* stemmer = lemur::api::TextHandlerManager::createStemmer(stemtype, datadir, func);
          lemur::parse::StringQuery* parser = NULL;
          lemur::parse::StringQuery* qryterms;
          lemur::api::TextHandler* chain;

          if (stopper || stemmer) {
            parser = new lemur::parse::StringQuery();
            chain = parser;
            qryterms = new lemur::parse::StringQuery();

            if (stopper) {
              chain->setTextHandler(stopper);
              chain=stopper;
            }
    
            if (stemmer) {
              chain->setTextHandler(stemmer);    
              chain=stemmer;
            }
    
            chain->setTextHandler(qryterms);
            parser->parse(query);

            delete(parser);
    
          } else {
            qryterms = new lemur::parse::StringQuery(query);
          }
          return qryterms;
        }
SWIGINTERN lemur::api::IndexedRealVector *lemur_api_RetMethodManager_runIndriQuery(std::string const &query,lemur::retrieval::IndriRetMethod *model){
          lemur::api::IndexedRealVector *tmp = new lemur::api::IndexedRealVector();
          model->scoreCollection(query, *tmp);
          return tmp;
        }

  jobjectArray java_build_matchinfo( JNIEnv* jenv, const lemur::api::MatchInfo* input ) {
    jclass clazz = jenv->FindClass("lemurproject/lemur/TMatch");
    jmethodID constructor = jenv->GetMethodID(clazz, "<init>", "()V" );
    jobjectArray result;

    result = jenv->NewObjectArray(input->size(), clazz, NULL);
    if (!result) {
      return 0;
    }

    jfieldID idField = jenv->GetFieldID(clazz, "tid", "I" );
    jfieldID startField = jenv->GetFieldID(clazz, "start", "I" );
    jfieldID endField = jenv->GetFieldID(clazz, "end", "I" );
    jfieldID positionField = jenv->GetFieldID(clazz, "position", "I" );

    for( jsize i=0; i<input->size(); i++ ) {
      // make a new scored extent result object
      jobject ser = jenv->NewObject(clazz, constructor);

      // fill in the fields
      jenv->SetIntField(ser, idField, (*input)[i].tid );
      jenv->SetIntField(ser, startField, (*input)[i].start );
      jenv->SetIntField(ser, endField, (*input)[i].end );
      jenv->SetIntField(ser, positionField, (*input)[i].position );

      jenv->SetObjectArrayElement(result, i, ser);
    }
    return result;
  }
  

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_new_1TermInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lemur::api::TERMID_T arg1 ;
  lemur::api::COUNT_T arg2 ;
  lemur::api::TermInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (lemur::api::TERMID_T)jarg1; 
  arg2 = (lemur::api::COUNT_T)jarg2; 
  {
    try {
      result = (lemur::api::TermInfo *)new lemur::api::TermInfo(arg1,arg2);
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::TermInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_TermInfo_1termID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::TERMID_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::TERMID_T)((lemur::api::TermInfo const *)arg1)->termID();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_TermInfo_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::COUNT_T)((lemur::api::TermInfo const *)arg1)->count();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_lemurproject_lemur_lemurJNI_TermInfo_1positions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::LOC_T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::LOC_T *)((lemur::api::TermInfo const *)arg1)->positions();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    const lemur::api::LOC_T* tmp = result;
    int count = arg1->count();
    jresult = jenv->NewIntArray(count);
    if (!jresult) {
      return 0;
    }
    jint * body = jenv->GetIntArrayElements(jresult, 0);
    for( jsize i=0; i<count; i++ ) {
      body[i] = tmp[i];
    }
    jenv->ReleaseIntArrayElements(jresult, body, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_TermInfo_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::LOC_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::LOC_T)((lemur::api::TermInfo const *)arg1)->position();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1TermInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::TermInfo **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_TermInfoList_1startIteration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfoList **)&jarg1; 
  {
    try {
      ((lemur::api::TermInfoList const *)arg1)->startIteration();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_lemurproject_lemur_lemurJNI_TermInfoList_1hasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfoList **)&jarg1; 
  {
    try {
      result = (bool)((lemur::api::TermInfoList const *)arg1)->hasMore();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_TermInfoList_1nextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  lemur::api::TermInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::TermInfoList **)&jarg1; 
  {
    try {
      result = (lemur::api::TermInfo *)((lemur::api::TermInfoList const *)arg1)->nextEntry();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::TermInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1TermInfoList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::TermInfoList **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_new_1DocInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lemur::api::DOCID_T arg1 ;
  lemur::api::COUNT_T arg2 ;
  lemur::api::DocInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (lemur::api::DOCID_T)jarg1; 
  arg2 = (lemur::api::COUNT_T)jarg2; 
  {
    try {
      result = (lemur::api::DocInfo *)new lemur::api::DocInfo(arg1,arg2);
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::DocInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_DocInfo_1docID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  lemur::api::DOCID_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::DOCID_T)((lemur::api::DocInfo const *)arg1)->docID();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_DocInfo_1termCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::COUNT_T)((lemur::api::DocInfo const *)arg1)->termCount();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_lemurproject_lemur_lemurJNI_DocInfo_1positions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  lemur::api::LOC_T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocInfo **)&jarg1; 
  {
    try {
      result = (lemur::api::LOC_T *)((lemur::api::DocInfo const *)arg1)->positions();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    const lemur::api::LOC_T* tmp = result;
    int count = arg1->termCount();
    jresult = jenv->NewIntArray(count);
    if (!jresult) {
      return 0;
    }
    jint * body = jenv->GetIntArrayElements(jresult, 0);
    for( jsize i=0; i<count; i++ ) {
      body[i] = tmp[i];
    }
    jenv->ReleaseIntArrayElements(jresult, body, 0);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1DocInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::DocInfo **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_DocInfoList_1startIteration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocInfoList **)&jarg1; 
  {
    try {
      ((lemur::api::DocInfoList const *)arg1)->startIteration();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_lemurproject_lemur_lemurJNI_DocInfoList_1hasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocInfoList **)&jarg1; 
  {
    try {
      result = (bool)((lemur::api::DocInfoList const *)arg1)->hasMore();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_DocInfoList_1nextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  lemur::api::DocInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocInfoList **)&jarg1; 
  {
    try {
      result = (lemur::api::DocInfo *)((lemur::api::DocInfoList const *)arg1)->nextEntry();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::DocInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1DocInfoList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::DocInfoList **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_lemurproject_lemur_lemurJNI_DocumentManager_1getDoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  lemur::api::DocumentManager *arg1 = (lemur::api::DocumentManager *) 0 ;
  std::string *arg2 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocumentManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (char *)((lemur::api::DocumentManager const *)arg1)->getDoc((std::string const &)*arg2);
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_lemurproject_lemur_lemurJNI_DocumentManager_1docElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  lemur::api::DocumentManager *arg1 = (lemur::api::DocumentManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::DocumentManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (char *)lemur_api_DocumentManager_docElement(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1DocumentManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::DocumentManager *arg1 = (lemur::api::DocumentManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::DocumentManager **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_lemurproject_lemur_lemurJNI_Index_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (bool)(arg1)->open((std::string const &)*arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1term_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERM_T *arg2 = 0 ;
  lemur::api::TERMID_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (lemur::api::TERMID_T)((lemur::api::Index const *)arg1)->term((lemur::api::TERM_T const &)*arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_lemurproject_lemur_lemurJNI_Index_1term_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::TERM_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  {
    try {
      try {
        result = ((lemur::api::Index const *)arg1)->term(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1document_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::EXDOCID_T *arg2 = 0 ;
  lemur::api::DOCID_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (lemur::api::DOCID_T)((lemur::api::Index const *)arg1)->document((lemur::api::EXDOCID_T const &)*arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_lemurproject_lemur_lemurJNI_Index_1document_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::EXDOCID_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  {
    try {
      try {
        result = ((lemur::api::Index const *)arg1)->document(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Index_1docManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::DocumentManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::DocumentManager *)((lemur::api::Index const *)arg1)->docManager(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::DocumentManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1docCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  {
    try {
      try {
        result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->docCount();
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1termCountUnique(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  {
    try {
      try {
        result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->termCountUnique();
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1termCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->termCount(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1termCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  {
    try {
      try {
        result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->termCount();
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_lemurproject_lemur_lemurJNI_Index_1docLengthAvg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  {
    try {
      try {
        result = (float)((lemur::api::Index const *)arg1)->docLengthAvg();
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1docCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->docCount(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_Index_1docLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::COUNT_T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->docLength(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Index_1docInfoList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::DocInfoList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::DocInfoList *)((lemur::api::Index const *)arg1)->docInfoList(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::DocInfoList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Index_1termInfoList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::TermInfoList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::TermInfoList *)((lemur::api::Index const *)arg1)->termInfoList(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::TermInfoList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Index_1termInfoListSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::TermInfoList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  {
    try {
      try {
        result = (lemur::api::TermInfoList *)((lemur::api::Index const *)arg1)->termInfoListSeq(arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::TermInfoList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_Index_1setProps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  {
    try {
      lemur_api_Index_setProps(arg1);
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::Index **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_IndexManager_1openIndex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      try {
        result = (lemur::api::Index *)lemur::api::IndexManager::openIndex((std::string const &)*arg1);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_new_1QueryRep(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lemur::api::QueryRep *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (lemur::api::QueryRep *)new lemur::api::QueryRep();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::QueryRep **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1QueryRep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::QueryRep *arg1 = (lemur::api::QueryRep *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::QueryRep **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Query_1makeQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  lemur::api::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      try {
        result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Query_1makeQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  lemur::api::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      try {
        result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Query_1makeQuery_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  lemur::api::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Query_1makeQuery_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  lemur::api::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_Query_1makeQuery_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  lemur::api::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      try {
        result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_new_1Query(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lemur::api::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (lemur::api::Query *)new lemur::api::Query();
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::api::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1Query(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::Query *arg1 = (lemur::api::Query *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::Query **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_RetrievalMethod_1scoreCollection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  lemur::api::RetrievalMethod *arg1 = (lemur::api::RetrievalMethod *) 0 ;
  lemur::api::QueryRep *arg2 = 0 ;
  lemur::api::IndexedRealVector *arg3 = 0 ;
  lemur::api::IndexedRealVector resin3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lemur::api::RetrievalMethod **)&jarg1; 
  arg2 = *(lemur::api::QueryRep **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lemur::api::QueryRep const & reference is null");
    return ;
  } 
  {
    jsize size = jenv->GetArrayLength(jarg3);
    arg3 = &resin3;
    arg3->resize(size);
    // ought ot actually fill in the values here.
  }
  {
    try {
      try {
        (arg1)->scoreCollection((lemur::api::QueryRep const &)*arg2,*arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return ;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
  {
    java_fill_indexedrealvector( jenv, *(arg3), jarg3 );
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_RetrievalMethod_1updateQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  lemur::api::RetrievalMethod *arg1 = (lemur::api::RetrievalMethod *) 0 ;
  lemur::api::QueryRep *arg2 = 0 ;
  lemur::api::DocIDSet *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(lemur::api::RetrievalMethod **)&jarg1; 
  arg2 = *(lemur::api::QueryRep **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lemur::api::QueryRep & reference is null");
    return ;
  } 
  arg3 = *(lemur::api::DocIDSet **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lemur::api::DocIDSet const & reference is null");
    return ;
  } 
  {
    try {
      try {
        (arg1)->updateQuery(*arg2,(lemur::api::DocIDSet const &)*arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return ;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1RetrievalMethod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::RetrievalMethod *arg1 = (lemur::api::RetrievalMethod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::RetrievalMethod **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1TextQueryRetMethod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::TextQueryRetMethod *arg1 = (lemur::api::TextQueryRetMethod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::TextQueryRetMethod **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1StructQueryRetMethod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::api::StructQueryRetMethod *arg1 = (lemur::api::StructQueryRetMethod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::api::StructQueryRetMethod **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1IndriRetMethod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::retrieval::IndriRetMethod *arg1 = (lemur::retrieval::IndriRetMethod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::retrieval::IndriRetMethod **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jobject JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1createModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jobject jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::ScoreAccumulator *arg2 = (lemur::api::ScoreAccumulator *) 0 ;
  std::string arg3 ;
  lemur::api::RetrievalMethod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = *(lemur::api::ScoreAccumulator **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        result = (lemur::api::RetrievalMethod *)lemur::api::RetMethodManager::createModel((lemur::api::Index const *)arg1,arg2,arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    lemur::api::TextQueryRetMethod *t = dynamic_cast<lemur::api::TextQueryRetMethod*>(result);
    lemur::api::StructQueryRetMethod *s = dynamic_cast<lemur::api::StructQueryRetMethod*>(result);
    lemur::retrieval::IndriRetMethod *ind = dynamic_cast<lemur::retrieval::IndriRetMethod*>(result);
    if (t) {
      jclass clazz = jenv->FindClass("lemurproject/lemur/TextQueryRetMethod");
      if (clazz) {
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
        if (mid) {
          jlong cptr = 0;
          *(lemur::api::TextQueryRetMethod **)&cptr = t;
          jresult = jenv->NewObject(clazz, mid, cptr, true);
        }
      }
    } else if (s) {
      jclass clazz = jenv->FindClass("lemurproject/lemur/StructQueryRetMethod");
      if (clazz) {
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
        if (mid) {
          jlong cptr = 0;
          *(lemur::api::StructQueryRetMethod **)&cptr = s;
          jresult = jenv->NewObject(clazz, mid, cptr, true);
        }
      }
    }  else if (ind) {
      jclass clazz = jenv->FindClass("lemurproject/lemur/IndriRetMethod");
      if (clazz) {
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
        if (mid) {
          jlong cptr = 0;
          *(lemur::retrieval::IndriRetMethod **)&cptr = ind;
          jresult = jenv->NewObject(clazz, mid, cptr, true);
        }
      }
    } else {
      jresult = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1createModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jobject jresult = 0 ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::ScoreAccumulator *arg2 = (lemur::api::ScoreAccumulator *) 0 ;
  lemur::api::RetrievalMethod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lemur::api::Index **)&jarg1; 
  arg2 = *(lemur::api::ScoreAccumulator **)&jarg2; 
  {
    try {
      try {
        result = (lemur::api::RetrievalMethod *)lemur::api::RetMethodManager::createModel((lemur::api::Index const *)arg1,arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    lemur::api::TextQueryRetMethod *t = dynamic_cast<lemur::api::TextQueryRetMethod*>(result);
    lemur::api::StructQueryRetMethod *s = dynamic_cast<lemur::api::StructQueryRetMethod*>(result);
    lemur::retrieval::IndriRetMethod *ind = dynamic_cast<lemur::retrieval::IndriRetMethod*>(result);
    if (t) {
      jclass clazz = jenv->FindClass("lemurproject/lemur/TextQueryRetMethod");
      if (clazz) {
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
        if (mid) {
          jlong cptr = 0;
          *(lemur::api::TextQueryRetMethod **)&cptr = t;
          jresult = jenv->NewObject(clazz, mid, cptr, true);
        }
      }
    } else if (s) {
      jclass clazz = jenv->FindClass("lemurproject/lemur/StructQueryRetMethod");
      if (clazz) {
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
        if (mid) {
          jlong cptr = 0;
          *(lemur::api::StructQueryRetMethod **)&cptr = s;
          jresult = jenv->NewObject(clazz, mid, cptr, true);
        }
      }
    }  else if (ind) {
      jclass clazz = jenv->FindClass("lemurproject/lemur/IndriRetMethod");
      if (clazz) {
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
        if (mid) {
          jlong cptr = 0;
          *(lemur::retrieval::IndriRetMethod **)&cptr = ind;
          jresult = jenv->NewObject(clazz, mid, cptr, true);
        }
      }
    } else {
      jresult = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runTextQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::TextQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runTextQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::TextQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runTextQuery_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::TextQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runTextQuery_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::TextQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runTextQuery_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::TextQueryRetMethod **)&jarg2; 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runStructQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::StructQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runStructQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::StructQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runStructQuery_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::StructQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runStructQuery_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::StructQueryRetMethod **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runStructQuery_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::api::StructQueryRetMethod **)&jarg2; 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_RetMethodManager_1runIndriQuery(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jobjectArray jresult = 0 ;
  std::string *arg1 = 0 ;
  lemur::retrieval::IndriRetMethod *arg2 = (lemur::retrieval::IndriRetMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lemur::retrieval::IndriRetMethod **)&jarg2; 
  {
    try {
      try {
        result = (lemur::api::IndexedRealVector *)lemur_api_RetMethodManager_runIndriQuery((std::string const &)*arg1,arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_indexedrealvector( jenv, *(result) );
    delete(result);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_new_1ArrayAccumulator(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lemur::retrieval::ArrayAccumulator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (lemur::retrieval::ArrayAccumulator *)new lemur::retrieval::ArrayAccumulator(arg1);
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  *(lemur::retrieval::ArrayAccumulator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_delete_1ArrayAccumulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lemur::retrieval::ArrayAccumulator *arg1 = (lemur::retrieval::ArrayAccumulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lemur::retrieval::ArrayAccumulator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jobjectArray JNICALL Java_lemurproject_lemur_lemurJNI_MatchInfo_1getMatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jobjectArray jresult = 0 ;
  lemur::api::Index *arg1 = 0 ;
  lemur::api::Query *arg2 = 0 ;
  lemur::api::DOCID_T arg3 ;
  lemur::api::TMatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lemur::api::Index **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lemur::api::Index const & reference is null");
    return 0;
  } 
  arg2 = *(lemur::api::Query **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lemur::api::Query const & reference is null");
    return 0;
  } 
  arg3 = (lemur::api::DOCID_T)jarg3; 
  {
    try {
      try {
        result = (lemur::api::TMatch *)lemur::api::MatchInfo::getMatches((lemur::api::Index const &)*arg1,(lemur::api::Query const &)*arg2,arg3);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  {
    jresult = java_build_matchinfo( jenv, (const lemur::api::MatchInfo*)result );
    // clean up
    delete(result);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_ParamSet(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        lemur::api::ParamSet((std::string const &)*arg1,(std::string const &)*arg2);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return ;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_lemurproject_lemur_lemurJNI_ParamClear(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      try {
        lemur::api::ParamClear();
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return ;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return ; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_lemurproject_lemur_lemurJNI_ParamPushFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      try {
        result = (int)lemur::api::ParamPushFile((std::string const &)*arg1);
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_lemurproject_lemur_lemurJNI_ParamPopFile(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      try {
        result = lemur::api::ParamPopFile();
      }
      catch(lemur::api::Exception &_e) {
        {
          jclass excep = jenv->FindClass("java/lang/Exception");
          if (excep)
          jenv->ThrowNew(excep, (&_e)->what().c_str());
          return 0;
        }
      }
      
    } catch( lemur::api::Exception& e ) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what().c_str()); return 0; 
      };
      // control does not leave method when thrown. (fixed in 1.3.25
      // return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_SWIGTextQueryRetMethodUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lemur::api::RetrievalMethod **)&baseptr = *(lemur::api::TextQueryRetMethod **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_SWIGStructQueryRetMethodUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lemur::api::RetrievalMethod **)&baseptr = *(lemur::api::StructQueryRetMethod **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_SWIGIndriRetMethodUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lemur::api::RetrievalMethod **)&baseptr = *(lemur::retrieval::IndriRetMethod **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_lemurproject_lemur_lemurJNI_SWIGArrayAccumulatorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lemur::api::ScoreAccumulator **)&baseptr = *(lemur::retrieval::ArrayAccumulator **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

