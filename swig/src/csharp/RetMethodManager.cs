/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Lemur {

using System;
using System.Runtime.InteropServices;

public class RetMethodManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RetMethodManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RetMethodManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        throw new MethodAccessException("C++ destructor does not have public access");
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static RetrievalMethod createModel(Index ind, ScoreAccumulator accum, string type) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_createModel__SWIG_0(Index.getCPtr(ind), ScoreAccumulator.getCPtr(accum), type);
    RetrievalMethod ret = (cPtr == IntPtr.Zero) ? null : new RetrievalMethod(cPtr, true);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RetrievalMethod createModel(Index ind, ScoreAccumulator accum) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_createModel__SWIG_1(Index.getCPtr(ind), ScoreAccumulator.getCPtr(accum));
    RetrievalMethod ret = (cPtr == IntPtr.Zero) ? null : new RetrievalMethod(cPtr, true);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runTextQuery(string query, TextQueryRetMethod model, string stopfile, string stemtype, string datadir, string func) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runTextQuery__SWIG_0(query, TextQueryRetMethod.getCPtr(model), stopfile, stemtype, datadir, func);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runTextQuery(string query, TextQueryRetMethod model, string stopfile, string stemtype, string datadir) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runTextQuery__SWIG_1(query, TextQueryRetMethod.getCPtr(model), stopfile, stemtype, datadir);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runTextQuery(string query, TextQueryRetMethod model, string stopfile, string stemtype) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runTextQuery__SWIG_2(query, TextQueryRetMethod.getCPtr(model), stopfile, stemtype);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runTextQuery(string query, TextQueryRetMethod model, string stopfile) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runTextQuery__SWIG_3(query, TextQueryRetMethod.getCPtr(model), stopfile);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runTextQuery(string query, TextQueryRetMethod model) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runTextQuery__SWIG_4(query, TextQueryRetMethod.getCPtr(model));
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runStructQuery(string query, StructQueryRetMethod model, string stopfile, string stemtype, string datadir, string func) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runStructQuery__SWIG_0(query, StructQueryRetMethod.getCPtr(model), stopfile, stemtype, datadir, func);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runStructQuery(string query, StructQueryRetMethod model, string stopfile, string stemtype, string datadir) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runStructQuery__SWIG_1(query, StructQueryRetMethod.getCPtr(model), stopfile, stemtype, datadir);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runStructQuery(string query, StructQueryRetMethod model, string stopfile, string stemtype) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runStructQuery__SWIG_2(query, StructQueryRetMethod.getCPtr(model), stopfile, stemtype);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runStructQuery(string query, StructQueryRetMethod model, string stopfile) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runStructQuery__SWIG_3(query, StructQueryRetMethod.getCPtr(model), stopfile);
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runStructQuery(string query, StructQueryRetMethod model) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runStructQuery__SWIG_4(query, StructQueryRetMethod.getCPtr(model));
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runIndriQuery(string query, IndriRetMethod model) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runIndriQuery(query, IndriRetMethod.getCPtr(model));
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedRealVector runQuery(string query, RetrievalMethod model) {
    IntPtr cPtr = lemur_csharpPINVOKE.RetMethodManager_runQuery(query, RetrievalMethod.getCPtr(model));
    IndexedRealVector ret = (cPtr == IntPtr.Zero) ? null : new IndexedRealVector(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
