/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Lemur {

using System;
using System.Runtime.InteropServices;

public class MatchInfo : TMatchVector {
  private HandleRef swigCPtr;

  internal MatchInfo(IntPtr cPtr, bool cMemoryOwn) : base(lemur_csharpPINVOKE.MatchInfoUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MatchInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        throw new MethodAccessException("C++ destructor does not have public access");
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static MatchInfo getMatches(Index ind, Query qry, int docID) {
    IntPtr cPtr = lemur_csharpPINVOKE.MatchInfo_getMatches(Index.getCPtr(ind), Query.getCPtr(qry), docID);
    MatchInfo ret = (cPtr == IntPtr.Zero) ? null : new MatchInfo(cPtr, false);
    if (lemur_csharpPINVOKE.SWIGPendingException.Pending) throw lemur_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
