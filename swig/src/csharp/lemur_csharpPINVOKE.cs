/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Lemur {

using System;
using System.Runtime.InteropServices;

class lemur_csharpPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("lemur_csharp", EntryPoint="SWIGRegisterExceptionCallbacks_lemur_csharp")]
    public static extern void SWIGRegisterExceptionCallbacks_lemur_csharp(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("lemur_csharp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_lemur_csharp")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_lemur_csharp(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_lemur_csharp(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_lemur_csharp(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(lemur_csharpPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(lemur_csharpPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("lemur_csharp", EntryPoint="SWIGRegisterStringCallback_lemur_csharp")]
    public static extern void SWIGRegisterStringCallback_lemur_csharp(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_lemur_csharp(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  [DllImport("lemur_csharp", EntryPoint="CSharp_new_TermInfo")]
  public static extern IntPtr new_TermInfo(int jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfo_termID")]
  public static extern int TermInfo_termID(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfo_count")]
  public static extern int TermInfo_count(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfo_positions")]
  public static extern IntPtr TermInfo_positions(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfo_position")]
  public static extern int TermInfo_position(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_TermInfo")]
  public static extern void delete_TermInfo(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfoList_startIteration")]
  public static extern void TermInfoList_startIteration(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfoList_hasMore")]
  public static extern bool TermInfoList_hasMore(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TermInfoList_nextEntry")]
  public static extern IntPtr TermInfoList_nextEntry(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_TermInfoList")]
  public static extern void delete_TermInfoList(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_DocInfo")]
  public static extern IntPtr new_DocInfo(int jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocInfo_docID")]
  public static extern int DocInfo_docID(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocInfo_termCount")]
  public static extern int DocInfo_termCount(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocInfo_positions")]
  public static extern IntPtr DocInfo_positions(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_DocInfo")]
  public static extern void delete_DocInfo(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocInfoList_startIteration")]
  public static extern void DocInfoList_startIteration(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocInfoList_hasMore")]
  public static extern bool DocInfoList_hasMore(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocInfoList_nextEntry")]
  public static extern IntPtr DocInfoList_nextEntry(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_DocInfoList")]
  public static extern void delete_DocInfoList(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_Clear")]
  public static extern void IRVector_Clear(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_Add")]
  public static extern void IRVector_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_size")]
  public static extern uint IRVector_size(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_capacity")]
  public static extern uint IRVector_capacity(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_reserve")]
  public static extern void IRVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_IRVector__SWIG_0")]
  public static extern IntPtr new_IRVector__SWIG_0();

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_IRVector__SWIG_1")]
  public static extern IntPtr new_IRVector__SWIG_1(int jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_getitemcopy")]
  public static extern IntPtr IRVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_getitem")]
  public static extern IntPtr IRVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_setitem")]
  public static extern void IRVector_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_AddRange")]
  public static extern void IRVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_GetRange")]
  public static extern IntPtr IRVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_Insert")]
  public static extern void IRVector_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_InsertRange")]
  public static extern void IRVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_RemoveAt")]
  public static extern void IRVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_RemoveRange")]
  public static extern void IRVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_Repeat")]
  public static extern IntPtr IRVector_Repeat(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_Reverse__SWIG_0")]
  public static extern void IRVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_Reverse__SWIG_1")]
  public static extern void IRVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IRVector_SetRange")]
  public static extern void IRVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_IRVector")]
  public static extern void delete_IRVector(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndexedReal_ind_set")]
  public static extern void IndexedReal_ind_set(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndexedReal_ind_get")]
  public static extern int IndexedReal_ind_get(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndexedReal_val_set")]
  public static extern void IndexedReal_val_set(HandleRef jarg1, double jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndexedReal_val_get")]
  public static extern double IndexedReal_val_get(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_IndexedReal")]
  public static extern IntPtr new_IndexedReal();

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_IndexedReal")]
  public static extern void delete_IndexedReal(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_IndexedRealVector")]
  public static extern IntPtr new_IndexedRealVector();

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_IndexedRealVector")]
  public static extern void delete_IndexedRealVector(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocumentManager_getDoc")]
  public static extern string DocumentManager_getDoc(HandleRef jarg1, string jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_DocumentManager_docElement")]
  public static extern string DocumentManager_docElement(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_DocumentManager")]
  public static extern void delete_DocumentManager(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_open")]
  public static extern bool Index_open(HandleRef jarg1, string jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_term__SWIG_0")]
  public static extern int Index_term__SWIG_0(HandleRef jarg1, string jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_term__SWIG_1")]
  public static extern string Index_term__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_document__SWIG_0")]
  public static extern int Index_document__SWIG_0(HandleRef jarg1, string jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_document__SWIG_1")]
  public static extern string Index_document__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_docManager")]
  public static extern IntPtr Index_docManager(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_docCount__SWIG_0")]
  public static extern int Index_docCount__SWIG_0(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_termCountUnique")]
  public static extern int Index_termCountUnique(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_termCount__SWIG_0")]
  public static extern int Index_termCount__SWIG_0(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_termCount__SWIG_1")]
  public static extern int Index_termCount__SWIG_1(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_docLengthAvg")]
  public static extern float Index_docLengthAvg(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_docCount__SWIG_1")]
  public static extern int Index_docCount__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_docLength")]
  public static extern int Index_docLength(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_docInfoList")]
  public static extern IntPtr Index_docInfoList(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_termInfoList")]
  public static extern IntPtr Index_termInfoList(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_termInfoListSeq")]
  public static extern IntPtr Index_termInfoListSeq(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Index_setProps")]
  public static extern void Index_setProps(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_Index")]
  public static extern void delete_Index(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndexManager_openIndex")]
  public static extern IntPtr IndexManager_openIndex(string jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_IndexManager")]
  public static extern IntPtr new_IndexManager();

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_IndexManager")]
  public static extern void delete_IndexManager(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_QueryRep")]
  public static extern IntPtr new_QueryRep();

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_QueryRep")]
  public static extern void delete_QueryRep(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Query_makeQuery__SWIG_0")]
  public static extern IntPtr Query_makeQuery__SWIG_0(string jarg1, string jarg2, string jarg3, string jarg4, string jarg5);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Query_makeQuery__SWIG_1")]
  public static extern IntPtr Query_makeQuery__SWIG_1(string jarg1, string jarg2, string jarg3, string jarg4);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Query_makeQuery__SWIG_2")]
  public static extern IntPtr Query_makeQuery__SWIG_2(string jarg1, string jarg2, string jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Query_makeQuery__SWIG_3")]
  public static extern IntPtr Query_makeQuery__SWIG_3(string jarg1, string jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_Query_makeQuery__SWIG_4")]
  public static extern IntPtr Query_makeQuery__SWIG_4(string jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_Query")]
  public static extern IntPtr new_Query();

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_Query")]
  public static extern void delete_Query(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetrievalMethod_scoreCollection")]
  public static extern void RetrievalMethod_scoreCollection(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetrievalMethod_updateQuery")]
  public static extern void RetrievalMethod_updateQuery(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_RetrievalMethod")]
  public static extern void delete_RetrievalMethod(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_TextQueryRetMethod")]
  public static extern void delete_TextQueryRetMethod(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_StructQueryRetMethod")]
  public static extern void delete_StructQueryRetMethod(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_IndriRetMethod")]
  public static extern void delete_IndriRetMethod(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_createModel__SWIG_0")]
  public static extern IntPtr RetMethodManager_createModel__SWIG_0(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_createModel__SWIG_1")]
  public static extern IntPtr RetMethodManager_createModel__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runTextQuery__SWIG_0")]
  public static extern IntPtr RetMethodManager_runTextQuery__SWIG_0(string jarg1, HandleRef jarg2, string jarg3, string jarg4, string jarg5, string jarg6);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runTextQuery__SWIG_1")]
  public static extern IntPtr RetMethodManager_runTextQuery__SWIG_1(string jarg1, HandleRef jarg2, string jarg3, string jarg4, string jarg5);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runTextQuery__SWIG_2")]
  public static extern IntPtr RetMethodManager_runTextQuery__SWIG_2(string jarg1, HandleRef jarg2, string jarg3, string jarg4);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runTextQuery__SWIG_3")]
  public static extern IntPtr RetMethodManager_runTextQuery__SWIG_3(string jarg1, HandleRef jarg2, string jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runTextQuery__SWIG_4")]
  public static extern IntPtr RetMethodManager_runTextQuery__SWIG_4(string jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runStructQuery__SWIG_0")]
  public static extern IntPtr RetMethodManager_runStructQuery__SWIG_0(string jarg1, HandleRef jarg2, string jarg3, string jarg4, string jarg5, string jarg6);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runStructQuery__SWIG_1")]
  public static extern IntPtr RetMethodManager_runStructQuery__SWIG_1(string jarg1, HandleRef jarg2, string jarg3, string jarg4, string jarg5);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runStructQuery__SWIG_2")]
  public static extern IntPtr RetMethodManager_runStructQuery__SWIG_2(string jarg1, HandleRef jarg2, string jarg3, string jarg4);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runStructQuery__SWIG_3")]
  public static extern IntPtr RetMethodManager_runStructQuery__SWIG_3(string jarg1, HandleRef jarg2, string jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runStructQuery__SWIG_4")]
  public static extern IntPtr RetMethodManager_runStructQuery__SWIG_4(string jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runIndriQuery")]
  public static extern IntPtr RetMethodManager_runIndriQuery(string jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_RetMethodManager_runQuery")]
  public static extern IntPtr RetMethodManager_runQuery(string jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_ArrayAccumulator")]
  public static extern IntPtr new_ArrayAccumulator(int jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_ArrayAccumulator")]
  public static extern void delete_ArrayAccumulator(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_Clear")]
  public static extern void TMatchVector_Clear(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_Add")]
  public static extern void TMatchVector_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_size")]
  public static extern uint TMatchVector_size(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_capacity")]
  public static extern uint TMatchVector_capacity(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_reserve")]
  public static extern void TMatchVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_TMatchVector__SWIG_0")]
  public static extern IntPtr new_TMatchVector__SWIG_0();

  [DllImport("lemur_csharp", EntryPoint="CSharp_new_TMatchVector__SWIG_1")]
  public static extern IntPtr new_TMatchVector__SWIG_1(int jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_getitemcopy")]
  public static extern IntPtr TMatchVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_getitem")]
  public static extern IntPtr TMatchVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_setitem")]
  public static extern void TMatchVector_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_AddRange")]
  public static extern void TMatchVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_GetRange")]
  public static extern IntPtr TMatchVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_Insert")]
  public static extern void TMatchVector_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_InsertRange")]
  public static extern void TMatchVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_RemoveAt")]
  public static extern void TMatchVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_RemoveRange")]
  public static extern void TMatchVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_Repeat")]
  public static extern IntPtr TMatchVector_Repeat(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_Reverse__SWIG_0")]
  public static extern void TMatchVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_Reverse__SWIG_1")]
  public static extern void TMatchVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatchVector_SetRange")]
  public static extern void TMatchVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_delete_TMatchVector")]
  public static extern void delete_TMatchVector(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_tid_set")]
  public static extern void TMatch_tid_set(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_tid_get")]
  public static extern int TMatch_tid_get(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_start_set")]
  public static extern void TMatch_start_set(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_start_get")]
  public static extern int TMatch_start_get(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_end_set")]
  public static extern void TMatch_end_set(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_end_get")]
  public static extern int TMatch_end_get(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_position_set")]
  public static extern void TMatch_position_set(HandleRef jarg1, int jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TMatch_position_get")]
  public static extern int TMatch_position_get(HandleRef jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_MatchInfo_getMatches")]
  public static extern IntPtr MatchInfo_getMatches(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("lemur_csharp", EntryPoint="CSharp_ParamSet")]
  public static extern void ParamSet(string jarg1, string jarg2);

  [DllImport("lemur_csharp", EntryPoint="CSharp_ParamClear")]
  public static extern void ParamClear();

  [DllImport("lemur_csharp", EntryPoint="CSharp_ParamPushFile")]
  public static extern int ParamPushFile(string jarg1);

  [DllImport("lemur_csharp", EntryPoint="CSharp_ParamPopFile")]
  public static extern string ParamPopFile();

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndexedRealVectorUpcast")]
  public static extern IntPtr IndexedRealVectorUpcast(IntPtr objectRef);

  [DllImport("lemur_csharp", EntryPoint="CSharp_TextQueryRetMethodUpcast")]
  public static extern IntPtr TextQueryRetMethodUpcast(IntPtr objectRef);

  [DllImport("lemur_csharp", EntryPoint="CSharp_StructQueryRetMethodUpcast")]
  public static extern IntPtr StructQueryRetMethodUpcast(IntPtr objectRef);

  [DllImport("lemur_csharp", EntryPoint="CSharp_IndriRetMethodUpcast")]
  public static extern IntPtr IndriRetMethodUpcast(IntPtr objectRef);

  [DllImport("lemur_csharp", EntryPoint="CSharp_ArrayAccumulatorUpcast")]
  public static extern IntPtr ArrayAccumulatorUpcast(IntPtr objectRef);

  [DllImport("lemur_csharp", EntryPoint="CSharp_MatchInfoUpcast")]
  public static extern IntPtr MatchInfoUpcast(IntPtr objectRef);
}

}
