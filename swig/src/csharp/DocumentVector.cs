/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Indri {

using System;
using System.Runtime.InteropServices;

public class DocumentVector : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DocumentVector(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DocumentVector obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DocumentVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          indri_csharpPINVOKE.delete_DocumentVector(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public StringVector stems() {
    StringVector ret = new StringVector(indri_csharpPINVOKE.DocumentVector_stems(swigCPtr), false);
    return ret;
  }

  public IntVector positions() {
    IntVector ret = new IntVector(indri_csharpPINVOKE.DocumentVector_positions(swigCPtr), false);
    return ret;
  }

  public FieldVector fields() {
    FieldVector ret = new FieldVector(indri_csharpPINVOKE.DocumentVector_fields(swigCPtr), false);
    return ret;
  }

  public DocumentVector() : this(indri_csharpPINVOKE.new_DocumentVector(), true) {
  }

}

}
