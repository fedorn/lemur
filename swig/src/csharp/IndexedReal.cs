/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Lemur {

using System;
using System.Runtime.InteropServices;

public class IndexedReal : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IndexedReal(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IndexedReal obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IndexedReal() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        lemur_csharpPINVOKE.delete_IndexedReal(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public int ind {
    set {
      lemur_csharpPINVOKE.IndexedReal_ind_set(swigCPtr, value);
    } 
    get {
      int ret = lemur_csharpPINVOKE.IndexedReal_ind_get(swigCPtr);
      return ret;
    } 
  }

  public double val {
    set {
      lemur_csharpPINVOKE.IndexedReal_val_set(swigCPtr, value);
    } 
    get {
      double ret = lemur_csharpPINVOKE.IndexedReal_val_get(swigCPtr);
      return ret;
    } 
  }

  public IndexedReal() : this(lemur_csharpPINVOKE.new_IndexedReal(), true) {
  }

}

}
