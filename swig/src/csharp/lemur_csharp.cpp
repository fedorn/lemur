/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_lemur_csharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_lemur_csharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_lemur_csharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




  // includes for the lemur classes
  // could be put in the various individual .i files
#include "IndexManager.hpp"
#include "BasicCollectionProps.hpp"
#include "RetMethodManager.hpp"
#include "StructQueryRetMethod.hpp"
#include "TextQueryRetMethod.hpp"
#include "MatchInfo.hpp"
#include "ElemDocMgr.hpp"
  

#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>

SWIGINTERN std::vector< lemur::api::IndexedReal > *new_std_vector_Sl_lemur_api_IndexedReal_Sg___SWIG_1(int capacity){
        std::vector<lemur::api::IndexedReal >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<lemur::api::IndexedReal >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN lemur::api::IndexedReal std_vector_Sl_lemur_api_IndexedReal_Sg__getitemcopy(std::vector< lemur::api::IndexedReal > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< lemur::api::IndexedReal >::const_reference std_vector_Sl_lemur_api_IndexedReal_Sg__getitem(std::vector< lemur::api::IndexedReal > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__setitem(std::vector< lemur::api::IndexedReal > *self,int index,std::vector< lemur::api::IndexedReal >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__AddRange(std::vector< lemur::api::IndexedReal > *self,std::vector< lemur::api::IndexedReal > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< lemur::api::IndexedReal > *std_vector_Sl_lemur_api_IndexedReal_Sg__GetRange(std::vector< lemur::api::IndexedReal > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<lemur::api::IndexedReal >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__Insert(std::vector< lemur::api::IndexedReal > *self,int index,std::vector< lemur::api::IndexedReal >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__InsertRange(std::vector< lemur::api::IndexedReal > *self,int index,std::vector< lemur::api::IndexedReal > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__RemoveAt(std::vector< lemur::api::IndexedReal > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__RemoveRange(std::vector< lemur::api::IndexedReal > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< lemur::api::IndexedReal > *std_vector_Sl_lemur_api_IndexedReal_Sg__Repeat(std::vector< lemur::api::IndexedReal >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<lemur::api::IndexedReal >(count, value);
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__Reverse__SWIG_0(std::vector< lemur::api::IndexedReal > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__Reverse__SWIG_1(std::vector< lemur::api::IndexedReal > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_lemur_api_IndexedReal_Sg__SetRange(std::vector< lemur::api::IndexedReal > *self,int index,std::vector< lemur::api::IndexedReal > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN char *lemur_api_DocumentManager_docElement(lemur::api::DocumentManager *self,std::string const &docid,std::string const &elt){
            lemur::parse::ElemDocMgr *dm = dynamic_cast<lemur::parse::ElemDocMgr *>(self);
            if (dm)
              return dm->getElement(docid.c_str(), elt.c_str());
            else
              return NULL;
          }
SWIGINTERN void lemur_api_Index_setProps(lemur::api::Index *self){
            const lemur::parse::BasicCollectionProps* props = dynamic_cast<const lemur::parse::BasicCollectionProps*> (self->collectionProps());
            if (props) {
              const lemur::parse::Property* p = NULL;
              props->startIteration();
              while (props->hasMore()) {
                p = props->nextEntry();
                if (p->getType() == lemur::parse::Property::STRING) 
                  lemur::api::ParamSet(p->getName(),(char*)p->getValue());
              }
            }
          }
SWIGINTERN lemur::api::Query *lemur_api_Query_makeQuery__SWIG_0(std::string query,std::string const &stopfile="",std::string const &stemtype="",std::string const &datadir="",std::string const &func=""){
          lemur::api::Stopper* stopper = lemur::api::TextHandlerManager::createStopper(stopfile);
          lemur::api::Stemmer* stemmer = lemur::api::TextHandlerManager::createStemmer(stemtype, datadir, func);
          lemur::parse::StringQuery* parser = NULL;
          lemur::parse::StringQuery* qryterms;
          lemur::api::TextHandler* chain;

          if (stopper || stemmer) {
            parser = new lemur::parse::StringQuery();
            chain = parser;
            qryterms = new lemur::parse::StringQuery();

            if (stopper) {
              chain->setTextHandler(stopper);
              chain=stopper;
            }
    
            if (stemmer) {
              chain->setTextHandler(stemmer);    
              chain=stemmer;
            }
    
            chain->setTextHandler(qryterms);
            parser->parse(query);

            delete(parser);
    
          } else {
            qryterms = new lemur::parse::StringQuery(query);
          }
          return qryterms;
        }
SWIGINTERN lemur::api::IndexedRealVector *lemur_api_RetMethodManager_runIndriQuery(std::string const &query,lemur::retrieval::IndriRetMethod *model){
          lemur::api::IndexedRealVector *tmp = new lemur::api::IndexedRealVector();
          model->scoreCollection(query, *tmp);
          return tmp;
        }
SWIGINTERN lemur::api::IndexedRealVector *lemur_api_RetMethodManager_runQuery(std::string const &query,lemur::api::RetrievalMethod *model){
          lemur::api::TextQueryRetMethod *t = dynamic_cast<lemur::api::TextQueryRetMethod*>(model);
          lemur::api::StructQueryRetMethod *s = dynamic_cast<lemur::api::StructQueryRetMethod*>(model);
          lemur::retrieval::IndriRetMethod *ind = dynamic_cast<lemur::retrieval::IndriRetMethod*>(model);
          if (t)
            return lemur::api::RetMethodManager::runTextQuery(query, t);
          if (s)
            return lemur::api::RetMethodManager::runStructQuery(query, s);
          if (ind) {
            lemur::api::IndexedRealVector *tmp = new lemur::api::IndexedRealVector();
            ind->scoreCollection(query, *tmp);
            return tmp;
          }
          return NULL;
        }
SWIGINTERN std::vector< lemur::api::TMatch > *new_std_vector_Sl_lemur_api_TMatch_Sg___SWIG_1(int capacity){
        std::vector<lemur::api::TMatch >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<lemur::api::TMatch >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN lemur::api::TMatch std_vector_Sl_lemur_api_TMatch_Sg__getitemcopy(std::vector< lemur::api::TMatch > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< lemur::api::TMatch >::const_reference std_vector_Sl_lemur_api_TMatch_Sg__getitem(std::vector< lemur::api::TMatch > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__setitem(std::vector< lemur::api::TMatch > *self,int index,std::vector< lemur::api::TMatch >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__AddRange(std::vector< lemur::api::TMatch > *self,std::vector< lemur::api::TMatch > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< lemur::api::TMatch > *std_vector_Sl_lemur_api_TMatch_Sg__GetRange(std::vector< lemur::api::TMatch > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<lemur::api::TMatch >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__Insert(std::vector< lemur::api::TMatch > *self,int index,std::vector< lemur::api::TMatch >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__InsertRange(std::vector< lemur::api::TMatch > *self,int index,std::vector< lemur::api::TMatch > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__RemoveAt(std::vector< lemur::api::TMatch > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__RemoveRange(std::vector< lemur::api::TMatch > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< lemur::api::TMatch > *std_vector_Sl_lemur_api_TMatch_Sg__Repeat(std::vector< lemur::api::TMatch >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<lemur::api::TMatch >(count, value);
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__Reverse__SWIG_0(std::vector< lemur::api::TMatch > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__Reverse__SWIG_1(std::vector< lemur::api::TMatch > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_lemur_api_TMatch_Sg__SetRange(std::vector< lemur::api::TMatch > *self,int index,std::vector< lemur::api::TMatch > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_TermInfo(int jarg1, int jarg2) {
  void * jresult ;
  lemur::api::TERMID_T arg1 ;
  lemur::api::COUNT_T arg2 ;
  lemur::api::TermInfo *result = 0 ;
  
  arg1 = (lemur::api::TERMID_T)jarg1; 
  arg2 = (lemur::api::COUNT_T)jarg2; 
  result = (lemur::api::TermInfo *)new lemur::api::TermInfo(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TermInfo_termID(void * jarg1) {
  int jresult ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::TERMID_T result;
  
  arg1 = (lemur::api::TermInfo *)jarg1; 
  result = (lemur::api::TERMID_T)((lemur::api::TermInfo const *)arg1)->termID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TermInfo_count(void * jarg1) {
  int jresult ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::TermInfo *)jarg1; 
  result = (lemur::api::COUNT_T)((lemur::api::TermInfo const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TermInfo_positions(void * jarg1) {
  int * jresult ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::LOC_T *result = 0 ;
  
  arg1 = (lemur::api::TermInfo *)jarg1; 
  result = (lemur::api::LOC_T *)((lemur::api::TermInfo const *)arg1)->positions();
  {
    int * val = result;
    std::vector<int> *retval = new std::vector<int>();
    int count = arg1->count();
    for (int i = 0; i < count; i++) retval->push_back(val[i]);
    jresult = (int *)retval;
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TermInfo_position(void * jarg1) {
  int jresult ;
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  lemur::api::LOC_T result;
  
  arg1 = (lemur::api::TermInfo *)jarg1; 
  result = (lemur::api::LOC_T)((lemur::api::TermInfo const *)arg1)->position();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TermInfo(void * jarg1) {
  lemur::api::TermInfo *arg1 = (lemur::api::TermInfo *) 0 ;
  
  arg1 = (lemur::api::TermInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermInfoList_startIteration(void * jarg1) {
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  
  arg1 = (lemur::api::TermInfoList *)jarg1; 
  ((lemur::api::TermInfoList const *)arg1)->startIteration();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TermInfoList_hasMore(void * jarg1) {
  unsigned int jresult ;
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  bool result;
  
  arg1 = (lemur::api::TermInfoList *)jarg1; 
  result = (bool)((lemur::api::TermInfoList const *)arg1)->hasMore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TermInfoList_nextEntry(void * jarg1) {
  void * jresult ;
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  lemur::api::TermInfo *result = 0 ;
  
  arg1 = (lemur::api::TermInfoList *)jarg1; 
  result = (lemur::api::TermInfo *)((lemur::api::TermInfoList const *)arg1)->nextEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TermInfoList(void * jarg1) {
  lemur::api::TermInfoList *arg1 = (lemur::api::TermInfoList *) 0 ;
  
  arg1 = (lemur::api::TermInfoList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DocInfo(int jarg1, int jarg2) {
  void * jresult ;
  lemur::api::DOCID_T arg1 ;
  lemur::api::COUNT_T arg2 ;
  lemur::api::DocInfo *result = 0 ;
  
  arg1 = (lemur::api::DOCID_T)jarg1; 
  arg2 = (lemur::api::COUNT_T)jarg2; 
  result = (lemur::api::DocInfo *)new lemur::api::DocInfo(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DocInfo_docID(void * jarg1) {
  int jresult ;
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  lemur::api::DOCID_T result;
  
  arg1 = (lemur::api::DocInfo *)jarg1; 
  result = (lemur::api::DOCID_T)((lemur::api::DocInfo const *)arg1)->docID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DocInfo_termCount(void * jarg1) {
  int jresult ;
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::DocInfo *)jarg1; 
  result = (lemur::api::COUNT_T)((lemur::api::DocInfo const *)arg1)->termCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_DocInfo_positions(void * jarg1) {
  int * jresult ;
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  lemur::api::LOC_T *result = 0 ;
  
  arg1 = (lemur::api::DocInfo *)jarg1; 
  result = (lemur::api::LOC_T *)((lemur::api::DocInfo const *)arg1)->positions();
  {
    int * val = result;
    std::vector<int> *retval = new std::vector<int>();
    int count = arg1->termCount();
    for (int i = 0; i < count; i++) retval->push_back(val[i]);
    jresult = (int *)retval;
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DocInfo(void * jarg1) {
  lemur::api::DocInfo *arg1 = (lemur::api::DocInfo *) 0 ;
  
  arg1 = (lemur::api::DocInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocInfoList_startIteration(void * jarg1) {
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  
  arg1 = (lemur::api::DocInfoList *)jarg1; 
  ((lemur::api::DocInfoList const *)arg1)->startIteration();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DocInfoList_hasMore(void * jarg1) {
  unsigned int jresult ;
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  bool result;
  
  arg1 = (lemur::api::DocInfoList *)jarg1; 
  result = (bool)((lemur::api::DocInfoList const *)arg1)->hasMore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocInfoList_nextEntry(void * jarg1) {
  void * jresult ;
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  lemur::api::DocInfo *result = 0 ;
  
  arg1 = (lemur::api::DocInfoList *)jarg1; 
  result = (lemur::api::DocInfo *)((lemur::api::DocInfoList const *)arg1)->nextEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DocInfoList(void * jarg1) {
  lemur::api::DocInfoList *arg1 = (lemur::api::DocInfoList *) 0 ;
  
  arg1 = (lemur::api::DocInfoList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_Clear(void * jarg1) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_Add(void * jarg1, void * jarg2) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  std::vector< lemur::api::IndexedReal >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (std::vector< lemur::api::IndexedReal >::value_type *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< lemur::api::IndexedReal >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IRVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  std::vector< lemur::api::IndexedReal >::size_type result;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  result = ((std::vector< lemur::api::IndexedReal > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IRVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  std::vector< lemur::api::IndexedReal >::size_type result;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  result = ((std::vector< lemur::api::IndexedReal > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  std::vector< lemur::api::IndexedReal >::size_type arg2 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (std::vector< lemur::api::IndexedReal >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IRVector__SWIG_0() {
  void * jresult ;
  std::vector< lemur::api::IndexedReal > *result = 0 ;
  
  result = (std::vector< lemur::api::IndexedReal > *)new std::vector< lemur::api::IndexedReal >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IRVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< lemur::api::IndexedReal > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< lemur::api::IndexedReal > *)new_std_vector_Sl_lemur_api_IndexedReal_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  lemur::api::IndexedReal result;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_lemur_api_IndexedReal_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new lemur::api::IndexedReal((const lemur::api::IndexedReal &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::IndexedReal >::value_type *result = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< lemur::api::IndexedReal >::const_reference _result_ref = std_vector_Sl_lemur_api_IndexedReal_Sg__getitem(arg1,arg2);
      result = (std::vector< lemur::api::IndexedReal >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::IndexedReal >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::IndexedReal >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__setitem(arg1,arg2,(lemur::api::IndexedReal const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  std::vector< lemur::api::IndexedReal > *arg2 = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (std::vector< lemur::api::IndexedReal > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_lemur_api_IndexedReal_Sg__AddRange(arg1,(std::vector< lemur::api::IndexedReal > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< lemur::api::IndexedReal > *result = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< lemur::api::IndexedReal > *)std_vector_Sl_lemur_api_IndexedReal_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::IndexedReal >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::IndexedReal >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__Insert(arg1,arg2,(lemur::api::IndexedReal const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::IndexedReal > *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::IndexedReal > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__InsertRange(arg1,arg2,(std::vector< lemur::api::IndexedReal > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< lemur::api::IndexedReal >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< lemur::api::IndexedReal > *result = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal >::value_type *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal >::value_type const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< lemur::api::IndexedReal > *)std_vector_Sl_lemur_api_IndexedReal_Sg__Repeat((lemur::api::IndexedReal const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  std_vector_Sl_lemur_api_IndexedReal_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::IndexedReal > *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::IndexedReal > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::IndexedReal > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_IndexedReal_Sg__SetRange(arg1,arg2,(std::vector< lemur::api::IndexedReal > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRVector(void * jarg1) {
  std::vector< lemur::api::IndexedReal > *arg1 = (std::vector< lemur::api::IndexedReal > *) 0 ;
  
  arg1 = (std::vector< lemur::api::IndexedReal > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexedReal_ind_set(void * jarg1, int jarg2) {
  lemur::api::IndexedReal *arg1 = (lemur::api::IndexedReal *) 0 ;
  int arg2 ;
  
  arg1 = (lemur::api::IndexedReal *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ind = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IndexedReal_ind_get(void * jarg1) {
  int jresult ;
  lemur::api::IndexedReal *arg1 = (lemur::api::IndexedReal *) 0 ;
  int result;
  
  arg1 = (lemur::api::IndexedReal *)jarg1; 
  result = (int) ((arg1)->ind);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexedReal_val_set(void * jarg1, double jarg2) {
  lemur::api::IndexedReal *arg1 = (lemur::api::IndexedReal *) 0 ;
  double arg2 ;
  
  arg1 = (lemur::api::IndexedReal *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->val = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IndexedReal_val_get(void * jarg1) {
  double jresult ;
  lemur::api::IndexedReal *arg1 = (lemur::api::IndexedReal *) 0 ;
  double result;
  
  arg1 = (lemur::api::IndexedReal *)jarg1; 
  result = (double) ((arg1)->val);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IndexedReal() {
  void * jresult ;
  lemur::api::IndexedReal *result = 0 ;
  
  result = (lemur::api::IndexedReal *)new lemur::api::IndexedReal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IndexedReal(void * jarg1) {
  lemur::api::IndexedReal *arg1 = (lemur::api::IndexedReal *) 0 ;
  
  arg1 = (lemur::api::IndexedReal *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IndexedRealVector() {
  void * jresult ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  result = (lemur::api::IndexedRealVector *)new lemur::api::IndexedRealVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IndexedRealVector(void * jarg1) {
  lemur::api::IndexedRealVector *arg1 = (lemur::api::IndexedRealVector *) 0 ;
  
  arg1 = (lemur::api::IndexedRealVector *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DocumentManager_getDoc(void * jarg1, char * jarg2) {
  char * jresult ;
  lemur::api::DocumentManager *arg1 = (lemur::api::DocumentManager *) 0 ;
  std::string *arg2 = 0 ;
  char *result = 0 ;
  
  arg1 = (lemur::api::DocumentManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (char *)((lemur::api::DocumentManager const *)arg1)->getDoc((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DocumentManager_docElement(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  lemur::api::DocumentManager *arg1 = (lemur::api::DocumentManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  char *result = 0 ;
  
  arg1 = (lemur::api::DocumentManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (char *)lemur_api_DocumentManager_docElement(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DocumentManager(void * jarg1) {
  lemur::api::DocumentManager *arg1 = (lemur::api::DocumentManager *) 0 ;
  
  arg1 = (lemur::api::DocumentManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Index_open(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (bool)(arg1)->open((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_term__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERM_T *arg2 = 0 ;
  lemur::api::TERMID_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (lemur::api::TERMID_T)((lemur::api::Index const *)arg1)->term((lemur::api::TERM_T const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Index_term__SWIG_1(void * jarg1, int jarg2) {
  char * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::TERM_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  try {
    result = ((lemur::api::Index const *)arg1)->term(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_document__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::EXDOCID_T *arg2 = 0 ;
  lemur::api::DOCID_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (lemur::api::DOCID_T)((lemur::api::Index const *)arg1)->document((lemur::api::EXDOCID_T const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Index_document__SWIG_1(void * jarg1, int jarg2) {
  char * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::EXDOCID_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  try {
    result = ((lemur::api::Index const *)arg1)->document(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Index_docManager(void * jarg1, int jarg2) {
  void * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::DocumentManager *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  try {
    result = (lemur::api::DocumentManager *)((lemur::api::Index const *)arg1)->docManager(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_docCount__SWIG_0(void * jarg1) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  try {
    result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->docCount();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_termCountUnique(void * jarg1) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  try {
    result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->termCountUnique();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_termCount__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  try {
    result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->termCount(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_termCount__SWIG_1(void * jarg1) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  try {
    result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->termCount();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Index_docLengthAvg(void * jarg1) {
  float jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  float result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  try {
    result = (float)((lemur::api::Index const *)arg1)->docLengthAvg();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_docCount__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  try {
    result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->docCount(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Index_docLength(void * jarg1, int jarg2) {
  int jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::COUNT_T result;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  try {
    result = (lemur::api::COUNT_T)((lemur::api::Index const *)arg1)->docLength(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Index_docInfoList(void * jarg1, int jarg2) {
  void * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::TERMID_T arg2 ;
  lemur::api::DocInfoList *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::TERMID_T)jarg2; 
  try {
    result = (lemur::api::DocInfoList *)((lemur::api::Index const *)arg1)->docInfoList(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Index_termInfoList(void * jarg1, int jarg2) {
  void * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::TermInfoList *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  try {
    result = (lemur::api::TermInfoList *)((lemur::api::Index const *)arg1)->termInfoList(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Index_termInfoListSeq(void * jarg1, int jarg2) {
  void * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::DOCID_T arg2 ;
  lemur::api::TermInfoList *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::DOCID_T)jarg2; 
  try {
    result = (lemur::api::TermInfoList *)((lemur::api::Index const *)arg1)->termInfoListSeq(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Index_setProps(void * jarg1) {
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  lemur_api_Index_setProps(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Index(void * jarg1) {
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IndexManager_openIndex(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::Index *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  try {
    result = (lemur::api::Index *)lemur::api::IndexManager::openIndex((std::string const &)*arg1);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IndexManager() {
  void * jresult ;
  lemur::api::IndexManager *result = 0 ;
  
  result = (lemur::api::IndexManager *)new lemur::api::IndexManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IndexManager(void * jarg1) {
  lemur::api::IndexManager *arg1 = (lemur::api::IndexManager *) 0 ;
  
  arg1 = (lemur::api::IndexManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QueryRep() {
  void * jresult ;
  lemur::api::QueryRep *result = 0 ;
  
  result = (lemur::api::QueryRep *)new lemur::api::QueryRep();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QueryRep(void * jarg1) {
  lemur::api::QueryRep *arg1 = (lemur::api::QueryRep *) 0 ;
  
  arg1 = (lemur::api::QueryRep *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Query_makeQuery__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  lemur::api::Query *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  try {
    result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Query_makeQuery__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  lemur::api::Query *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  try {
    result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Query_makeQuery__SWIG_2(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  lemur::api::Query *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Query_makeQuery__SWIG_3(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  lemur::api::Query *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1,(std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Query_makeQuery__SWIG_4(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  lemur::api::Query *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  try {
    result = (lemur::api::Query *)lemur_api_Query_makeQuery__SWIG_0(arg1);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Query() {
  void * jresult ;
  lemur::api::Query *result = 0 ;
  
  result = (lemur::api::Query *)new lemur::api::Query();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Query(void * jarg1) {
  lemur::api::Query *arg1 = (lemur::api::Query *) 0 ;
  
  arg1 = (lemur::api::Query *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RetrievalMethod_scoreCollection(void * jarg1, void * jarg2, void * jarg3) {
  lemur::api::RetrievalMethod *arg1 = (lemur::api::RetrievalMethod *) 0 ;
  lemur::api::QueryRep *arg2 = 0 ;
  lemur::api::IndexedRealVector *arg3 = 0 ;
  
  arg1 = (lemur::api::RetrievalMethod *)jarg1; 
  arg2 = (lemur::api::QueryRep *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lemur::api::QueryRep const & type is null", 0);
    return ;
  } 
  arg3 = (lemur::api::IndexedRealVector *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lemur::api::IndexedRealVector & type is null", 0);
    return ;
  } 
  try {
    (arg1)->scoreCollection((lemur::api::QueryRep const &)*arg2,*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RetrievalMethod_updateQuery(void * jarg1, void * jarg2, void * jarg3) {
  lemur::api::RetrievalMethod *arg1 = (lemur::api::RetrievalMethod *) 0 ;
  lemur::api::QueryRep *arg2 = 0 ;
  lemur::api::DocIDSet *arg3 = 0 ;
  
  arg1 = (lemur::api::RetrievalMethod *)jarg1; 
  arg2 = (lemur::api::QueryRep *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lemur::api::QueryRep & type is null", 0);
    return ;
  } 
  arg3 = (lemur::api::DocIDSet *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lemur::api::DocIDSet const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->updateQuery(*arg2,(lemur::api::DocIDSet const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RetrievalMethod(void * jarg1) {
  lemur::api::RetrievalMethod *arg1 = (lemur::api::RetrievalMethod *) 0 ;
  
  arg1 = (lemur::api::RetrievalMethod *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TextQueryRetMethod(void * jarg1) {
  lemur::api::TextQueryRetMethod *arg1 = (lemur::api::TextQueryRetMethod *) 0 ;
  
  arg1 = (lemur::api::TextQueryRetMethod *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StructQueryRetMethod(void * jarg1) {
  lemur::api::StructQueryRetMethod *arg1 = (lemur::api::StructQueryRetMethod *) 0 ;
  
  arg1 = (lemur::api::StructQueryRetMethod *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IndriRetMethod(void * jarg1) {
  lemur::retrieval::IndriRetMethod *arg1 = (lemur::retrieval::IndriRetMethod *) 0 ;
  
  arg1 = (lemur::retrieval::IndriRetMethod *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_createModel__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::ScoreAccumulator *arg2 = (lemur::api::ScoreAccumulator *) 0 ;
  std::string arg3 ;
  lemur::api::RetrievalMethod *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::ScoreAccumulator *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  try {
    result = (lemur::api::RetrievalMethod *)lemur::api::RetMethodManager::createModel((lemur::api::Index const *)arg1,arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_createModel__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  lemur::api::Index *arg1 = (lemur::api::Index *) 0 ;
  lemur::api::ScoreAccumulator *arg2 = (lemur::api::ScoreAccumulator *) 0 ;
  lemur::api::RetrievalMethod *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1; 
  arg2 = (lemur::api::ScoreAccumulator *)jarg2; 
  try {
    result = (lemur::api::RetrievalMethod *)lemur::api::RetMethodManager::createModel((lemur::api::Index const *)arg1,arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runTextQuery__SWIG_0(char * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::TextQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runTextQuery__SWIG_1(char * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::TextQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runTextQuery__SWIG_2(char * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::TextQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runTextQuery__SWIG_3(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::TextQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runTextQuery__SWIG_4(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::TextQueryRetMethod *arg2 = (lemur::api::TextQueryRetMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::TextQueryRetMethod *)jarg2; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runTextQuery((std::string const &)*arg1,arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runStructQuery__SWIG_0(char * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::StructQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runStructQuery__SWIG_1(char * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::StructQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runStructQuery__SWIG_2(char * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::StructQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runStructQuery__SWIG_3(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  std::string *arg3 = 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::StructQueryRetMethod *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runStructQuery__SWIG_4(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::StructQueryRetMethod *arg2 = (lemur::api::StructQueryRetMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::StructQueryRetMethod *)jarg2; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur::api::RetMethodManager::runStructQuery((std::string const &)*arg1,arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runIndriQuery(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::retrieval::IndriRetMethod *arg2 = (lemur::retrieval::IndriRetMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::retrieval::IndriRetMethod *)jarg2; 
  try {
    result = (lemur::api::IndexedRealVector *)lemur_api_RetMethodManager_runIndriQuery((std::string const &)*arg1,arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetMethodManager_runQuery(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  lemur::api::RetrievalMethod *arg2 = (lemur::api::RetrievalMethod *) 0 ;
  lemur::api::IndexedRealVector *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (lemur::api::RetrievalMethod *)jarg2; 
  result = (lemur::api::IndexedRealVector *)lemur_api_RetMethodManager_runQuery((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayAccumulator(int jarg1) {
  void * jresult ;
  int arg1 ;
  lemur::retrieval::ArrayAccumulator *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (lemur::retrieval::ArrayAccumulator *)new lemur::retrieval::ArrayAccumulator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayAccumulator(void * jarg1) {
  lemur::retrieval::ArrayAccumulator *arg1 = (lemur::retrieval::ArrayAccumulator *) 0 ;
  
  arg1 = (lemur::retrieval::ArrayAccumulator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_Clear(void * jarg1) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_Add(void * jarg1, void * jarg2) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  std::vector< lemur::api::TMatch >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (std::vector< lemur::api::TMatch >::value_type *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< lemur::api::TMatch >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TMatchVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  std::vector< lemur::api::TMatch >::size_type result;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  result = ((std::vector< lemur::api::TMatch > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TMatchVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  std::vector< lemur::api::TMatch >::size_type result;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  result = ((std::vector< lemur::api::TMatch > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  std::vector< lemur::api::TMatch >::size_type arg2 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (std::vector< lemur::api::TMatch >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TMatchVector__SWIG_0() {
  void * jresult ;
  std::vector< lemur::api::TMatch > *result = 0 ;
  
  result = (std::vector< lemur::api::TMatch > *)new std::vector< lemur::api::TMatch >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TMatchVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< lemur::api::TMatch > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< lemur::api::TMatch > *)new_std_vector_Sl_lemur_api_TMatch_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TMatchVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  lemur::api::TMatch result;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_lemur_api_TMatch_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new lemur::api::TMatch((const lemur::api::TMatch &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TMatchVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::TMatch >::value_type *result = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< lemur::api::TMatch >::const_reference _result_ref = std_vector_Sl_lemur_api_TMatch_Sg__getitem(arg1,arg2);
      result = (std::vector< lemur::api::TMatch >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::TMatch >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::TMatch >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__setitem(arg1,arg2,(lemur::api::TMatch const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  std::vector< lemur::api::TMatch > *arg2 = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (std::vector< lemur::api::TMatch > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_lemur_api_TMatch_Sg__AddRange(arg1,(std::vector< lemur::api::TMatch > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TMatchVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< lemur::api::TMatch > *result = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< lemur::api::TMatch > *)std_vector_Sl_lemur_api_TMatch_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::TMatch >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::TMatch >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__Insert(arg1,arg2,(lemur::api::TMatch const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::TMatch > *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::TMatch > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__InsertRange(arg1,arg2,(std::vector< lemur::api::TMatch > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TMatchVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< lemur::api::TMatch >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< lemur::api::TMatch > *result = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch >::value_type *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch >::value_type const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< lemur::api::TMatch > *)std_vector_Sl_lemur_api_TMatch_Sg__Repeat((lemur::api::TMatch const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  std_vector_Sl_lemur_api_TMatch_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatchVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  int arg2 ;
  std::vector< lemur::api::TMatch > *arg3 = 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< lemur::api::TMatch > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< lemur::api::TMatch > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_lemur_api_TMatch_Sg__SetRange(arg1,arg2,(std::vector< lemur::api::TMatch > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TMatchVector(void * jarg1) {
  std::vector< lemur::api::TMatch > *arg1 = (std::vector< lemur::api::TMatch > *) 0 ;
  
  arg1 = (std::vector< lemur::api::TMatch > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatch_tid_set(void * jarg1, int jarg2) {
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int arg2 ;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TMatch_tid_get(void * jarg1) {
  int jresult ;
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int result;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  result = (int) ((arg1)->tid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatch_start_set(void * jarg1, int jarg2) {
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int arg2 ;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TMatch_start_get(void * jarg1) {
  int jresult ;
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int result;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  result = (int) ((arg1)->start);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatch_end_set(void * jarg1, int jarg2) {
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int arg2 ;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TMatch_end_get(void * jarg1) {
  int jresult ;
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int result;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  result = (int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMatch_position_set(void * jarg1, int jarg2) {
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int arg2 ;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TMatch_position_get(void * jarg1) {
  int jresult ;
  lemur::api::TMatch *arg1 = (lemur::api::TMatch *) 0 ;
  int result;
  
  arg1 = (lemur::api::TMatch *)jarg1; 
  result = (int) ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchInfo_getMatches(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  lemur::api::Index *arg1 = 0 ;
  lemur::api::Query *arg2 = 0 ;
  lemur::api::DOCID_T arg3 ;
  lemur::api::MatchInfo *result = 0 ;
  
  arg1 = (lemur::api::Index *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lemur::api::Index const & type is null", 0);
    return 0;
  } 
  arg2 = (lemur::api::Query *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lemur::api::Query const & type is null", 0);
    return 0;
  } 
  arg3 = (lemur::api::DOCID_T)jarg3; 
  result = (lemur::api::MatchInfo *)lemur::api::MatchInfo::getMatches((lemur::api::Index const &)*arg1,(lemur::api::Query const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet(char * jarg1, char * jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    lemur::api::ParamSet((std::string const &)*arg1,(std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamClear() {
  try {
    lemur::api::ParamClear();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_ParamPushFile(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  try {
    result = (int)lemur::api::ParamPushFile((std::string const &)*arg1);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParamPopFile() {
  char * jresult ;
  std::string result;
  
  try {
    result = lemur::api::ParamPopFile();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT std::vector< lemur::api::IndexedReal > * SWIGSTDCALL CSharp_IndexedRealVectorUpcast(lemur::api::IndexedRealVector *objectRef) {
    return (std::vector< lemur::api::IndexedReal > *)objectRef;
}

SWIGEXPORT lemur::api::RetrievalMethod * SWIGSTDCALL CSharp_TextQueryRetMethodUpcast(lemur::api::TextQueryRetMethod *objectRef) {
    return (lemur::api::RetrievalMethod *)objectRef;
}

SWIGEXPORT lemur::api::RetrievalMethod * SWIGSTDCALL CSharp_StructQueryRetMethodUpcast(lemur::api::StructQueryRetMethod *objectRef) {
    return (lemur::api::RetrievalMethod *)objectRef;
}

SWIGEXPORT lemur::api::RetrievalMethod * SWIGSTDCALL CSharp_IndriRetMethodUpcast(lemur::retrieval::IndriRetMethod *objectRef) {
    return (lemur::api::RetrievalMethod *)objectRef;
}

SWIGEXPORT lemur::api::ScoreAccumulator * SWIGSTDCALL CSharp_ArrayAccumulatorUpcast(lemur::retrieval::ArrayAccumulator *objectRef) {
    return (lemur::api::ScoreAccumulator *)objectRef;
}

SWIGEXPORT std::vector< lemur::api::TMatch > * SWIGSTDCALL CSharp_MatchInfoUpcast(lemur::api::MatchInfo *objectRef) {
    return (std::vector< lemur::api::TMatch > *)objectRef;
}

#ifdef __cplusplus
}
#endif

