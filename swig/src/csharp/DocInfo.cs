/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Lemur {

using System;
using System.Runtime.InteropServices;

public class DocInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DocInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DocInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DocInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        lemur_csharpPINVOKE.delete_DocInfo(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public DocInfo(int termID, int termCount) : this(lemur_csharpPINVOKE.new_DocInfo(termID, termCount), true) {
  }

  public int docID() {
    int ret = lemur_csharpPINVOKE.DocInfo_docID(swigCPtr);
    return ret;
  }

  public int termCount() {
    int ret = lemur_csharpPINVOKE.DocInfo_termCount(swigCPtr);
    return ret;
  }

  public int[] positions() {
  IntPtr ret = lemur_csharpPINVOKE.DocInfo_positions(swigCPtr);
  Indri.IntVector retvector = new Indri.IntVector(ret, true);
  int cnt = termCount();
  int[] retval = new int[cnt];
  int i = 0;
  foreach (int val in retvector) {
      retval[i++] = val;
  }
  return retval;
}

}

}
