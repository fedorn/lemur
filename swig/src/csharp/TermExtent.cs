/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Indri {

using System;
using System.Runtime.InteropServices;

public class TermExtent : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TermExtent(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TermExtent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TermExtent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          indri_csharpPINVOKE.delete_TermExtent(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int begin {
    set {
      indri_csharpPINVOKE.TermExtent_begin_set(swigCPtr, value);
    } 
    get {
      int ret = indri_csharpPINVOKE.TermExtent_begin_get(swigCPtr);
      return ret;
    } 
  }

  public int end {
    set {
      indri_csharpPINVOKE.TermExtent_end_set(swigCPtr, value);
    } 
    get {
      int ret = indri_csharpPINVOKE.TermExtent_end_get(swigCPtr);
      return ret;
    } 
  }

  public TermExtent() : this(indri_csharpPINVOKE.new_TermExtent(), true) {
  }

}

}
