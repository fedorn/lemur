/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Indri {

using System;
using System.Runtime.InteropServices;

public class TermExtent : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TermExtent(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TermExtent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TermExtent() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      indriPINVOKE.delete_TermExtent(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public int begin {
    set {
      indriPINVOKE.TermExtent_begin_set(swigCPtr, value);
    } 
    get {
      int ret = indriPINVOKE.TermExtent_begin_get(swigCPtr);
      return ret;
    } 
  }

  public int end {
    set {
      indriPINVOKE.TermExtent_end_set(swigCPtr, value);
    } 
    get {
      int ret = indriPINVOKE.TermExtent_end_get(swigCPtr);
      return ret;
    } 
  }

  public TermExtent() : this(indriPINVOKE.new_TermExtent(), true) {
  }

}

}
