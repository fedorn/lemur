/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_indri_csharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_indri_csharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_indri_csharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include "indri/indri-platform.h"
#include "lemur-compat.hpp"
#include "indri/QueryEnvironment.hpp"
#include "indri/QueryExpander.hpp"
#include "indri/RMExpander.hpp"
#include "indri/PonteExpander.hpp"
#include "indri/ScoredExtentResult.hpp"
#include "indri/ParsedDocument.hpp"
#include "indri/IndexEnvironment.hpp"
#include "indri/Parameters.hpp"
#include "indri/ConflationPattern.hpp"
#include "Exception.hpp"
  

#include <string>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_1(int capacity){
        std::vector<int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,std::vector< int >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,std::vector< int >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(std::vector< int >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,std::vector< int >::value_type const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,std::vector< int >::value_type const &value){
        int index = -1;
        std::vector<int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,std::vector< int >::value_type const &value){
        int index = -1;
        std::vector<int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN void std_vector_Sl_int_Sg__Remove(std::vector< int > *self,std::vector< int >::value_type const &value){
        std::vector<int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          self->erase(it);
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_1(int capacity){
        std::vector<std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::vector< std::string >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::vector< std::string >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::vector< std::string >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::vector< std::string >::value_type const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::vector< std::string >::value_type const &value){
        int index = -1;
        std::vector<std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::vector< std::string >::value_type const &value){
        int index = -1;
        std::vector<std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::vector< std::string >::value_type const &value){
        std::vector<std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          self->erase(it);
      }
SWIGINTERN std::string &std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__get(std::map< indri::parse::ConflationPattern *,std::string > *self,indri::parse::ConflationPattern *const &key){
                std::map<indri::parse::ConflationPattern *,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__set(std::map< indri::parse::ConflationPattern *,std::string > *self,indri::parse::ConflationPattern *const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__del(std::map< indri::parse::ConflationPattern *,std::string > *self,indri::parse::ConflationPattern *const &key){
                std::map<indri::parse::ConflationPattern *,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__has_key(std::map< indri::parse::ConflationPattern *,std::string > *self,indri::parse::ConflationPattern *const &key){
                std::map<indri::parse::ConflationPattern *,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< indri::api::ScoredExtentResult > &std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__get(std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *self,std::string const &key){
                std::map<std::string,std::vector< indri::api::ScoredExtentResult > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__set(std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *self,std::string const &key,std::vector< indri::api::ScoredExtentResult > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__del(std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *self,std::string const &key){
                std::map<std::string,std::vector< indri::api::ScoredExtentResult > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__has_key(std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *self,std::string const &key){
                std::map<std::string,std::vector< indri::api::ScoredExtentResult > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< indri::parse::MetadataPair > *new_std_vector_Sl_indri_parse_MetadataPair_Sg___SWIG_1(int capacity){
        std::vector<indri::parse::MetadataPair >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<indri::parse::MetadataPair >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::parse::MetadataPair std_vector_Sl_indri_parse_MetadataPair_Sg__getitemcopy(std::vector< indri::parse::MetadataPair > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< indri::parse::MetadataPair >::const_reference std_vector_Sl_indri_parse_MetadataPair_Sg__getitem(std::vector< indri::parse::MetadataPair > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__setitem(std::vector< indri::parse::MetadataPair > *self,int index,std::vector< indri::parse::MetadataPair >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__AddRange(std::vector< indri::parse::MetadataPair > *self,std::vector< indri::parse::MetadataPair > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< indri::parse::MetadataPair > *std_vector_Sl_indri_parse_MetadataPair_Sg__GetRange(std::vector< indri::parse::MetadataPair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<indri::parse::MetadataPair >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__Insert(std::vector< indri::parse::MetadataPair > *self,int index,std::vector< indri::parse::MetadataPair >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__InsertRange(std::vector< indri::parse::MetadataPair > *self,int index,std::vector< indri::parse::MetadataPair > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__RemoveAt(std::vector< indri::parse::MetadataPair > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__RemoveRange(std::vector< indri::parse::MetadataPair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< indri::parse::MetadataPair > *std_vector_Sl_indri_parse_MetadataPair_Sg__Repeat(std::vector< indri::parse::MetadataPair >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<indri::parse::MetadataPair >(count, value);
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_0(std::vector< indri::parse::MetadataPair > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_1(std::vector< indri::parse::MetadataPair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_parse_MetadataPair_Sg__SetRange(std::vector< indri::parse::MetadataPair > *self,int index,std::vector< indri::parse::MetadataPair > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< indri::api::ParsedDocument * > *new_std_vector_Sl_indri_api_ParsedDocument_Sm__Sg___SWIG_1(int capacity){
        std::vector<indri::api::ParsedDocument * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<indri::api::ParsedDocument * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::api::ParsedDocument *std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__getitemcopy(std::vector< indri::api::ParsedDocument * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< indri::api::ParsedDocument * >::const_reference std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__getitem(std::vector< indri::api::ParsedDocument * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__setitem(std::vector< indri::api::ParsedDocument * > *self,int index,std::vector< indri::api::ParsedDocument * >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__AddRange(std::vector< indri::api::ParsedDocument * > *self,std::vector< indri::api::ParsedDocument * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< indri::api::ParsedDocument * > *std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__GetRange(std::vector< indri::api::ParsedDocument * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<indri::api::ParsedDocument * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Insert(std::vector< indri::api::ParsedDocument * > *self,int index,std::vector< indri::api::ParsedDocument * >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__InsertRange(std::vector< indri::api::ParsedDocument * > *self,int index,std::vector< indri::api::ParsedDocument * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__RemoveAt(std::vector< indri::api::ParsedDocument * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__RemoveRange(std::vector< indri::api::ParsedDocument * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< indri::api::ParsedDocument * > *std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Repeat(std::vector< indri::api::ParsedDocument * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<indri::api::ParsedDocument * >(count, value);
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Reverse__SWIG_0(std::vector< indri::api::ParsedDocument * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Reverse__SWIG_1(std::vector< indri::api::ParsedDocument * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__SetRange(std::vector< indri::api::ParsedDocument * > *self,int index,std::vector< indri::api::ParsedDocument * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "indri/greedy_vector"
#include <algorithm>
#include <stdexcept>

SWIGINTERN indri::utility::greedy_vector< indri::parse::TermExtent > *new_indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg___SWIG_1(int capacity){
        indri::utility::greedy_vector<indri::parse::TermExtent >* pv = 0;
        if (capacity >= 0) {
          pv = new indri::utility::greedy_vector<indri::parse::TermExtent >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::parse::TermExtent indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__getitemcopy(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TermExtent >::const_reference indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__getitem(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__setitem(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,indri::parse::TermExtent const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = const_cast<indri::parse::TermExtent &>(value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__AddRange(indri::utility::greedy_vector< indri::parse::TermExtent > *self,indri::utility::greedy_vector< indri::parse::TermExtent > const &values){
        self->append(values.begin(), values.end());
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TermExtent > *indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__GetRange(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        indri::utility::greedy_vector<indri::parse::TermExtent > *res = new indri::utility::greedy_vector<indri::parse::TermExtent >((size_t) count);
        res->assign(self->begin()+index, self->begin()+index+count);
        return res;
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Insert(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,indri::parse::TermExtent const &value){
        if (index>=0 && index<(int)self->size()+1)
          // insert x before pos
          // violates insert semantics.
          // FIXME
          self->push_back(const_cast<indri::parse::TermExtent &>(value));
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__InsertRange(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,indri::utility::greedy_vector< indri::parse::TermExtent > const &values){
        if (index>=0 && index<(int)self->size()+1)
          // violates insert semantics.
          //Inserts the range [first, last) before pos.
          //FIXME
          self->append(values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__RemoveAt(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__RemoveRange(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TermExtent > *indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Repeat(indri::parse::TermExtent const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        indri::utility::greedy_vector<indri::parse::TermExtent > *res = new indri::utility::greedy_vector<indri::parse::TermExtent >();
        for (int i = 0; i < count; i++) {
          res->push_back( const_cast<indri::parse::TermExtent &>(value) );
        }
        return res;        
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Reverse__SWIG_0(indri::utility::greedy_vector< indri::parse::TermExtent > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Reverse__SWIG_1(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__SetRange(indri::utility::greedy_vector< indri::parse::TermExtent > *self,int index,indri::utility::greedy_vector< indri::parse::TermExtent > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::MetadataPair > *new_indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg___SWIG_1(int capacity){
        indri::utility::greedy_vector<indri::parse::MetadataPair >* pv = 0;
        if (capacity >= 0) {
          pv = new indri::utility::greedy_vector<indri::parse::MetadataPair >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::parse::MetadataPair indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__getitemcopy(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::MetadataPair >::const_reference indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__getitem(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__setitem(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,indri::parse::MetadataPair const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = const_cast<indri::parse::MetadataPair &>(value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__AddRange(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,indri::utility::greedy_vector< indri::parse::MetadataPair > const &values){
        self->append(values.begin(), values.end());
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::MetadataPair > *indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__GetRange(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        indri::utility::greedy_vector<indri::parse::MetadataPair > *res = new indri::utility::greedy_vector<indri::parse::MetadataPair >((size_t) count);
        res->assign(self->begin()+index, self->begin()+index+count);
        return res;
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Insert(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,indri::parse::MetadataPair const &value){
        if (index>=0 && index<(int)self->size()+1)
          // insert x before pos
          // violates insert semantics.
          // FIXME
          self->push_back(const_cast<indri::parse::MetadataPair &>(value));
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__InsertRange(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,indri::utility::greedy_vector< indri::parse::MetadataPair > const &values){
        if (index>=0 && index<(int)self->size()+1)
          // violates insert semantics.
          //Inserts the range [first, last) before pos.
          //FIXME
          self->append(values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__RemoveAt(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__RemoveRange(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::MetadataPair > *indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Repeat(indri::parse::MetadataPair const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        indri::utility::greedy_vector<indri::parse::MetadataPair > *res = new indri::utility::greedy_vector<indri::parse::MetadataPair >();
        for (int i = 0; i < count; i++) {
          res->push_back( const_cast<indri::parse::MetadataPair &>(value) );
        }
        return res;        
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_0(indri::utility::greedy_vector< indri::parse::MetadataPair > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_1(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__SetRange(indri::utility::greedy_vector< indri::parse::MetadataPair > *self,int index,indri::utility::greedy_vector< indri::parse::MetadataPair > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TagExtent * > *new_indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg___SWIG_1(int capacity){
        indri::utility::greedy_vector<indri::parse::TagExtent * >* pv = 0;
        if (capacity >= 0) {
          pv = new indri::utility::greedy_vector<indri::parse::TagExtent * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::parse::TagExtent *indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__getitemcopy(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TagExtent * >::const_reference indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__getitem(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__setitem(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,indri::parse::TagExtent const *&value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = const_cast<indri::parse::TagExtent * &>(value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__AddRange(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,indri::utility::greedy_vector< indri::parse::TagExtent * > const &values){
        self->append(values.begin(), values.end());
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TagExtent * > *indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__GetRange(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        indri::utility::greedy_vector<indri::parse::TagExtent * > *res = new indri::utility::greedy_vector<indri::parse::TagExtent * >((size_t) count);
        res->assign(self->begin()+index, self->begin()+index+count);
        return res;
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Insert(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,indri::parse::TagExtent const *&value){
        if (index>=0 && index<(int)self->size()+1)
          // insert x before pos
          // violates insert semantics.
          // FIXME
          self->push_back(const_cast<indri::parse::TagExtent * &>(value));
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__InsertRange(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,indri::utility::greedy_vector< indri::parse::TagExtent * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          // violates insert semantics.
          //Inserts the range [first, last) before pos.
          //FIXME
          self->append(values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__RemoveAt(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__RemoveRange(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::TagExtent * > *indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Repeat(indri::parse::TagExtent const *&value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        indri::utility::greedy_vector<indri::parse::TagExtent * > *res = new indri::utility::greedy_vector<indri::parse::TagExtent * >();
        for (int i = 0; i < count; i++) {
          res->push_back( const_cast<indri::parse::TagExtent * &>(value) );
        }
        return res;        
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Reverse__SWIG_0(indri::utility::greedy_vector< indri::parse::TagExtent * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Reverse__SWIG_1(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__SetRange(indri::utility::greedy_vector< indri::parse::TagExtent * > *self,int index,indri::utility::greedy_vector< indri::parse::TagExtent * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN indri::utility::greedy_vector< char * > *new_indri_utility_greedy_vector_Sl_char_Sm__Sg___SWIG_1(int capacity){
        indri::utility::greedy_vector<char * >* pv = 0;
        if (capacity >= 0) {
          pv = new indri::utility::greedy_vector<char * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char *indri_utility_greedy_vector_Sl_char_Sm__Sg__getitemcopy(indri::utility::greedy_vector< char * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN indri::utility::greedy_vector< char * >::const_reference indri_utility_greedy_vector_Sl_char_Sm__Sg__getitem(indri::utility::greedy_vector< char * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__setitem(indri::utility::greedy_vector< char * > *self,int index,char const *&value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = const_cast<char * &>(value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__AddRange(indri::utility::greedy_vector< char * > *self,indri::utility::greedy_vector< char * > const &values){
        self->append(values.begin(), values.end());
      }
SWIGINTERN indri::utility::greedy_vector< char * > *indri_utility_greedy_vector_Sl_char_Sm__Sg__GetRange(indri::utility::greedy_vector< char * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        indri::utility::greedy_vector<char * > *res = new indri::utility::greedy_vector<char * >((size_t) count);
        res->assign(self->begin()+index, self->begin()+index+count);
        return res;
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__Insert(indri::utility::greedy_vector< char * > *self,int index,char const *&value){
        if (index>=0 && index<(int)self->size()+1)
          // insert x before pos
          // violates insert semantics.
          // FIXME
          self->push_back(const_cast<char * &>(value));
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__InsertRange(indri::utility::greedy_vector< char * > *self,int index,indri::utility::greedy_vector< char * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          // violates insert semantics.
          //Inserts the range [first, last) before pos.
          //FIXME
          self->append(values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__RemoveAt(indri::utility::greedy_vector< char * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__RemoveRange(indri::utility::greedy_vector< char * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN indri::utility::greedy_vector< char * > *indri_utility_greedy_vector_Sl_char_Sm__Sg__Repeat(char const *&value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        indri::utility::greedy_vector<char * > *res = new indri::utility::greedy_vector<char * >();
        for (int i = 0; i < count; i++) {
          res->push_back( const_cast<char * &>(value) );
        }
        return res;        
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__Reverse__SWIG_0(indri::utility::greedy_vector< char * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__Reverse__SWIG_1(indri::utility::greedy_vector< char * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_char_Sm__Sg__SetRange(indri::utility::greedy_vector< char * > *self,int index,indri::utility::greedy_vector< char * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::AttributeValuePair > *new_indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg___SWIG_1(int capacity){
        indri::utility::greedy_vector<indri::parse::AttributeValuePair >* pv = 0;
        if (capacity >= 0) {
          pv = new indri::utility::greedy_vector<indri::parse::AttributeValuePair >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::parse::AttributeValuePair indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__getitemcopy(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::AttributeValuePair >::const_reference indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__getitem(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__setitem(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,indri::parse::AttributeValuePair const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = const_cast<indri::parse::AttributeValuePair &>(value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__AddRange(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,indri::utility::greedy_vector< indri::parse::AttributeValuePair > const &values){
        self->append(values.begin(), values.end());
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::AttributeValuePair > *indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__GetRange(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        indri::utility::greedy_vector<indri::parse::AttributeValuePair > *res = new indri::utility::greedy_vector<indri::parse::AttributeValuePair >((size_t) count);
        res->assign(self->begin()+index, self->begin()+index+count);
        return res;
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Insert(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,indri::parse::AttributeValuePair const &value){
        if (index>=0 && index<(int)self->size()+1)
          // insert x before pos
          // violates insert semantics.
          // FIXME
          self->push_back(const_cast<indri::parse::AttributeValuePair &>(value));
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__InsertRange(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,indri::utility::greedy_vector< indri::parse::AttributeValuePair > const &values){
        if (index>=0 && index<(int)self->size()+1)
          // violates insert semantics.
          //Inserts the range [first, last) before pos.
          //FIXME
          self->append(values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__RemoveAt(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__RemoveRange(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN indri::utility::greedy_vector< indri::parse::AttributeValuePair > *indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Repeat(indri::parse::AttributeValuePair const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        indri::utility::greedy_vector<indri::parse::AttributeValuePair > *res = new indri::utility::greedy_vector<indri::parse::AttributeValuePair >();
        for (int i = 0; i < count; i++) {
          res->push_back( const_cast<indri::parse::AttributeValuePair &>(value) );
        }
        return res;        
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Reverse__SWIG_0(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Reverse__SWIG_1(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__SetRange(indri::utility::greedy_vector< indri::parse::AttributeValuePair > *self,int index,indri::utility::greedy_vector< indri::parse::AttributeValuePair > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< indri::api::QueryAnnotationNode * > *new_std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg___SWIG_1(int capacity){
        std::vector<indri::api::QueryAnnotationNode * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<indri::api::QueryAnnotationNode * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::api::QueryAnnotationNode *std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__getitemcopy(std::vector< indri::api::QueryAnnotationNode * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< indri::api::QueryAnnotationNode * >::const_reference std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__getitem(std::vector< indri::api::QueryAnnotationNode * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__setitem(std::vector< indri::api::QueryAnnotationNode * > *self,int index,std::vector< indri::api::QueryAnnotationNode * >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__AddRange(std::vector< indri::api::QueryAnnotationNode * > *self,std::vector< indri::api::QueryAnnotationNode * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< indri::api::QueryAnnotationNode * > *std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__GetRange(std::vector< indri::api::QueryAnnotationNode * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<indri::api::QueryAnnotationNode * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Insert(std::vector< indri::api::QueryAnnotationNode * > *self,int index,std::vector< indri::api::QueryAnnotationNode * >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__InsertRange(std::vector< indri::api::QueryAnnotationNode * > *self,int index,std::vector< indri::api::QueryAnnotationNode * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__RemoveAt(std::vector< indri::api::QueryAnnotationNode * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__RemoveRange(std::vector< indri::api::QueryAnnotationNode * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< indri::api::QueryAnnotationNode * > *std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Repeat(std::vector< indri::api::QueryAnnotationNode * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<indri::api::QueryAnnotationNode * >(count, value);
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Reverse__SWIG_0(std::vector< indri::api::QueryAnnotationNode * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Reverse__SWIG_1(std::vector< indri::api::QueryAnnotationNode * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__SetRange(std::vector< indri::api::QueryAnnotationNode * > *self,int index,std::vector< indri::api::QueryAnnotationNode * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< indri::api::ScoredExtentResult > *new_std_vector_Sl_indri_api_ScoredExtentResult_Sg___SWIG_1(int capacity){
        std::vector<indri::api::ScoredExtentResult >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<indri::api::ScoredExtentResult >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::api::ScoredExtentResult std_vector_Sl_indri_api_ScoredExtentResult_Sg__getitemcopy(std::vector< indri::api::ScoredExtentResult > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< indri::api::ScoredExtentResult >::const_reference std_vector_Sl_indri_api_ScoredExtentResult_Sg__getitem(std::vector< indri::api::ScoredExtentResult > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__setitem(std::vector< indri::api::ScoredExtentResult > *self,int index,std::vector< indri::api::ScoredExtentResult >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__AddRange(std::vector< indri::api::ScoredExtentResult > *self,std::vector< indri::api::ScoredExtentResult > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< indri::api::ScoredExtentResult > *std_vector_Sl_indri_api_ScoredExtentResult_Sg__GetRange(std::vector< indri::api::ScoredExtentResult > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<indri::api::ScoredExtentResult >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__Insert(std::vector< indri::api::ScoredExtentResult > *self,int index,std::vector< indri::api::ScoredExtentResult >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__InsertRange(std::vector< indri::api::ScoredExtentResult > *self,int index,std::vector< indri::api::ScoredExtentResult > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__RemoveAt(std::vector< indri::api::ScoredExtentResult > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__RemoveRange(std::vector< indri::api::ScoredExtentResult > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< indri::api::ScoredExtentResult > *std_vector_Sl_indri_api_ScoredExtentResult_Sg__Repeat(std::vector< indri::api::ScoredExtentResult >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<indri::api::ScoredExtentResult >(count, value);
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__Reverse__SWIG_0(std::vector< indri::api::ScoredExtentResult > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__Reverse__SWIG_1(std::vector< indri::api::ScoredExtentResult > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_ScoredExtentResult_Sg__SetRange(std::vector< indri::api::ScoredExtentResult > *self,int index,std::vector< indri::api::ScoredExtentResult > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< indri::api::DocumentVector * > *new_std_vector_Sl_indri_api_DocumentVector_Sm__Sg___SWIG_1(int capacity){
        std::vector<indri::api::DocumentVector * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<indri::api::DocumentVector * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::api::DocumentVector *std_vector_Sl_indri_api_DocumentVector_Sm__Sg__getitemcopy(std::vector< indri::api::DocumentVector * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< indri::api::DocumentVector * >::const_reference std_vector_Sl_indri_api_DocumentVector_Sm__Sg__getitem(std::vector< indri::api::DocumentVector * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__setitem(std::vector< indri::api::DocumentVector * > *self,int index,std::vector< indri::api::DocumentVector * >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__AddRange(std::vector< indri::api::DocumentVector * > *self,std::vector< indri::api::DocumentVector * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< indri::api::DocumentVector * > *std_vector_Sl_indri_api_DocumentVector_Sm__Sg__GetRange(std::vector< indri::api::DocumentVector * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<indri::api::DocumentVector * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Insert(std::vector< indri::api::DocumentVector * > *self,int index,std::vector< indri::api::DocumentVector * >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__InsertRange(std::vector< indri::api::DocumentVector * > *self,int index,std::vector< indri::api::DocumentVector * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__RemoveAt(std::vector< indri::api::DocumentVector * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__RemoveRange(std::vector< indri::api::DocumentVector * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< indri::api::DocumentVector * > *std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Repeat(std::vector< indri::api::DocumentVector * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<indri::api::DocumentVector * >(count, value);
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Reverse__SWIG_0(std::vector< indri::api::DocumentVector * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Reverse__SWIG_1(std::vector< indri::api::DocumentVector * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Sm__Sg__SetRange(std::vector< indri::api::DocumentVector * > *self,int index,std::vector< indri::api::DocumentVector * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< indri::api::DocumentVector::Field > *new_std_vector_Sl_indri_api_DocumentVector_Field_Sg___SWIG_1(int capacity){
        std::vector<indri::api::DocumentVector::Field >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<indri::api::DocumentVector::Field >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN indri::api::DocumentVector::Field std_vector_Sl_indri_api_DocumentVector_Field_Sg__getitemcopy(std::vector< indri::api::DocumentVector::Field > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< indri::api::DocumentVector::Field >::const_reference std_vector_Sl_indri_api_DocumentVector_Field_Sg__getitem(std::vector< indri::api::DocumentVector::Field > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__setitem(std::vector< indri::api::DocumentVector::Field > *self,int index,std::vector< indri::api::DocumentVector::Field >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__AddRange(std::vector< indri::api::DocumentVector::Field > *self,std::vector< indri::api::DocumentVector::Field > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< indri::api::DocumentVector::Field > *std_vector_Sl_indri_api_DocumentVector_Field_Sg__GetRange(std::vector< indri::api::DocumentVector::Field > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<indri::api::DocumentVector::Field >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__Insert(std::vector< indri::api::DocumentVector::Field > *self,int index,std::vector< indri::api::DocumentVector::Field >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__InsertRange(std::vector< indri::api::DocumentVector::Field > *self,int index,std::vector< indri::api::DocumentVector::Field > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__RemoveAt(std::vector< indri::api::DocumentVector::Field > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__RemoveRange(std::vector< indri::api::DocumentVector::Field > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< indri::api::DocumentVector::Field > *std_vector_Sl_indri_api_DocumentVector_Field_Sg__Repeat(std::vector< indri::api::DocumentVector::Field >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<indri::api::DocumentVector::Field >(count, value);
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__Reverse__SWIG_0(std::vector< indri::api::DocumentVector::Field > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__Reverse__SWIG_1(std::vector< indri::api::DocumentVector::Field > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_indri_api_DocumentVector_Field_Sg__SetRange(std::vector< indri::api::DocumentVector::Field > *self,int index,std::vector< indri::api::DocumentVector::Field > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

  namespace indri 
  {
    namespace api 
    {
      typedef indri::api::DocumentVector::Field Field ;
    }
  }
  

  namespace indri 
  {
    namespace parse
    {
      typedef indri::parse::FileClassEnvironmentFactory::Specification Specification ;
    }
  }

  //#define Specification FileClassEnvironmentFactory::Specification
  

#include "indri/TagList.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "indri_csharp.h"

SwigDirector_IndexStatus::SwigDirector_IndexStatus() : indri::api::IndexStatus(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IndexStatus::~SwigDirector_IndexStatus() {
  
}


void SwigDirector_IndexStatus::status(int code, std::string const &documentPath, std::string const &error, int documentsIndexed, int documentsSeen) {
  int jcode  ;
  char * jdocumentPath = 0 ;
  char * jerror = 0 ;
  int jdocumentsIndexed  ;
  int jdocumentsSeen  ;
  
  if (!swig_callbackstatus) {
    throw Swig::DirectorPureVirtualException("indri::api::IndexStatus::status");
  } else {
    jcode = code;
    jdocumentPath = SWIG_csharp_string_callback((&documentPath)->c_str()); 
    jerror = SWIG_csharp_string_callback((&error)->c_str()); 
    jdocumentsIndexed = documentsIndexed;
    jdocumentsSeen = documentsSeen;
    swig_callbackstatus(jcode, jdocumentPath, jerror, jdocumentsIndexed, jdocumentsSeen);
  }
}

void SwigDirector_IndexStatus::swig_connect_director(SWIG_Callback0_t callbackstatus) {
  swig_callbackstatus = callbackstatus;
}

void SwigDirector_IndexStatus::swig_init_callbacks() {
  swig_callbackstatus = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< int >::const_reference _result_ref = std_vector_Sl_int_Sg__getitem(arg1,arg2);
      result = (std::vector< int >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntVector_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  std::vector< int >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< int >::value_type temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (std::vector< int >::value_type)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Remove(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntVector(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< std::string >::const_reference _result_ref = std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
      result = (std::vector< std::string >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::string >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfMap__SWIG_0() {
  void * jresult ;
  std::map< indri::parse::ConflationPattern *,std::string > *result = 0 ;
  
  result = (std::map< indri::parse::ConflationPattern *,std::string > *)new std::map< indri::parse::ConflationPattern *,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = 0 ;
  std::map< indri::parse::ConflationPattern *,std::string > *result = 0 ;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< indri::parse::ConflationPattern *,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::map< indri::parse::ConflationPattern *,std::string > *)new std::map< indri::parse::ConflationPattern *,std::string >((std::map< indri::parse::ConflationPattern *,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfMap_size(void * jarg1) {
  unsigned int jresult ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  unsigned int result;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  result = (unsigned int)((std::map< indri::parse::ConflationPattern *,std::string > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  result = (bool)((std::map< indri::parse::ConflationPattern *,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfMap_clear(void * jarg1) {
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConfMap_get(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  indri::parse::ConflationPattern **arg2 = 0 ;
  indri::parse::ConflationPattern *temp2 = 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  temp2 = (indri::parse::ConflationPattern *)jarg2;
  arg2 = &temp2; 
  try {
    {
      std::string &_result_ref = std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__get(arg1,(indri::parse::ConflationPattern *const &)*arg2);
      result = (std::string *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfMap_set(void * jarg1, void * jarg2, char * jarg3) {
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  indri::parse::ConflationPattern **arg2 = 0 ;
  std::string *arg3 = 0 ;
  indri::parse::ConflationPattern *temp2 = 0 ;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  temp2 = (indri::parse::ConflationPattern *)jarg2;
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__set(arg1,(indri::parse::ConflationPattern *const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfMap_del(void * jarg1, void * jarg2) {
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  indri::parse::ConflationPattern **arg2 = 0 ;
  indri::parse::ConflationPattern *temp2 = 0 ;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  temp2 = (indri::parse::ConflationPattern *)jarg2;
  arg2 = &temp2; 
  try {
    std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__del(arg1,(indri::parse::ConflationPattern *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfMap_has_key(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  indri::parse::ConflationPattern **arg2 = 0 ;
  indri::parse::ConflationPattern *temp2 = 0 ;
  bool result;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  temp2 = (indri::parse::ConflationPattern *)jarg2;
  arg2 = &temp2; 
  result = (bool)std_map_Sl_indri_parse_ConflationPattern_Sm__Sc_std_string_Sg__has_key(arg1,(indri::parse::ConflationPattern *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConfMap(void * jarg1) {
  std::map< indri::parse::ConflationPattern *,std::string > *arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  
  arg1 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConflationPattern_tag_name_set(void * jarg1, char * jarg2) {
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->tag_name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->tag_name, (const char *)arg2);
    } else {
      arg1->tag_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConflationPattern_tag_name_get(void * jarg1) {
  char * jresult ;
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  result = (char *) ((arg1)->tag_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConflationPattern_attribute_name_set(void * jarg1, char * jarg2) {
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->attribute_name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->attribute_name, (const char *)arg2);
    } else {
      arg1->attribute_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConflationPattern_attribute_name_get(void * jarg1) {
  char * jresult ;
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  result = (char *) ((arg1)->attribute_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConflationPattern_value_set(void * jarg1, char * jarg2) {
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->value = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConflationPattern_value_get(void * jarg1) {
  char * jresult ;
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  result = (char *) ((arg1)->value);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConflationPattern() {
  void * jresult ;
  indri::parse::ConflationPattern *result = 0 ;
  
  result = (indri::parse::ConflationPattern *)new indri::parse::ConflationPattern();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConflationPattern(void * jarg1) {
  indri::parse::ConflationPattern *arg1 = (indri::parse::ConflationPattern *) 0 ;
  
  arg1 = (indri::parse::ConflationPattern *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MResults__SWIG_0() {
  void * jresult ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *result = 0 ;
  
  result = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)new std::map< std::string,std::vector< indri::api::ScoredExtentResult > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MResults__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = 0 ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *result = 0 ;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::vector< indri::api::ScoredExtentResult > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)new std::map< std::string,std::vector< indri::api::ScoredExtentResult > >((std::map< std::string,std::vector< indri::api::ScoredExtentResult > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MResults_size(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  unsigned int result;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  result = (unsigned int)((std::map< std::string,std::vector< indri::api::ScoredExtentResult > > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MResults_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  result = (bool)((std::map< std::string,std::vector< indri::api::ScoredExtentResult > > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MResults_clear(void * jarg1) {
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MResults_get(void * jarg1, char * jarg2) {
  void * jresult ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    {
      std::vector< indri::api::ScoredExtentResult > &_result_ref = std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__get(arg1,(std::string const &)*arg2);
      result = (std::vector< indri::api::ScoredExtentResult > *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MResults_set(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< indri::api::ScoredExtentResult > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > const & type is null", 0);
    return ;
  } 
  std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__set(arg1,(std::string const &)*arg2,(std::vector< indri::api::ScoredExtentResult > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MResults_del(void * jarg1, char * jarg2) {
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MResults_has_key(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_vector_Sl_indri_api_ScoredExtentResult_Sg__Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MResults(void * jarg1) {
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) 0 ;
  
  arg1 = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_Clear(void * jarg1) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_Add(void * jarg1, void * jarg2) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  std::vector< indri::parse::MetadataPair >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (std::vector< indri::parse::MetadataPair >::value_type *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< indri::parse::MetadataPair >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MetadataPairSTDVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  std::vector< indri::parse::MetadataPair >::size_type result;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  result = ((std::vector< indri::parse::MetadataPair > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MetadataPairSTDVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  std::vector< indri::parse::MetadataPair >::size_type result;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  result = ((std::vector< indri::parse::MetadataPair > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  std::vector< indri::parse::MetadataPair >::size_type arg2 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (std::vector< indri::parse::MetadataPair >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MetadataPairSTDVector__SWIG_0() {
  void * jresult ;
  std::vector< indri::parse::MetadataPair > *result = 0 ;
  
  result = (std::vector< indri::parse::MetadataPair > *)new std::vector< indri::parse::MetadataPair >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MetadataPairSTDVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< indri::parse::MetadataPair > *)new_std_vector_Sl_indri_parse_MetadataPair_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairSTDVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::parse::MetadataPair result;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_indri_parse_MetadataPair_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new indri::parse::MetadataPair((const indri::parse::MetadataPair &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairSTDVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  std::vector< indri::parse::MetadataPair >::value_type *result = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< indri::parse::MetadataPair >::const_reference _result_ref = std_vector_Sl_indri_parse_MetadataPair_Sg__getitem(arg1,arg2);
      result = (std::vector< indri::parse::MetadataPair >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  std::vector< indri::parse::MetadataPair >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::parse::MetadataPair >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__setitem(arg1,arg2,(indri::parse::MetadataPair const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  std::vector< indri::parse::MetadataPair > *arg2 = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (std::vector< indri::parse::MetadataPair > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_indri_parse_MetadataPair_Sg__AddRange(arg1,(std::vector< indri::parse::MetadataPair > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairSTDVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< indri::parse::MetadataPair > *)std_vector_Sl_indri_parse_MetadataPair_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  std::vector< indri::parse::MetadataPair >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::parse::MetadataPair >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__Insert(arg1,arg2,(indri::parse::MetadataPair const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  std::vector< indri::parse::MetadataPair > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::parse::MetadataPair > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__InsertRange(arg1,arg2,(std::vector< indri::parse::MetadataPair > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairSTDVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::parse::MetadataPair >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair >::value_type *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair >::value_type const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< indri::parse::MetadataPair > *)std_vector_Sl_indri_parse_MetadataPair_Sg__Repeat((indri::parse::MetadataPair const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  std_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairSTDVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  std::vector< indri::parse::MetadataPair > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::parse::MetadataPair > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_parse_MetadataPair_Sg__SetRange(arg1,arg2,(std::vector< indri::parse::MetadataPair > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MetadataPairSTDVector(void * jarg1) {
  std::vector< indri::parse::MetadataPair > *arg1 = (std::vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (std::vector< indri::parse::MetadataPair > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPair_key_set(void * jarg1, char * jarg2) {
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->key = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->key, (const char *)arg2);
    } else {
      arg1->key = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MetadataPair_key_get(void * jarg1) {
  char * jresult ;
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  result = (char *) ((arg1)->key);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPair_value_set(void * jarg1, char * jarg2) {
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->value = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MetadataPair_value_get(void * jarg1) {
  char * jresult ;
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  result = (char *) ((arg1)->value);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPair_valueLength_set(void * jarg1, int jarg2) {
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  int arg2 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->valueLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MetadataPair_valueLength_get(void * jarg1) {
  int jresult ;
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  int result;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  result = (int) ((arg1)->valueLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MetadataPair() {
  void * jresult ;
  indri::parse::MetadataPair *result = 0 ;
  
  result = (indri::parse::MetadataPair *)new indri::parse::MetadataPair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MetadataPair(void * jarg1) {
  indri::parse::MetadataPair *arg1 = (indri::parse::MetadataPair *) 0 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_Clear(void * jarg1) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_Add(void * jarg1, void * jarg2) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  std::vector< indri::api::ParsedDocument * >::value_type *arg2 = 0 ;
  std::vector< indri::api::ParsedDocument * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  temp2 = (std::vector< indri::api::ParsedDocument * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< indri::api::ParsedDocument * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ParsedDocumentVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  std::vector< indri::api::ParsedDocument * >::size_type result;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  result = ((std::vector< indri::api::ParsedDocument * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ParsedDocumentVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  std::vector< indri::api::ParsedDocument * >::size_type result;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  result = ((std::vector< indri::api::ParsedDocument * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  std::vector< indri::api::ParsedDocument * >::size_type arg2 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (std::vector< indri::api::ParsedDocument * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParsedDocumentVector__SWIG_0() {
  void * jresult ;
  std::vector< indri::api::ParsedDocument * > *result = 0 ;
  
  result = (std::vector< indri::api::ParsedDocument * > *)new std::vector< indri::api::ParsedDocument * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParsedDocumentVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< indri::api::ParsedDocument * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< indri::api::ParsedDocument * > *)new_std_vector_Sl_indri_api_ParsedDocument_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocumentVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  indri::api::ParsedDocument *result = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (indri::api::ParsedDocument *)std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocumentVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ParsedDocument * >::value_type *result = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< indri::api::ParsedDocument * >::const_reference _result_ref = std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector< indri::api::ParsedDocument * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ParsedDocument * >::value_type *arg3 = 0 ;
  std::vector< indri::api::ParsedDocument * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< indri::api::ParsedDocument * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__setitem(arg1,arg2,(indri::api::ParsedDocument *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  std::vector< indri::api::ParsedDocument * > *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (std::vector< indri::api::ParsedDocument * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ParsedDocument * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__AddRange(arg1,(std::vector< indri::api::ParsedDocument * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocumentVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< indri::api::ParsedDocument * > *result = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< indri::api::ParsedDocument * > *)std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ParsedDocument * >::value_type *arg3 = 0 ;
  std::vector< indri::api::ParsedDocument * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< indri::api::ParsedDocument * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Insert(arg1,arg2,(indri::api::ParsedDocument *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ParsedDocument * > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::ParsedDocument * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ParsedDocument * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__InsertRange(arg1,arg2,(std::vector< indri::api::ParsedDocument * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocumentVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::ParsedDocument * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< indri::api::ParsedDocument * >::value_type temp1 = 0 ;
  std::vector< indri::api::ParsedDocument * > *result = 0 ;
  
  temp1 = (std::vector< indri::api::ParsedDocument * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< indri::api::ParsedDocument * > *)std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Repeat((indri::api::ParsedDocument *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocumentVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ParsedDocument * > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::ParsedDocument * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ParsedDocument * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_ParsedDocument_Sm__Sg__SetRange(arg1,arg2,(std::vector< indri::api::ParsedDocument * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParsedDocumentVector(void * jarg1) {
  std::vector< indri::api::ParsedDocument * > *arg1 = (std::vector< indri::api::ParsedDocument * > *) 0 ;
  
  arg1 = (std::vector< indri::api::ParsedDocument * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_Clear(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_Add(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  indri::parse::TermExtent *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (indri::parse::TermExtent *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::TermExtent & type is null", 0);
    return ;
  } 
  (arg1)->push_back(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TermExtentVector_size(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::TermExtent > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TermExtentVector_capacity(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::TermExtent > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_reserve(void * jarg1, unsigned long jarg2) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TermExtentVector__SWIG_0() {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *result = 0 ;
  
  result = (indri::utility::greedy_vector< indri::parse::TermExtent > *)new indri::utility::greedy_vector< indri::parse::TermExtent >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TermExtentVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::TermExtent > *)new_indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TermExtentVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  indri::parse::TermExtent result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new indri::parse::TermExtent((const indri::parse::TermExtent &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TermExtentVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  indri::parse::TermExtent *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      indri::utility::greedy_vector< indri::parse::TermExtent >::const_reference _result_ref = indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__getitem(arg1,arg2);
      result = (indri::parse::TermExtent *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  indri::parse::TermExtent *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::parse::TermExtent *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::TermExtent const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__setitem(arg1,arg2,(indri::parse::TermExtent const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_AddRange(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::TermExtent > const & type is null", 0);
    return ;
  } 
  indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__AddRange(arg1,(indri::utility::greedy_vector< indri::parse::TermExtent > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TermExtentVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  int arg3 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::TermExtent > *)indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  indri::parse::TermExtent *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::parse::TermExtent *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::TermExtent const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Insert(arg1,arg2,(indri::parse::TermExtent const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::TermExtent > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__InsertRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::TermExtent > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_RemoveAt(void * jarg1, int jarg2) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TermExtentVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  indri::parse::TermExtent *arg1 = 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *result = 0 ;
  
  arg1 = (indri::parse::TermExtent *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::TermExtent const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::TermExtent > *)indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Repeat((indri::parse::TermExtent const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_Reverse__SWIG_0(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtentVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::TermExtent > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TermExtent_Sg__SetRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::TermExtent > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TermExtentVector(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_Clear(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_Add(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  indri::parse::MetadataPair *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (indri::parse::MetadataPair *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::MetadataPair & type is null", 0);
    return ;
  } 
  (arg1)->push_back(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MetadataPairVector_size(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::MetadataPair > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MetadataPairVector_capacity(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::MetadataPair > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_reserve(void * jarg1, unsigned long jarg2) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MetadataPairVector__SWIG_0() {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *result = 0 ;
  
  result = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)new indri::utility::greedy_vector< indri::parse::MetadataPair >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MetadataPairVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)new_indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::parse::MetadataPair result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new indri::parse::MetadataPair((const indri::parse::MetadataPair &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::parse::MetadataPair *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      indri::utility::greedy_vector< indri::parse::MetadataPair >::const_reference _result_ref = indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__getitem(arg1,arg2);
      result = (indri::parse::MetadataPair *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::parse::MetadataPair *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::parse::MetadataPair *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::MetadataPair const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__setitem(arg1,arg2,(indri::parse::MetadataPair const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_AddRange(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::MetadataPair > const & type is null", 0);
    return ;
  } 
  indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__AddRange(arg1,(indri::utility::greedy_vector< indri::parse::MetadataPair > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  int arg3 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::parse::MetadataPair *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::parse::MetadataPair *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::MetadataPair const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Insert(arg1,arg2,(indri::parse::MetadataPair const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::MetadataPair > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__InsertRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::MetadataPair > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_RemoveAt(void * jarg1, int jarg2) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MetadataPairVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  indri::parse::MetadataPair *arg1 = 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (indri::parse::MetadataPair *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::MetadataPair const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Repeat((indri::parse::MetadataPair const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_Reverse__SWIG_0(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetadataPairVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::MetadataPair > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_MetadataPair_Sg__SetRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::MetadataPair > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MetadataPairVector(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_Clear(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_Add(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  indri::parse::TagExtent **arg2 = 0 ;
  indri::parse::TagExtent *temp2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  temp2 = (indri::parse::TagExtent *)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TagExtentVector_size(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::TagExtent * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TagExtentVector_capacity(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::TagExtent * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_reserve(void * jarg1, unsigned long jarg2) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagExtentVector__SWIG_0() {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *result = 0 ;
  
  result = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)new indri::utility::greedy_vector< indri::parse::TagExtent * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagExtentVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)new_indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagExtentVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  indri::parse::TagExtent *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (indri::parse::TagExtent *)indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagExtentVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  indri::parse::TagExtent **result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      indri::utility::greedy_vector< indri::parse::TagExtent * >::const_reference _result_ref = indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__getitem(arg1,arg2);
      result = (indri::parse::TagExtent **) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  indri::parse::TagExtent **arg3 = 0 ;
  indri::parse::TagExtent *temp3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (indri::parse::TagExtent *)jarg3;
  arg3 = &temp3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__setitem(arg1,arg2,(indri::parse::TagExtent const *&)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_AddRange(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::TagExtent * > const & type is null", 0);
    return ;
  } 
  indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__AddRange(arg1,(indri::utility::greedy_vector< indri::parse::TagExtent * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagExtentVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  int arg3 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  indri::parse::TagExtent **arg3 = 0 ;
  indri::parse::TagExtent *temp3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (indri::parse::TagExtent *)jarg3;
  arg3 = &temp3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Insert(arg1,arg2,(indri::parse::TagExtent const *&)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::TagExtent * > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__InsertRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::TagExtent * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_RemoveAt(void * jarg1, int jarg2) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagExtentVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  indri::parse::TagExtent **arg1 = 0 ;
  int arg2 ;
  indri::parse::TagExtent *temp1 = 0 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *result = 0 ;
  
  temp1 = (indri::parse::TagExtent *)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Repeat((indri::parse::TagExtent const *&)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_Reverse__SWIG_0(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtentVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::TagExtent * > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_TagExtent_Sm__Sg__SetRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::TagExtent * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagExtentVector(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_Clear(void * jarg1) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_Add(void * jarg1, char * jarg2) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  char **arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = &(jarg2); 
  (arg1)->push_back(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Char_pVector_size(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  result = ((indri::utility::greedy_vector< char * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Char_pVector_capacity(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  result = ((indri::utility::greedy_vector< char * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_reserve(void * jarg1, unsigned long jarg2) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Char_pVector__SWIG_0() {
  void * jresult ;
  indri::utility::greedy_vector< char * > *result = 0 ;
  
  result = (indri::utility::greedy_vector< char * > *)new indri::utility::greedy_vector< char * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Char_pVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  indri::utility::greedy_vector< char * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (indri::utility::greedy_vector< char * > *)new_indri_utility_greedy_vector_Sl_char_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Char_pVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char *)indri_utility_greedy_vector_Sl_char_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Char_pVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      indri::utility::greedy_vector< char * >::const_reference _result_ref = indri_utility_greedy_vector_Sl_char_Sm__Sg__getitem(arg1,arg2);
      result = (char **) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  char **arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = &(jarg3); 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__setitem(arg1,arg2,(char const *&)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_AddRange(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  indri::utility::greedy_vector< char * > *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (indri::utility::greedy_vector< char * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< char * > const & type is null", 0);
    return ;
  } 
  indri_utility_greedy_vector_Sl_char_Sm__Sg__AddRange(arg1,(indri::utility::greedy_vector< char * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Char_pVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  int arg3 ;
  indri::utility::greedy_vector< char * > *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (indri::utility::greedy_vector< char * > *)indri_utility_greedy_vector_Sl_char_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  char **arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = &(jarg3); 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__Insert(arg1,arg2,(char const *&)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< char * > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< char * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< char * > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__InsertRange(arg1,arg2,(indri::utility::greedy_vector< char * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_RemoveAt(void * jarg1, int jarg2) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Char_pVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  char **arg1 = 0 ;
  int arg2 ;
  indri::utility::greedy_vector< char * > *result = 0 ;
  
  arg1 = &(jarg1); 
  arg2 = (int)jarg2; 
  try {
    result = (indri::utility::greedy_vector< char * > *)indri_utility_greedy_vector_Sl_char_Sm__Sg__Repeat((char const *&)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_Reverse__SWIG_0(void * jarg1) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  indri_utility_greedy_vector_Sl_char_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Char_pVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< char * > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< char * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< char * > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_char_Sm__Sg__SetRange(arg1,arg2,(indri::utility::greedy_vector< char * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Char_pVector(void * jarg1) {
  indri::utility::greedy_vector< char * > *arg1 = (indri::utility::greedy_vector< char * > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< char * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_Clear(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_Add(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  indri::parse::AttributeValuePair *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (indri::parse::AttributeValuePair *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::AttributeValuePair & type is null", 0);
    return ;
  } 
  (arg1)->push_back(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AttributeValuePairVector_size(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::AttributeValuePair > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AttributeValuePairVector_capacity(void * jarg1) {
  unsigned long jresult ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  size_t result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  result = ((indri::utility::greedy_vector< indri::parse::AttributeValuePair > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_reserve(void * jarg1, unsigned long jarg2) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttributeValuePairVector__SWIG_0() {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *result = 0 ;
  
  result = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)new indri::utility::greedy_vector< indri::parse::AttributeValuePair >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttributeValuePairVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)new_indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttributeValuePairVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  indri::parse::AttributeValuePair result;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new indri::parse::AttributeValuePair((const indri::parse::AttributeValuePair &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttributeValuePairVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  indri::parse::AttributeValuePair *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      indri::utility::greedy_vector< indri::parse::AttributeValuePair >::const_reference _result_ref = indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__getitem(arg1,arg2);
      result = (indri::parse::AttributeValuePair *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  indri::parse::AttributeValuePair *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::parse::AttributeValuePair *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::AttributeValuePair const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__setitem(arg1,arg2,(indri::parse::AttributeValuePair const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_AddRange(void * jarg1, void * jarg2) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg2 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::AttributeValuePair > const & type is null", 0);
    return ;
  } 
  indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__AddRange(arg1,(indri::utility::greedy_vector< indri::parse::AttributeValuePair > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttributeValuePairVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  int arg3 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *result = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  indri::parse::AttributeValuePair *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::parse::AttributeValuePair *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::AttributeValuePair const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Insert(arg1,arg2,(indri::parse::AttributeValuePair const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::AttributeValuePair > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__InsertRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::AttributeValuePair > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_RemoveAt(void * jarg1, int jarg2) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttributeValuePairVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  indri::parse::AttributeValuePair *arg1 = 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *result = 0 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::AttributeValuePair const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Repeat((indri::parse::AttributeValuePair const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_Reverse__SWIG_0(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePairVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  int arg2 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg3 = 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::utility::greedy_vector< indri::parse::AttributeValuePair > const & type is null", 0);
    return ;
  } 
  try {
    indri_utility_greedy_vector_Sl_indri_parse_AttributeValuePair_Sg__SetRange(arg1,arg2,(indri::utility::greedy_vector< indri::parse::AttributeValuePair > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AttributeValuePairVector(void * jarg1) {
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  
  arg1 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtent_begin_set(void * jarg1, int jarg2) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int arg2 ;
  
  arg1 = (indri::parse::TermExtent *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TermExtent_begin_get(void * jarg1) {
  int jresult ;
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int result;
  
  arg1 = (indri::parse::TermExtent *)jarg1; 
  result = (int) ((arg1)->begin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TermExtent_end_set(void * jarg1, int jarg2) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int arg2 ;
  
  arg1 = (indri::parse::TermExtent *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TermExtent_end_get(void * jarg1) {
  int jresult ;
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int result;
  
  arg1 = (indri::parse::TermExtent *)jarg1; 
  result = (int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TermExtent() {
  void * jresult ;
  indri::parse::TermExtent *result = 0 ;
  
  result = (indri::parse::TermExtent *)new indri::parse::TermExtent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TermExtent(void * jarg1) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  
  arg1 = (indri::parse::TermExtent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtent_name_set(void * jarg1, char * jarg2) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TagExtent_name_get(void * jarg1) {
  char * jresult ;
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtent_begin_set(void * jarg1, unsigned int jarg2) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagExtent_begin_get(void * jarg1) {
  unsigned int jresult ;
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  unsigned int result;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  result = (unsigned int) ((arg1)->begin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtent_end_set(void * jarg1, unsigned int jarg2) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagExtent_end_get(void * jarg1) {
  unsigned int jresult ;
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  unsigned int result;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  result = (unsigned int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtent_number_set(void * jarg1, long long jarg2) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  INT64 arg2 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  arg2 = (INT64)jarg2; 
  if (arg1) (arg1)->number = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TagExtent_number_get(void * jarg1) {
  long long jresult ;
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  INT64 result;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  result = (INT64) ((arg1)->number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtent_parent_set(void * jarg1, void * jarg2) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  indri::parse::TagExtent *arg2 = (indri::parse::TagExtent *) 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  arg2 = (indri::parse::TagExtent *)jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagExtent_parent_get(void * jarg1) {
  void * jresult ;
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  indri::parse::TagExtent *result = 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  result = (indri::parse::TagExtent *) ((arg1)->parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagExtent_attributes_set(void * jarg1, void * jarg2) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *arg2 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *) 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)jarg2; 
  if (arg1) (arg1)->attributes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagExtent_attributes_get(void * jarg1) {
  void * jresult ;
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  indri::utility::greedy_vector< indri::parse::AttributeValuePair > *result = 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  result = (indri::utility::greedy_vector< indri::parse::AttributeValuePair > *)& ((arg1)->attributes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagExtent() {
  void * jresult ;
  indri::parse::TagExtent *result = 0 ;
  
  result = (indri::parse::TagExtent *)new indri::parse::TagExtent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagExtent(void * jarg1) {
  indri::parse::TagExtent *arg1 = (indri::parse::TagExtent *) 0 ;
  
  arg1 = (indri::parse::TagExtent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePair_attribute_set(void * jarg1, char * jarg2) {
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->attribute = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->attribute, (const char *)arg2);
    } else {
      arg1->attribute = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AttributeValuePair_attribute_get(void * jarg1) {
  char * jresult ;
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  result = (char *) ((arg1)->attribute);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePair_value_set(void * jarg1, char * jarg2) {
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AttributeValuePair_value_get(void * jarg1) {
  char * jresult ;
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  result = (char *) ((arg1)->value);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePair_begin_set(void * jarg1, unsigned int jarg2) {
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttributeValuePair_begin_get(void * jarg1) {
  unsigned int jresult ;
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  unsigned int result;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  result = (unsigned int) ((arg1)->begin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttributeValuePair_end_set(void * jarg1, unsigned int jarg2) {
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttributeValuePair_end_get(void * jarg1) {
  unsigned int jresult ;
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  unsigned int result;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  result = (unsigned int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttributeValuePair() {
  void * jresult ;
  indri::parse::AttributeValuePair *result = 0 ;
  
  result = (indri::parse::AttributeValuePair *)new indri::parse::AttributeValuePair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AttributeValuePair(void * jarg1) {
  indri::parse::AttributeValuePair *arg1 = (indri::parse::AttributeValuePair *) 0 ;
  
  arg1 = (indri::parse::AttributeValuePair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_text_set(void * jarg1, char * jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->text = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->text, (const char *)arg2);
    } else {
      arg1->text = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParsedDocument_text_get(void * jarg1) {
  char * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (char *) ((arg1)->text);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_textLength_set(void * jarg1, unsigned long jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->textLength = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ParsedDocument_textLength_get(void * jarg1) {
  unsigned long jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  size_t result;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result =  ((arg1)->textLength);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_content_set(void * jarg1, char * jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->content = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->content, (const char *)arg2);
    } else {
      arg1->content = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParsedDocument_content_get(void * jarg1) {
  char * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  char *result = 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (char *) ((arg1)->content);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_contentLength_set(void * jarg1, unsigned long jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  size_t arg2 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->contentLength = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ParsedDocument_contentLength_get(void * jarg1) {
  unsigned long jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  size_t result;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result =  ((arg1)->contentLength);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParsedDocument_getContent(void * jarg1) {
  char * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  std::string result;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (arg1)->getContent();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_terms_set(void * jarg1, void * jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< char * > *arg2 = (indri::utility::greedy_vector< char * > *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (indri::utility::greedy_vector< char * > *)jarg2; 
  if (arg1) (arg1)->terms = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocument_terms_get(void * jarg1) {
  void * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< char * > *result = 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (indri::utility::greedy_vector< char * > *)& ((arg1)->terms);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_tags_set(void * jarg1, void * jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *arg2 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)jarg2; 
  if (arg1) (arg1)->tags = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocument_tags_get(void * jarg1) {
  void * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< indri::parse::TagExtent * > *result = 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (indri::utility::greedy_vector< indri::parse::TagExtent * > *)& ((arg1)->tags);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_positions_set(void * jarg1, void * jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *arg2 = (indri::utility::greedy_vector< indri::parse::TermExtent > *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::TermExtent > *)jarg2; 
  if (arg1) (arg1)->positions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocument_positions_get(void * jarg1) {
  void * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< indri::parse::TermExtent > *result = 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (indri::utility::greedy_vector< indri::parse::TermExtent > *)& ((arg1)->positions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParsedDocument_metadata_set(void * jarg1, void * jarg2) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *arg2 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  arg2 = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)jarg2; 
  if (arg1) (arg1)->metadata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParsedDocument_metadata_get(void * jarg1) {
  void * jresult ;
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  indri::utility::greedy_vector< indri::parse::MetadataPair > *result = 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  result = (indri::utility::greedy_vector< indri::parse::MetadataPair > *)& ((arg1)->metadata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParsedDocument() {
  void * jresult ;
  indri::api::ParsedDocument *result = 0 ;
  
  result = (indri::api::ParsedDocument *)new indri::api::ParsedDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParsedDocument(void * jarg1) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  
  arg1 = (indri::api::ParsedDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_Clear(void * jarg1) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_Add(void * jarg1, void * jarg2) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type *arg2 = 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  temp2 = (std::vector< indri::api::QueryAnnotationNode * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< indri::api::QueryAnnotationNode * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_QueryAnnotationNodeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::size_type result;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  result = ((std::vector< indri::api::QueryAnnotationNode * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_QueryAnnotationNodeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::size_type result;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  result = ((std::vector< indri::api::QueryAnnotationNode * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::size_type arg2 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (std::vector< indri::api::QueryAnnotationNode * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QueryAnnotationNodeVector__SWIG_0() {
  void * jresult ;
  std::vector< indri::api::QueryAnnotationNode * > *result = 0 ;
  
  result = (std::vector< indri::api::QueryAnnotationNode * > *)new std::vector< indri::api::QueryAnnotationNode * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QueryAnnotationNodeVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< indri::api::QueryAnnotationNode * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< indri::api::QueryAnnotationNode * > *)new_std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotationNodeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  indri::api::QueryAnnotationNode *result = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (indri::api::QueryAnnotationNode *)std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotationNodeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type *result = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< indri::api::QueryAnnotationNode * >::const_reference _result_ref = std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector< indri::api::QueryAnnotationNode * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type *arg3 = 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< indri::api::QueryAnnotationNode * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__setitem(arg1,arg2,(indri::api::QueryAnnotationNode *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * > *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::QueryAnnotationNode * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__AddRange(arg1,(std::vector< indri::api::QueryAnnotationNode * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotationNodeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< indri::api::QueryAnnotationNode * > *result = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< indri::api::QueryAnnotationNode * > *)std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type *arg3 = 0 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< indri::api::QueryAnnotationNode * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Insert(arg1,arg2,(indri::api::QueryAnnotationNode *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::QueryAnnotationNode * > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::QueryAnnotationNode * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__InsertRange(arg1,arg2,(std::vector< indri::api::QueryAnnotationNode * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotationNodeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< indri::api::QueryAnnotationNode * >::value_type temp1 = 0 ;
  std::vector< indri::api::QueryAnnotationNode * > *result = 0 ;
  
  temp1 = (std::vector< indri::api::QueryAnnotationNode * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< indri::api::QueryAnnotationNode * > *)std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Repeat((indri::api::QueryAnnotationNode *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNodeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::QueryAnnotationNode * > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::QueryAnnotationNode * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_QueryAnnotationNode_Sm__Sg__SetRange(arg1,arg2,(std::vector< indri::api::QueryAnnotationNode * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QueryAnnotationNodeVector(void * jarg1) {
  std::vector< indri::api::QueryAnnotationNode * > *arg1 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  
  arg1 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNode_name_set(void * jarg1, char * jarg2) {
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_QueryAnnotationNode_name_get(void * jarg1) {
  char * jresult ;
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->name);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNode_type_set(void * jarg1, char * jarg2) {
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_QueryAnnotationNode_type_get(void * jarg1) {
  char * jresult ;
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->type);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNode_queryText_set(void * jarg1, char * jarg2) {
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->queryText = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_QueryAnnotationNode_queryText_get(void * jarg1) {
  char * jresult ;
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->queryText);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryAnnotationNode_children_set(void * jarg1, void * jarg2) {
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * > *arg2 = (std::vector< indri::api::QueryAnnotationNode * > *) 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  arg2 = (std::vector< indri::api::QueryAnnotationNode * > *)jarg2; 
  if (arg1) (arg1)->children = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotationNode_children_get(void * jarg1) {
  void * jresult ;
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  std::vector< indri::api::QueryAnnotationNode * > *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  result = (std::vector< indri::api::QueryAnnotationNode * > *)& ((arg1)->children);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QueryAnnotationNode() {
  void * jresult ;
  indri::api::QueryAnnotationNode *result = 0 ;
  
  result = (indri::api::QueryAnnotationNode *)new indri::api::QueryAnnotationNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QueryAnnotationNode(void * jarg1) {
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  
  arg1 = (indri::api::QueryAnnotationNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotation_getQueryTree(void * jarg1) {
  void * jresult ;
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  indri::api::QueryAnnotationNode *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotation *)jarg1; 
  try {
    result = (indri::api::QueryAnnotationNode *)((indri::api::QueryAnnotation const *)arg1)->getQueryTree();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotation_getAnnotations(void * jarg1) {
  void * jresult ;
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotation *)jarg1; 
  try {
    {
      std::map< std::string,std::vector< indri::api::ScoredExtentResult > > const &_result_ref = ((indri::api::QueryAnnotation const *)arg1)->getAnnotations();
      result = (std::map< std::string,std::vector< indri::api::ScoredExtentResult > > *) &_result_ref;
    }
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryAnnotation_getResults(void * jarg1) {
  void * jresult ;
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  
  arg1 = (indri::api::QueryAnnotation *)jarg1; 
  try {
    {
      std::vector< indri::api::ScoredExtentResult > const &_result_ref = ((indri::api::QueryAnnotation const *)arg1)->getResults();
      result = (std::vector< indri::api::ScoredExtentResult > *) &_result_ref;
    }
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QueryAnnotation() {
  void * jresult ;
  indri::api::QueryAnnotation *result = 0 ;
  
  result = (indri::api::QueryAnnotation *)new indri::api::QueryAnnotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QueryAnnotation(void * jarg1) {
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  
  arg1 = (indri::api::QueryAnnotation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_Clear(void * jarg1) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_Add(void * jarg1, void * jarg2) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  std::vector< indri::api::ScoredExtentResult >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (std::vector< indri::api::ScoredExtentResult >::value_type *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< indri::api::ScoredExtentResult >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ScoredExtentResultVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  std::vector< indri::api::ScoredExtentResult >::size_type result;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  result = ((std::vector< indri::api::ScoredExtentResult > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ScoredExtentResultVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  std::vector< indri::api::ScoredExtentResult >::size_type result;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  result = ((std::vector< indri::api::ScoredExtentResult > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  std::vector< indri::api::ScoredExtentResult >::size_type arg2 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (std::vector< indri::api::ScoredExtentResult >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScoredExtentResultVector__SWIG_0() {
  void * jresult ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  
  result = (std::vector< indri::api::ScoredExtentResult > *)new std::vector< indri::api::ScoredExtentResult >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScoredExtentResultVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< indri::api::ScoredExtentResult > *)new_std_vector_Sl_indri_api_ScoredExtentResult_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScoredExtentResultVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  indri::api::ScoredExtentResult result;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_indri_api_ScoredExtentResult_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new indri::api::ScoredExtentResult((const indri::api::ScoredExtentResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScoredExtentResultVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ScoredExtentResult >::value_type *result = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< indri::api::ScoredExtentResult >::const_reference _result_ref = std_vector_Sl_indri_api_ScoredExtentResult_Sg__getitem(arg1,arg2);
      result = (std::vector< indri::api::ScoredExtentResult >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ScoredExtentResult >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::ScoredExtentResult >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__setitem(arg1,arg2,(indri::api::ScoredExtentResult const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (std::vector< indri::api::ScoredExtentResult > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_indri_api_ScoredExtentResult_Sg__AddRange(arg1,(std::vector< indri::api::ScoredExtentResult > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScoredExtentResultVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< indri::api::ScoredExtentResult > *)std_vector_Sl_indri_api_ScoredExtentResult_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ScoredExtentResult >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::ScoredExtentResult >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__Insert(arg1,arg2,(indri::api::ScoredExtentResult const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::ScoredExtentResult > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__InsertRange(arg1,arg2,(std::vector< indri::api::ScoredExtentResult > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScoredExtentResultVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::ScoredExtentResult >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult >::value_type *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult >::value_type const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< indri::api::ScoredExtentResult > *)std_vector_Sl_indri_api_ScoredExtentResult_Sg__Repeat((indri::api::ScoredExtentResult const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  std_vector_Sl_indri_api_ScoredExtentResult_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResultVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  int arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::ScoredExtentResult > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_ScoredExtentResult_Sg__SetRange(arg1,arg2,(std::vector< indri::api::ScoredExtentResult > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScoredExtentResultVector(void * jarg1) {
  std::vector< indri::api::ScoredExtentResult > *arg1 = (std::vector< indri::api::ScoredExtentResult > *) 0 ;
  
  arg1 = (std::vector< indri::api::ScoredExtentResult > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_score_set(void * jarg1, double jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  double arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ScoredExtentResult_score_get(void * jarg1) {
  double jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  double result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (double) ((arg1)->score);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_document_set(void * jarg1, int jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScoredExtentResult_document_get(void * jarg1) {
  int jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (int) ((arg1)->document);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_begin_set(void * jarg1, int jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScoredExtentResult_begin_get(void * jarg1) {
  int jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (int) ((arg1)->begin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_end_set(void * jarg1, int jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScoredExtentResult_end_get(void * jarg1) {
  int jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_number_set(void * jarg1, long long jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  INT64 arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (INT64)jarg2; 
  if (arg1) (arg1)->number = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ScoredExtentResult_number_get(void * jarg1) {
  long long jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  INT64 result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (INT64) ((arg1)->number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_ordinal_set(void * jarg1, int jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ordinal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScoredExtentResult_ordinal_get(void * jarg1) {
  int jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (int) ((arg1)->ordinal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScoredExtentResult_parentOrdinal_set(void * jarg1, int jarg2) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->parentOrdinal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScoredExtentResult_parentOrdinal_get(void * jarg1) {
  int jresult ;
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  int result;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  result = (int) ((arg1)->parentOrdinal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScoredExtentResult() {
  void * jresult ;
  indri::api::ScoredExtentResult *result = 0 ;
  
  result = (indri::api::ScoredExtentResult *)new indri::api::ScoredExtentResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScoredExtentResult(void * jarg1) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  
  arg1 = (indri::api::ScoredExtentResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Parameters() {
  void * jresult ;
  indri::api::Parameters *result = 0 ;
  
  result = (indri::api::Parameters *)new indri::api::Parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Parameters(void * jarg1) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parameters_get__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->get((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parameters_get__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->get((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Parameters_get__SWIG_2(void * jarg1, char * jarg2, double jarg3) {
  double jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->get((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Parameters_get__SWIG_3(void * jarg1, char * jarg2, long long jarg3) {
  long long jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  INT64 arg3 ;
  INT64 result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (INT64)jarg3; 
  result = (INT64)(arg1)->get((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Parameters_get__SWIG_4(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->get((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_remove(void * jarg1, char * jarg2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->remove((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_set__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_set__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->set((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_set__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (arg1)->set((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_set__SWIG_3(void * jarg1, char * jarg2, long long jarg3) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  UINT64 arg3 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (UINT64)jarg3; 
  (arg1)->set((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_set__SWIG_4(void * jarg1, char * jarg2, double jarg3) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->set((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_set__SWIG_5(void * jarg1, char * jarg2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_clear(void * jarg1) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Parameters_size(void * jarg1) {
  unsigned long jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  size_t result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  result = (arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parameters_exists__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->exists(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parameters_exists__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->exists((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parameters_load(void * jarg1, char * jarg2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::Parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->load((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Parameters_instance() {
  void * jresult ;
  indri::api::Parameters *result = 0 ;
  
  {
    indri::api::Parameters &_result_ref = indri::api::Parameters::instance();
    result = (indri::api::Parameters *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_Clear(void * jarg1) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_Add(void * jarg1, void * jarg2) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  std::vector< indri::api::DocumentVector * >::value_type *arg2 = 0 ;
  std::vector< indri::api::DocumentVector * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  temp2 = (std::vector< indri::api::DocumentVector * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< indri::api::DocumentVector * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DocumentVectorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  std::vector< indri::api::DocumentVector * >::size_type result;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  result = ((std::vector< indri::api::DocumentVector * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DocumentVectorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  std::vector< indri::api::DocumentVector * >::size_type result;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  result = ((std::vector< indri::api::DocumentVector * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  std::vector< indri::api::DocumentVector * >::size_type arg2 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (std::vector< indri::api::DocumentVector * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DocumentVectorVector__SWIG_0() {
  void * jresult ;
  std::vector< indri::api::DocumentVector * > *result = 0 ;
  
  result = (std::vector< indri::api::DocumentVector * > *)new std::vector< indri::api::DocumentVector * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DocumentVectorVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< indri::api::DocumentVector * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< indri::api::DocumentVector * > *)new_std_vector_Sl_indri_api_DocumentVector_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVectorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  indri::api::DocumentVector *result = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (indri::api::DocumentVector *)std_vector_Sl_indri_api_DocumentVector_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVectorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector * >::value_type *result = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< indri::api::DocumentVector * >::const_reference _result_ref = std_vector_Sl_indri_api_DocumentVector_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector< indri::api::DocumentVector * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector * >::value_type *arg3 = 0 ;
  std::vector< indri::api::DocumentVector * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< indri::api::DocumentVector * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__setitem(arg1,arg2,(indri::api::DocumentVector *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  std::vector< indri::api::DocumentVector * > *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (std::vector< indri::api::DocumentVector * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_indri_api_DocumentVector_Sm__Sg__AddRange(arg1,(std::vector< indri::api::DocumentVector * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVectorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< indri::api::DocumentVector * > *result = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< indri::api::DocumentVector * > *)std_vector_Sl_indri_api_DocumentVector_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector * >::value_type *arg3 = 0 ;
  std::vector< indri::api::DocumentVector * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< indri::api::DocumentVector * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Insert(arg1,arg2,(indri::api::DocumentVector *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector * > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::DocumentVector * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__InsertRange(arg1,arg2,(std::vector< indri::api::DocumentVector * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVectorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::DocumentVector * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector * >::value_type temp1 = 0 ;
  std::vector< indri::api::DocumentVector * > *result = 0 ;
  
  temp1 = (std::vector< indri::api::DocumentVector * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< indri::api::DocumentVector * > *)std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Repeat((indri::api::DocumentVector *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentVectorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector * > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::DocumentVector * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_DocumentVector_Sm__Sg__SetRange(arg1,arg2,(std::vector< indri::api::DocumentVector * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DocumentVectorVector(void * jarg1) {
  std::vector< indri::api::DocumentVector * > *arg1 = (std::vector< indri::api::DocumentVector * > *) 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_Clear(void * jarg1) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_Add(void * jarg1, void * jarg2) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  std::vector< indri::api::DocumentVector::Field >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (std::vector< indri::api::DocumentVector::Field >::value_type *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< indri::api::DocumentVector::Field >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FieldVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  std::vector< indri::api::DocumentVector::Field >::size_type result;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  result = ((std::vector< indri::api::DocumentVector::Field > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FieldVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  std::vector< indri::api::DocumentVector::Field >::size_type result;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  result = ((std::vector< indri::api::DocumentVector::Field > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  std::vector< indri::api::DocumentVector::Field >::size_type arg2 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (std::vector< indri::api::DocumentVector::Field >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FieldVector__SWIG_0() {
  void * jresult ;
  std::vector< indri::api::DocumentVector::Field > *result = 0 ;
  
  result = (std::vector< indri::api::DocumentVector::Field > *)new std::vector< indri::api::DocumentVector::Field >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FieldVector__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< indri::api::DocumentVector::Field > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< indri::api::DocumentVector::Field > *)new_std_vector_Sl_indri_api_DocumentVector_Field_Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FieldVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  indri::api::DocumentVector::Field result;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_indri_api_DocumentVector_Field_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new indri::api::DocumentVector::Field((const indri::api::DocumentVector::Field &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FieldVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector::Field >::value_type *result = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector< indri::api::DocumentVector::Field >::const_reference _result_ref = std_vector_Sl_indri_api_DocumentVector_Field_Sg__getitem(arg1,arg2);
      result = (std::vector< indri::api::DocumentVector::Field >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector::Field >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::DocumentVector::Field >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__setitem(arg1,arg2,(indri::api::Field const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  std::vector< indri::api::DocumentVector::Field > *arg2 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (std::vector< indri::api::DocumentVector::Field > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_indri_api_DocumentVector_Field_Sg__AddRange(arg1,(std::vector< indri::api::DocumentVector::Field > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FieldVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< indri::api::DocumentVector::Field > *result = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< indri::api::DocumentVector::Field > *)std_vector_Sl_indri_api_DocumentVector_Field_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector::Field >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::DocumentVector::Field >::value_type *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__Insert(arg1,arg2,(indri::api::Field const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector::Field > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::DocumentVector::Field > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__InsertRange(arg1,arg2,(std::vector< indri::api::DocumentVector::Field > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FieldVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< indri::api::DocumentVector::Field >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector::Field > *result = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field >::value_type *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field >::value_type const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< indri::api::DocumentVector::Field > *)std_vector_Sl_indri_api_DocumentVector_Field_Sg__Repeat((indri::api::Field const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  std_vector_Sl_indri_api_DocumentVector_Field_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_FieldVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  int arg2 ;
  std::vector< indri::api::DocumentVector::Field > *arg3 = 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< indri::api::DocumentVector::Field > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::DocumentVector::Field > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_indri_api_DocumentVector_Field_Sg__SetRange(arg1,arg2,(std::vector< indri::api::DocumentVector::Field > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FieldVector(void * jarg1) {
  std::vector< indri::api::DocumentVector::Field > *arg1 = (std::vector< indri::api::DocumentVector::Field > *) 0 ;
  
  arg1 = (std::vector< indri::api::DocumentVector::Field > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Field_name_set(void * jarg1, char * jarg2) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Field_name_get(void * jarg1) {
  char * jresult ;
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->name);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Field_begin_set(void * jarg1, int jarg2) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Field_begin_get(void * jarg1) {
  int jresult ;
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int result;
  
  arg1 = (indri::api::Field *)jarg1; 
  result = (int) ((arg1)->begin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Field_end_set(void * jarg1, int jarg2) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Field_end_get(void * jarg1) {
  int jresult ;
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int result;
  
  arg1 = (indri::api::Field *)jarg1; 
  result = (int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Field_number_set(void * jarg1, long long jarg2) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  INT64 arg2 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  arg2 = (INT64)jarg2; 
  if (arg1) (arg1)->number = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Field_number_get(void * jarg1) {
  long long jresult ;
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  INT64 result;
  
  arg1 = (indri::api::Field *)jarg1; 
  result = (INT64) ((arg1)->number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Field_ordinal_set(void * jarg1, int jarg2) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ordinal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Field_ordinal_get(void * jarg1) {
  int jresult ;
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int result;
  
  arg1 = (indri::api::Field *)jarg1; 
  result = (int) ((arg1)->ordinal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Field_parentOrdinal_set(void * jarg1, int jarg2) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->parentOrdinal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Field_parentOrdinal_get(void * jarg1) {
  int jresult ;
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  int result;
  
  arg1 = (indri::api::Field *)jarg1; 
  result = (int) ((arg1)->parentOrdinal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Field() {
  void * jresult ;
  indri::api::Field *result = 0 ;
  
  result = (indri::api::Field *)new indri::api::Field();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Field(void * jarg1) {
  indri::api::Field *arg1 = (indri::api::Field *) 0 ;
  
  arg1 = (indri::api::Field *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVector_stems(void * jarg1) {
  void * jresult ;
  indri::api::DocumentVector *arg1 = (indri::api::DocumentVector *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (indri::api::DocumentVector *)jarg1; 
  {
    std::vector< std::string > &_result_ref = (arg1)->stems();
    result = (std::vector< std::string > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVector_positions(void * jarg1) {
  void * jresult ;
  indri::api::DocumentVector *arg1 = (indri::api::DocumentVector *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (indri::api::DocumentVector *)jarg1; 
  {
    std::vector< int > &_result_ref = (arg1)->positions();
    result = (std::vector< int > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentVector_fields(void * jarg1) {
  void * jresult ;
  indri::api::DocumentVector *arg1 = (indri::api::DocumentVector *) 0 ;
  std::vector< indri::api::DocumentVector::Field > *result = 0 ;
  
  arg1 = (indri::api::DocumentVector *)jarg1; 
  {
    std::vector< indri::api::DocumentVector::Field > &_result_ref = (arg1)->fields();
    result = (std::vector< indri::api::DocumentVector::Field > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DocumentVector() {
  void * jresult ;
  indri::api::DocumentVector *result = 0 ;
  
  result = (indri::api::DocumentVector *)new indri::api::DocumentVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DocumentVector(void * jarg1) {
  indri::api::DocumentVector *arg1 = (indri::api::DocumentVector *) 0 ;
  
  arg1 = (indri::api::DocumentVector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_name_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_name_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->name);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_parser_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->parser = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_parser_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->parser);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_tokenizer_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->tokenizer = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_tokenizer_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->tokenizer);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_iterator_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->iterator = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_iterator_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->iterator);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_startDocTag_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->startDocTag = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_startDocTag_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->startDocTag);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_endDocTag_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->endDocTag = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_endDocTag_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->endDocTag);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_endMetadataTag_set(void * jarg1, char * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->endMetadataTag = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Specification_endMetadataTag_get(void * jarg1) {
  char * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->endMetadataTag);
    result = (std::string *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_include_set(void * jarg1, void * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->include = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Specification_include_get(void * jarg1) {
  void * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->include);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_exclude_set(void * jarg1, void * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->exclude = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Specification_exclude_get(void * jarg1) {
  void * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->exclude);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_index_set(void * jarg1, void * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->index = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Specification_index_get(void * jarg1) {
  void * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->index);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_metadata_set(void * jarg1, void * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->metadata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Specification_metadata_get(void * jarg1) {
  void * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->metadata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Specification_conflations_set(void * jarg1, void * jarg2) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg2 = (std::map< indri::parse::ConflationPattern *,std::string > *) 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  arg2 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg2; 
  if (arg1) (arg1)->conflations = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Specification_conflations_get(void * jarg1) {
  void * jresult ;
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  std::map< indri::parse::ConflationPattern *,std::string > *result = 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  result = (std::map< indri::parse::ConflationPattern *,std::string > *)& ((arg1)->conflations);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Specification() {
  void * jresult ;
  indri::parse::Specification *result = 0 ;
  
  result = (indri::parse::Specification *)new indri::parse::Specification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Specification(void * jarg1) {
  indri::parse::Specification *arg1 = (indri::parse::Specification *) 0 ;
  
  arg1 = (indri::parse::Specification *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QueryEnvironment() {
  void * jresult ;
  indri::api::QueryEnvironment *result = 0 ;
  
  result = (indri::api::QueryEnvironment *)new indri::api::QueryEnvironment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_addServer(void * jarg1, char * jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->addServer((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_addIndex(void * jarg1, char * jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->addIndex((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_removeServer(void * jarg1, char * jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->removeServer((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_removeIndex(void * jarg1, char * jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->removeIndex((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_close(void * jarg1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  try {
    (arg1)->close();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_setMemory(void * jarg1, long long jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (UINT64)jarg2; 
  try {
    (arg1)->setMemory(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_setScoringRules(void * jarg1, void * jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setScoringRules((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_QueryEnvironment_setStopwords(void * jarg1, void * jarg2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setStopwords((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_runQuery__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::vector< indri::api::ScoredExtentResult > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    result = (arg1)->runQuery((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ScoredExtentResult >((const std::vector< indri::api::ScoredExtentResult > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_runQuery__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  std::vector< indri::api::ScoredExtentResult > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< int > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  try {
    result = (arg1)->runQuery((std::string const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ScoredExtentResult >((const std::vector< indri::api::ScoredExtentResult > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_runAnnotatedQuery__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  indri::api::QueryAnnotation *result = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    result = (indri::api::QueryAnnotation *)(arg1)->runAnnotatedQuery((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_runAnnotatedQuery__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  indri::api::QueryAnnotation *result = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< int > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  try {
    result = (indri::api::QueryAnnotation *)(arg1)->runAnnotatedQuery((std::string const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documents__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< indri::api::ParsedDocument * > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  try {
    result = (arg1)->documents((std::vector< int > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ParsedDocument * >((const std::vector< indri::api::ParsedDocument * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documents__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *arg2 = 0 ;
  std::vector< indri::api::ParsedDocument * > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< indri::api::ScoredExtentResult > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > const & type is null", 0);
    return 0;
  } 
  try {
    result = (arg1)->documents((std::vector< indri::api::ScoredExtentResult > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ParsedDocument * >((const std::vector< indri::api::ParsedDocument * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documentMetadata__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (arg1)->documentMetadata((std::vector< int > const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documentMetadata__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< indri::api::ScoredExtentResult > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (arg1)->documentMetadata((std::vector< indri::api::ScoredExtentResult > const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documentIDsFromMetadata(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< int > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< std::string > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  try {
    result = (arg1)->documentIDsFromMetadata((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documentsFromMetadata(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< indri::api::ParsedDocument * > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< std::string > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  try {
    result = (arg1)->documentsFromMetadata((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ParsedDocument * >((const std::vector< indri::api::ParsedDocument * > &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QueryEnvironment_termCount__SWIG_0(void * jarg1) {
  long long jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  INT64 result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  try {
    result = (INT64)(arg1)->termCount();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QueryEnvironment_termCount__SWIG_1(void * jarg1, char * jarg2) {
  long long jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  INT64 result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (INT64)(arg1)->termCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QueryEnvironment_termFieldCount(void * jarg1, char * jarg2, char * jarg3) {
  long long jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  INT64 result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (INT64)(arg1)->termFieldCount((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_fieldList(void * jarg1) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  try {
    result = (arg1)->fieldList();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QueryEnvironment_documentCount__SWIG_0(void * jarg1) {
  long long jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  INT64 result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  try {
    result = (INT64)(arg1)->documentCount();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QueryEnvironment_documentCount__SWIG_1(void * jarg1, char * jarg2) {
  long long jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  INT64 result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (INT64)(arg1)->documentCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_documentVectors(void * jarg1, void * jarg2) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< indri::api::DocumentVector * > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  try {
    result = (arg1)->documentVectors((std::vector< int > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::DocumentVector * >((const std::vector< indri::api::DocumentVector * > &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_QueryEnvironment_expressionCount__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  double jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (double)(arg1)->expressionCount((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_QueryEnvironment_expressionCount__SWIG_1(void * jarg1, char * jarg2) {
  double jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (double)(arg1)->expressionCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_expressionList__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< indri::api::ScoredExtentResult > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (arg1)->expressionList((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ScoredExtentResult >((const std::vector< indri::api::ScoredExtentResult > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryEnvironment_expressionList__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< indri::api::ScoredExtentResult > result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->expressionList((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = new std::vector< indri::api::ScoredExtentResult >((const std::vector< indri::api::ScoredExtentResult > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryEnvironment_documentLength(void * jarg1, int jarg2) {
  int jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)(arg1)->documentLength(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QueryEnvironment(void * jarg1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QueryExpander(void * jarg1) {
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  
  arg1 = (indri::query::QueryExpander *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryExpander_runExpandedQuery__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  std::vector< indri::api::ScoredExtentResult > result;
  
  arg1 = (indri::query::QueryExpander *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->runExpandedQuery(arg2,arg3,arg4);
  jresult = new std::vector< indri::api::ScoredExtentResult >((const std::vector< indri::api::ScoredExtentResult > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QueryExpander_runExpandedQuery__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::vector< indri::api::ScoredExtentResult > result;
  
  arg1 = (indri::query::QueryExpander *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (arg1)->runExpandedQuery(arg2,arg3);
  jresult = new std::vector< indri::api::ScoredExtentResult >((const std::vector< indri::api::ScoredExtentResult > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_QueryExpander_expand(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  std::string arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  std::string result;
  
  arg1 = (indri::query::QueryExpander *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (std::vector< indri::api::ScoredExtentResult > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > & type is null", 0);
    return 0;
  } 
  result = (arg1)->expand(arg2,*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RMExpander(void * jarg1, void * jarg2) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  indri::api::Parameters *arg2 = 0 ;
  indri::query::RMExpander *result = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (indri::api::Parameters *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::api::Parameters & type is null", 0);
    return 0;
  } 
  result = (indri::query::RMExpander *)new indri::query::RMExpander(arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RMExpander_expand(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  indri::query::RMExpander *arg1 = (indri::query::RMExpander *) 0 ;
  std::string arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  std::string result;
  
  arg1 = (indri::query::RMExpander *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (std::vector< indri::api::ScoredExtentResult > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > & type is null", 0);
    return 0;
  } 
  result = (arg1)->expand(arg2,*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RMExpander(void * jarg1) {
  indri::query::RMExpander *arg1 = (indri::query::RMExpander *) 0 ;
  
  arg1 = (indri::query::RMExpander *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PonteExpander(void * jarg1, void * jarg2) {
  void * jresult ;
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  indri::api::Parameters *arg2 = 0 ;
  indri::query::PonteExpander *result = 0 ;
  
  arg1 = (indri::api::QueryEnvironment *)jarg1; 
  arg2 = (indri::api::Parameters *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::api::Parameters & type is null", 0);
    return 0;
  } 
  result = (indri::query::PonteExpander *)new indri::query::PonteExpander(arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PonteExpander_expand(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  indri::query::PonteExpander *arg1 = (indri::query::PonteExpander *) 0 ;
  std::string arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  std::string result;
  
  arg1 = (indri::query::PonteExpander *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (std::vector< indri::api::ScoredExtentResult > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::api::ScoredExtentResult > & type is null", 0);
    return 0;
  } 
  result = (arg1)->expand(arg2,*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PonteExpander(void * jarg1) {
  indri::query::PonteExpander *arg1 = (indri::query::PonteExpander *) 0 ;
  
  arg1 = (indri::query::PonteExpander *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IndexStatus(void * jarg1) {
  indri::api::IndexStatus *arg1 = (indri::api::IndexStatus *) 0 ;
  
  arg1 = (indri::api::IndexStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexStatus_status(void * jarg1, int jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6) {
  indri::api::IndexStatus *arg1 = (indri::api::IndexStatus *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (indri::api::IndexStatus *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->status(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IndexStatus() {
  void * jresult ;
  indri::api::IndexStatus *result = 0 ;
  
  result = (indri::api::IndexStatus *)new SwigDirector_IndexStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexStatus_director_connect(void *objarg, SwigDirector_IndexStatus::SWIG_Callback0_t callback0) {
  indri::api::IndexStatus *obj = (indri::api::IndexStatus *)objarg;
  SwigDirector_IndexStatus *director = dynamic_cast<SwigDirector_IndexStatus *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IndexEnvironment() {
  void * jresult ;
  indri::api::IndexEnvironment *result = 0 ;
  
  result = (indri::api::IndexEnvironment *)new indri::api::IndexEnvironment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IndexEnvironment(void * jarg1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setDocumentRoot(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->setDocumentRoot((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setAnchorTextPath(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->setAnchorTextPath((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setOffsetMetadataPath(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->setOffsetMetadataPath((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setOffsetAnnotationsPath(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->setOffsetAnnotationsPath((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_addFileClass__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::vector< std::string > *arg9 = 0 ;
  std::vector< std::string > *arg10 = 0 ;
  std::vector< std::string > *arg11 = 0 ;
  std::vector< std::string > *arg12 = 0 ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg13 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg8_str(jarg8);
  arg8 = &arg8_str; 
  arg9 = (std::vector< std::string > *)jarg9;
  if(!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg10 = (std::vector< std::string > *)jarg10;
  if(!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg11 = (std::vector< std::string > *)jarg11;
  if(!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg12 = (std::vector< std::string > *)jarg12;
  if(!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg13 = (std::map< indri::parse::ConflationPattern *,std::string > *)jarg13;
  if(!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< indri::parse::ConflationPattern *,std::string > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->addFileClass((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(std::vector< std::string > const &)*arg9,(std::vector< std::string > const &)*arg10,(std::vector< std::string > const &)*arg11,(std::vector< std::string > const &)*arg12,(std::map< indri::parse::ConflationPattern *,std::string > const &)*arg13);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IndexEnvironment_getFileClassSpec(void * jarg1, char * jarg2) {
  void * jresult ;
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  indri::parse::Specification *result = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (indri::parse::Specification *)(arg1)->getFileClassSpec((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_addFileClass__SWIG_1(void * jarg1, void * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  indri::parse::Specification *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (indri::parse::Specification *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "indri::parse::Specification const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->addFileClass((indri::parse::Specification const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_deleteDocument(void * jarg1, int jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  int arg2 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->deleteDocument(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setIndexedFields(void * jarg1, void * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setIndexedFields((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setNumericField__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  try {
    (arg1)->setNumericField((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setNumericField__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setNumericField((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setMetadataIndexedFields(void * jarg1, void * jarg2, void * jarg3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< std::string > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setMetadataIndexedFields((std::vector< std::string > const &)*arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setStopwords(void * jarg1, void * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setStopwords((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setStemmer(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->setStemmer((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setMemory(void * jarg1, long long jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (UINT64)jarg2; 
  try {
    (arg1)->setMemory(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setNormalization(void * jarg1, unsigned int jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  bool arg2 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setNormalization(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_setStoreDocs(void * jarg1, unsigned int jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  bool arg2 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setStoreDocs(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_create__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  indri::api::IndexStatus *arg3 = (indri::api::IndexStatus *) 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (indri::api::IndexStatus *)jarg3; 
  try {
    (arg1)->create((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_create__SWIG_1(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->create((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_open__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  indri::api::IndexStatus *arg3 = (indri::api::IndexStatus *) 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (indri::api::IndexStatus *)jarg3; 
  try {
    (arg1)->open((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_open__SWIG_1(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->open((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_close(void * jarg1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  try {
    (arg1)->close();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_addFile__SWIG_0(void * jarg1, char * jarg2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->addFile((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IndexEnvironment_addFile__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->addFile((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_IndexEnvironment_addString(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  int jresult ;
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< indri::parse::MetadataPair > *arg4 = 0 ;
  int result;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (std::vector< indri::parse::MetadataPair > *)jarg4;
  if(!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< indri::parse::MetadataPair > const & type is null", 0);
    return 0;
  } 
  try {
    result = (int)(arg1)->addString((std::string const &)*arg2,(std::string const &)*arg3,(std::vector< indri::parse::MetadataPair > const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IndexEnvironment_addParsedDocument(void * jarg1, void * jarg2) {
  int jresult ;
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  indri::api::ParsedDocument *arg2 = (indri::api::ParsedDocument *) 0 ;
  int result;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  arg2 = (indri::api::ParsedDocument *)jarg2; 
  try {
    result = (int)(arg1)->addParsedDocument(arg2);
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IndexEnvironment_documentsIndexed(void * jarg1) {
  int jresult ;
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  int result;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  try {
    result = (int)(arg1)->documentsIndexed();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IndexEnvironment_documentsSeen(void * jarg1) {
  int jresult ;
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  int result;
  
  arg1 = (indri::api::IndexEnvironment *)jarg1; 
  try {
    result = (int)(arg1)->documentsSeen();
  }
  catch(lemur::api::Exception &_e) {
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, ("C++ #lemur::api::Exception exception: " + (&_e)->what()).c_str());
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT indri::query::QueryExpander * SWIGSTDCALL CSharp_RMExpanderUpcast(indri::query::RMExpander *objectRef) {
    return (indri::query::QueryExpander *)objectRef;
}

SWIGEXPORT indri::query::QueryExpander * SWIGSTDCALL CSharp_PonteExpanderUpcast(indri::query::PonteExpander *objectRef) {
    return (indri::query::QueryExpander *)objectRef;
}

#ifdef __cplusplus
}
#endif

