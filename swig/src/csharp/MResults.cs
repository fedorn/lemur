/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Indri {

using System;
using System.Runtime.InteropServices;

public class MResults : IDisposable 
#if !SWIG_DOTNET_1
    , System.Collections.Generic.IDictionary<string, ScoredExtentResultVector>
#endif
 {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MResults(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MResults obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MResults() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          indri_csharpPINVOKE.delete_MResults(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }


  public ScoredExtentResultVector this[string key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(string key, out ScoredExtentResultVector value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(ScoredExtentResultVector);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get { 
      return false; 
    }
  }

#if !SWIG_DOTNET_1

  public System.Collections.Generic.ICollection<string> Keys {
    get {
      System.Collections.Generic.ICollection<string> keys = new System.Collections.Generic.List<string>();
      IntPtr iter = create_iterator_begin();
      try {
        while (true) {
          keys.Add(get_next_key(iter));
        }
      } catch (ArgumentOutOfRangeException) {
      }
      return keys;
    }
  }

  public System.Collections.Generic.ICollection<ScoredExtentResultVector> Values {
    get {
      System.Collections.Generic.ICollection<ScoredExtentResultVector> vals = new System.Collections.Generic.List<ScoredExtentResultVector>();
      foreach (System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }
  
  public void Add(System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>[] array, int arrayIndex) {
    if (array == null)
      throw new ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new ArgumentException("Number of elements to copy is too large.");

    System.Collections.Generic.IList<string> keyList = new System.Collections.Generic.List<string>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      string currentKey = keyList[i];
      array.SetValue(new System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>>.GetEnumerator() {
    return new MResultsEnumerator(this);
  }

  System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
    return new MResultsEnumerator(this);
  }

  public MResultsEnumerator GetEnumerator() {
    return new MResultsEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class MResultsEnumerator : System.Collections.IEnumerator, 
      System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>>
  {
    private MResults collectionRef;
    private System.Collections.Generic.IList<string> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public MResultsEnumerator(MResults collection) {
      collectionRef = collection;
      keyCollection = new System.Collections.Generic.List<string>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector> Current {
      get {
        if (currentIndex == -1)
          throw new InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new InvalidOperationException("Collection modified.");
        return (System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        string currentKey = keyCollection[currentIndex];
        currentObject = new System.Collections.Generic.KeyValuePair<string, ScoredExtentResultVector>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }
#endif
  

  public MResults() : this(indri_csharpPINVOKE.new_MResults__SWIG_0(), true) {
  }

  public MResults(MResults other) : this(indri_csharpPINVOKE.new_MResults__SWIG_1(MResults.getCPtr(other)), true) {
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = indri_csharpPINVOKE.MResults_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = indri_csharpPINVOKE.MResults_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    indri_csharpPINVOKE.MResults_Clear(swigCPtr);
  }

  private ScoredExtentResultVector getitem(string key) {
    ScoredExtentResultVector ret = new ScoredExtentResultVector(indri_csharpPINVOKE.MResults_getitem(swigCPtr, key), false);
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(string key, ScoredExtentResultVector x) {
    indri_csharpPINVOKE.MResults_setitem(swigCPtr, key, ScoredExtentResultVector.getCPtr(x));
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(string key) {
    bool ret = indri_csharpPINVOKE.MResults_ContainsKey(swigCPtr, key);
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(string key, ScoredExtentResultVector val) {
    indri_csharpPINVOKE.MResults_Add(swigCPtr, key, ScoredExtentResultVector.getCPtr(val));
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(string key) {
    bool ret = indri_csharpPINVOKE.MResults_Remove(swigCPtr, key);
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private IntPtr create_iterator_begin() {
    IntPtr ret = indri_csharpPINVOKE.MResults_create_iterator_begin(swigCPtr);
    return ret;
  }

  private string get_next_key(IntPtr swigiterator) {
    string ret = indri_csharpPINVOKE.MResults_get_next_key(swigCPtr, swigiterator);
    if (indri_csharpPINVOKE.SWIGPendingException.Pending) throw indri_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
