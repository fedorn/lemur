/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Indri {

using System;
using System.Runtime.InteropServices;

public class MResults : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MResults(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MResults obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MResults() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      indriPINVOKE.delete_MResults(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public MResults() : this(indriPINVOKE.new_MResults__SWIG_0(), true) {
  }

  public MResults(MResults arg0) : this(indriPINVOKE.new_MResults__SWIG_1(MResults.getCPtr(arg0)), true) {
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = indriPINVOKE.MResults_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = indriPINVOKE.MResults_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    indriPINVOKE.MResults_clear(swigCPtr);
  }

  public ScoredExtentResultVector get(string key) {
    ScoredExtentResultVector ret = new ScoredExtentResultVector(indriPINVOKE.MResults_get(swigCPtr, key), false);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(string key, ScoredExtentResultVector x) {
    indriPINVOKE.MResults_set(swigCPtr, key, ScoredExtentResultVector.getCPtr(x));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void del(string key) {
    indriPINVOKE.MResults_del(swigCPtr, key);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_key(string key) {
    bool ret = indriPINVOKE.MResults_has_key(swigCPtr, key);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
