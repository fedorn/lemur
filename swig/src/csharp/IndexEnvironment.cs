/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Indri {

using System;
using System.Runtime.InteropServices;

public class IndexEnvironment : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IndexEnvironment(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IndexEnvironment obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IndexEnvironment() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      indriPINVOKE.delete_IndexEnvironment(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public IndexEnvironment() : this(indriPINVOKE.new_IndexEnvironment(), true) {
  }

  public void setDocumentRoot(string documentRoot) {
    indriPINVOKE.IndexEnvironment_setDocumentRoot(swigCPtr, documentRoot);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnchorTextPath(string anchorTextRoot) {
    indriPINVOKE.IndexEnvironment_setAnchorTextPath(swigCPtr, anchorTextRoot);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOffsetMetadataPath(string offsetMetadataRoot) {
    indriPINVOKE.IndexEnvironment_setOffsetMetadataPath(swigCPtr, offsetMetadataRoot);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOffsetAnnotationsPath(string offsetAnnotationsRoot) {
    indriPINVOKE.IndexEnvironment_setOffsetAnnotationsPath(swigCPtr, offsetAnnotationsRoot);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFileClass(string name, string iterator, string parser, string tokenizer, string startDocTag, string endDocTag, string endMetadataTag, StringVector include, StringVector exclude, StringVector index, StringVector metadata, ConfMap conflations) {
    indriPINVOKE.IndexEnvironment_addFileClass__SWIG_0(swigCPtr, name, iterator, parser, tokenizer, startDocTag, endDocTag, endMetadataTag, StringVector.getCPtr(include), StringVector.getCPtr(exclude), StringVector.getCPtr(index), StringVector.getCPtr(metadata), ConfMap.getCPtr(conflations));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public Specification getFileClassSpec(string name) {
    IntPtr cPtr = indriPINVOKE.IndexEnvironment_getFileClassSpec(swigCPtr, name);
    Specification ret = (cPtr == IntPtr.Zero) ? null : new Specification(cPtr, false);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addFileClass(Specification spec) {
    indriPINVOKE.IndexEnvironment_addFileClass__SWIG_1(swigCPtr, Specification.getCPtr(spec));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteDocument(int documentID) {
    indriPINVOKE.IndexEnvironment_deleteDocument(swigCPtr, documentID);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setIndexedFields(StringVector fieldNames) {
    indriPINVOKE.IndexEnvironment_setIndexedFields(swigCPtr, StringVector.getCPtr(fieldNames));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNumericField(string fieldName, bool isNumeric, string parserName) {
    indriPINVOKE.IndexEnvironment_setNumericField__SWIG_0(swigCPtr, fieldName, isNumeric, parserName);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNumericField(string fieldName, bool isNumeric) {
    indriPINVOKE.IndexEnvironment_setNumericField__SWIG_1(swigCPtr, fieldName, isNumeric);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMetadataIndexedFields(StringVector forward, StringVector backward) {
    indriPINVOKE.IndexEnvironment_setMetadataIndexedFields(swigCPtr, StringVector.getCPtr(forward), StringVector.getCPtr(backward));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStopwords(StringVector stopwords) {
    indriPINVOKE.IndexEnvironment_setStopwords(swigCPtr, StringVector.getCPtr(stopwords));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStemmer(string stemmer) {
    indriPINVOKE.IndexEnvironment_setStemmer(swigCPtr, stemmer);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMemory(long memory) {
    indriPINVOKE.IndexEnvironment_setMemory(swigCPtr, memory);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNormalization(bool normalize) {
    indriPINVOKE.IndexEnvironment_setNormalization(swigCPtr, normalize);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(string repositoryPath, IndexStatus callback) {
    indriPINVOKE.IndexEnvironment_create__SWIG_0(swigCPtr, repositoryPath, IndexStatus.getCPtr(callback));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(string repositoryPath) {
    indriPINVOKE.IndexEnvironment_create__SWIG_1(swigCPtr, repositoryPath);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void open(string repositoryPath, IndexStatus callback) {
    indriPINVOKE.IndexEnvironment_open__SWIG_0(swigCPtr, repositoryPath, IndexStatus.getCPtr(callback));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void open(string repositoryPath) {
    indriPINVOKE.IndexEnvironment_open__SWIG_1(swigCPtr, repositoryPath);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void close() {
    indriPINVOKE.IndexEnvironment_close(swigCPtr);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFile(string fileName) {
    indriPINVOKE.IndexEnvironment_addFile__SWIG_0(swigCPtr, fileName);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFile(string fileName, string fileClass) {
    indriPINVOKE.IndexEnvironment_addFile__SWIG_1(swigCPtr, fileName, fileClass);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
  }

  public int addString(string fileName, string fileClass, MetadataPairVector metadata) {
    int ret = indriPINVOKE.IndexEnvironment_addString(swigCPtr, fileName, fileClass, MetadataPairVector.getCPtr(metadata));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addParsedDocument(ParsedDocument document) {
    int ret = indriPINVOKE.IndexEnvironment_addParsedDocument(swigCPtr, ParsedDocument.getCPtr(document));
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int documentsIndexed() {
    int ret = indriPINVOKE.IndexEnvironment_documentsIndexed(swigCPtr);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int documentsSeen() {
    int ret = indriPINVOKE.IndexEnvironment_documentsSeen(swigCPtr);
    if (indriPINVOKE.SWIGPendingException.Pending) throw indriPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
