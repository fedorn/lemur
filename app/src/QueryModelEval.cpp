 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * 
 * The Lemur toolkit for language modeling and information retrieval.
 * Copyright (c) 2001 Carnegie Mellon University.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted for research or educational purposes,
 * provided that this copyright notice is maintained and note is made
 * of any changes to the source code.
 * 
 * This is a research system.  The code is distributed on an "as is" basis,
 * without any warranty, express or implied. 
 * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/// Evaluating a query model using the KL-divergence retrieval function



/*! \page QueryModelEval  Query Model Evaluation Application 

This application (QueryModelEval.cpp) loads an expanded query model (e.g., one computed by GenerateQueryModel), 
and evaluates it with the KL-divergence retrieval model.

Parameters:

1) "index": The complete name of the index table-of-content file for the database index.

2) "smoothSupportFile": The name of the smoothing support file (e.g., one generated by GenerateSmoothSupport).

3) "queryModel": the file of the query model to be evaluted 

4) "resultFile": the result file 

5) "TRECResultFormat": whether the result format should be of the TREC format 
 (i.e., six-column) or just a simple three-column format <queryID, docID, score>. Integer value, zero for non-TREC format, and non-zero for TREC format. Default: 1 (i.e., TREC format)

6) "resultCount": the number of documents to return as result for each query

The following are document model smoothing parameters:

7) "smoothMethod": One of the three: Jelinek-Mercer (0), Dirichlet prior (1), and Absolute discounting (2)

8) "smoothStrategy": Either "interpolate" (0) or "backoff" (1)

9) "JelinekMercerLambda": The collection model weight in the JM interpolation method. Default: 0.5

10) "DirichletPrior": The prior parameter in the Dirichlet prior smoothing method. Default: 1000

11) "discountDelta": The delta (discounting constant) in the absolute discounting method. Default 0.7.

 */


#include "Param.hpp"
#include "IndexManager.hpp"
#include "BasicDocStream.hpp"
#include <iostream.h>
#include "SimpleKLRetMethod.hpp"
#include "RetrievalEngine.hpp"
#include "ParamManager.hpp"
#include "ResultFile.hpp"
namespace LocalParameter {
  String queryModel;
  bool TRECResultFormat;

  void get() {
    queryModel = ParamGetString("queryModel","");
    TRECResultFormat = ParamGetInt("resultFormat",1); // default is TREC format
 
  }
};

void GetAppParam()
{
  LocalParameter::get();
  RetrievalParameter::get();
  SimpleKLParameter::get();
}



/// A query model estimation program
int AppMain(int argc, char *argv[]) {
  
  Index  *ind = IndexManager::openIndex(RetrievalParameter::databaseIndex);
  ifstream qmodel(LocalParameter::queryModel, ios::in);
  if (qmodel.fail()) {
    throw Exception("AppMain", "can't open the query model file, check the value for parameter queryModel");
  }
  
  ofstream result(RetrievalParameter::resultFile);

  ResultFile resFile(LocalParameter::TRECResultFormat);

  resFile.openForWrite(result, *ind);

  SimpleKLRetMethod model(*ind, SimpleKLParameter::smoothSupportFile);
  
  model.setDocSmoothParam(SimpleKLParameter::docPrm);
  model.setQueryModelParam(SimpleKLParameter::qryPrm);

  RetrievalEngine eng(model);

  IndexedRealVector res;
  char qid[300];

  SimpleKLQueryModel *q;
  while (qmodel >> qid) {
    cout << "Query "<< qid << endl;
    q = new SimpleKLQueryModel(*ind);
    q->load(qmodel);
    eng.scoreInvertedIndex(*q,res);
    resFile.writeResults(qid, &res, RetrievalParameter::resultCount);
    delete q;
  }
  
  result.close();

  delete ind;
  return 0;
}


