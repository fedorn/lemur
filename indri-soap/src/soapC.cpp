/* soapC.cpp
   Generated by gSOAP 2.7.10 from ../src/indrisoap.hpp
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2008-04-11 12:28:16 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_Options:
		return soap_in_Options(soap, NULL, NULL, "Options");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_indrisoap__doDeleteDocument:
		return soap_in_indrisoap__doDeleteDocument(soap, NULL, NULL, "indrisoap:doDeleteDocument");
	case SOAP_TYPE_indrisoap__doDeleteDocumentResponse:
		return soap_in_indrisoap__doDeleteDocumentResponse(soap, NULL, NULL, "indrisoap:doDeleteDocumentResponse");
	case SOAP_TYPE_indrisoap__doAddDocument:
		return soap_in_indrisoap__doAddDocument(soap, NULL, NULL, "indrisoap:doAddDocument");
	case SOAP_TYPE_indrisoap__doAddDocumentResponse:
		return soap_in_indrisoap__doAddDocumentResponse(soap, NULL, NULL, "indrisoap:doAddDocumentResponse");
	case SOAP_TYPE_indrisoap__doDocumentVectors:
		return soap_in_indrisoap__doDocumentVectors(soap, NULL, NULL, "indrisoap:doDocumentVectors");
	case SOAP_TYPE_indrisoap__doDocumentVectorsResponse:
		return soap_in_indrisoap__doDocumentVectorsResponse(soap, NULL, NULL, "indrisoap:doDocumentVectorsResponse");
	case SOAP_TYPE_DocumentVectorArray:
		return soap_in_DocumentVectorArray(soap, NULL, NULL, "indrisoap:DocumentVector");
	case SOAP_TYPE_indrisoap__DocumentVector:
		return soap_in_indrisoap__DocumentVector(soap, NULL, NULL, "indrisoap:DocumentVector");
	case SOAP_TYPE_FieldArray:
		return soap_in_FieldArray(soap, NULL, NULL, "indrisoap:Field");
	case SOAP_TYPE_indrisoap__Field:
		return soap_in_indrisoap__Field(soap, NULL, NULL, "indrisoap:Field");
	case SOAP_TYPE_indrisoap__doRunQueryRequest:
		return soap_in_indrisoap__doRunQueryRequest(soap, NULL, NULL, "indrisoap:doRunQueryRequest");
	case SOAP_TYPE_indrisoap__doRunQueryResponse:
		return soap_in_indrisoap__doRunQueryResponse(soap, NULL, NULL, "indrisoap:doRunQueryResponse");
	case SOAP_TYPE_indrisoap__QueryResponse:
		return soap_in_indrisoap__QueryResponse(soap, NULL, NULL, "indrisoap:QueryResponse");
	case SOAP_TYPE_ResultArray:
		return soap_in_ResultArray(soap, NULL, NULL, "indrisoap:Result");
	case SOAP_TYPE_indrisoap__Result:
		return soap_in_indrisoap__Result(soap, NULL, NULL, "indrisoap:Result");
	case SOAP_TYPE_indrisoap__QueryRequest:
		return soap_in_indrisoap__QueryRequest(soap, NULL, NULL, "indrisoap:QueryRequest");
	case SOAP_TYPE_intArray:
		return soap_in_intArray(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_StringArray:
		return soap_in_StringArray(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_MetadataPairArray:
		return soap_in_MetadataPairArray(soap, NULL, NULL, "indrisoap:MetadataPair");
	case SOAP_TYPE_indrisoap__MetadataPair:
		return soap_in_indrisoap__MetadataPair(soap, NULL, NULL, "indrisoap:MetadataPair");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerToindrisoap__DocumentVector:
		return soap_in_PointerToindrisoap__DocumentVector(soap, NULL, NULL, "indrisoap:DocumentVector");
	case SOAP_TYPE_PointerToindrisoap__Field:
		return soap_in_PointerToindrisoap__Field(soap, NULL, NULL, "indrisoap:Field");
	case SOAP_TYPE_PointerToindrisoap__Result:
		return soap_in_PointerToindrisoap__Result(soap, NULL, NULL, "indrisoap:Result");
	case SOAP_TYPE_PointerToxsd__int:
		return soap_in_PointerToxsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToindrisoap__MetadataPair:
		return soap_in_PointerToindrisoap__MetadataPair(soap, NULL, NULL, "indrisoap:MetadataPair");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Options"))
		{	*type = SOAP_TYPE_Options;
			return soap_in_Options(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doDeleteDocument"))
		{	*type = SOAP_TYPE_indrisoap__doDeleteDocument;
			return soap_in_indrisoap__doDeleteDocument(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doDeleteDocumentResponse"))
		{	*type = SOAP_TYPE_indrisoap__doDeleteDocumentResponse;
			return soap_in_indrisoap__doDeleteDocumentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doAddDocument"))
		{	*type = SOAP_TYPE_indrisoap__doAddDocument;
			return soap_in_indrisoap__doAddDocument(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doAddDocumentResponse"))
		{	*type = SOAP_TYPE_indrisoap__doAddDocumentResponse;
			return soap_in_indrisoap__doAddDocumentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doDocumentVectors"))
		{	*type = SOAP_TYPE_indrisoap__doDocumentVectors;
			return soap_in_indrisoap__doDocumentVectors(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doDocumentVectorsResponse"))
		{	*type = SOAP_TYPE_indrisoap__doDocumentVectorsResponse;
			return soap_in_indrisoap__doDocumentVectorsResponse(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "indrisoap:DocumentVector"))
		{	*type = SOAP_TYPE_DocumentVectorArray;
			return soap_in_DocumentVectorArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:DocumentVector"))
		{	*type = SOAP_TYPE_indrisoap__DocumentVector;
			return soap_in_indrisoap__DocumentVector(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "indrisoap:Field"))
		{	*type = SOAP_TYPE_FieldArray;
			return soap_in_FieldArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:Field"))
		{	*type = SOAP_TYPE_indrisoap__Field;
			return soap_in_indrisoap__Field(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doRunQueryRequest"))
		{	*type = SOAP_TYPE_indrisoap__doRunQueryRequest;
			return soap_in_indrisoap__doRunQueryRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:doRunQueryResponse"))
		{	*type = SOAP_TYPE_indrisoap__doRunQueryResponse;
			return soap_in_indrisoap__doRunQueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:QueryResponse"))
		{	*type = SOAP_TYPE_indrisoap__QueryResponse;
			return soap_in_indrisoap__QueryResponse(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "indrisoap:Result"))
		{	*type = SOAP_TYPE_ResultArray;
			return soap_in_ResultArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:Result"))
		{	*type = SOAP_TYPE_indrisoap__Result;
			return soap_in_indrisoap__Result(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:QueryRequest"))
		{	*type = SOAP_TYPE_indrisoap__QueryRequest;
			return soap_in_indrisoap__QueryRequest(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:int"))
		{	*type = SOAP_TYPE_intArray;
			return soap_in_intArray(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_StringArray;
			return soap_in_StringArray(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "indrisoap:MetadataPair"))
		{	*type = SOAP_TYPE_MetadataPairArray;
			return soap_in_MetadataPairArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "indrisoap:MetadataPair"))
		{	*type = SOAP_TYPE_indrisoap__MetadataPair;
			return soap_in_indrisoap__MetadataPair(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_Options:
		return soap_out_Options(soap, tag, id, (const enum Options *)ptr, "Options");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_indrisoap__doDeleteDocument:
		return soap_out_indrisoap__doDeleteDocument(soap, tag, id, (const struct indrisoap__doDeleteDocument *)ptr, "indrisoap:doDeleteDocument");
	case SOAP_TYPE_indrisoap__doDeleteDocumentResponse:
		return soap_out_indrisoap__doDeleteDocumentResponse(soap, tag, id, (const struct indrisoap__doDeleteDocumentResponse *)ptr, "indrisoap:doDeleteDocumentResponse");
	case SOAP_TYPE_indrisoap__doAddDocument:
		return soap_out_indrisoap__doAddDocument(soap, tag, id, (const struct indrisoap__doAddDocument *)ptr, "indrisoap:doAddDocument");
	case SOAP_TYPE_indrisoap__doAddDocumentResponse:
		return soap_out_indrisoap__doAddDocumentResponse(soap, tag, id, (const struct indrisoap__doAddDocumentResponse *)ptr, "indrisoap:doAddDocumentResponse");
	case SOAP_TYPE_indrisoap__doDocumentVectors:
		return soap_out_indrisoap__doDocumentVectors(soap, tag, id, (const struct indrisoap__doDocumentVectors *)ptr, "indrisoap:doDocumentVectors");
	case SOAP_TYPE_indrisoap__doDocumentVectorsResponse:
		return soap_out_indrisoap__doDocumentVectorsResponse(soap, tag, id, (const struct indrisoap__doDocumentVectorsResponse *)ptr, "indrisoap:doDocumentVectorsResponse");
	case SOAP_TYPE_DocumentVectorArray:
		return soap_out_DocumentVectorArray(soap, tag, id, (const struct DocumentVectorArray *)ptr, "indrisoap:DocumentVector");
	case SOAP_TYPE_indrisoap__DocumentVector:
		return soap_out_indrisoap__DocumentVector(soap, tag, id, (const struct indrisoap__DocumentVector *)ptr, "indrisoap:DocumentVector");
	case SOAP_TYPE_FieldArray:
		return soap_out_FieldArray(soap, tag, id, (const struct FieldArray *)ptr, "indrisoap:Field");
	case SOAP_TYPE_indrisoap__Field:
		return soap_out_indrisoap__Field(soap, tag, id, (const struct indrisoap__Field *)ptr, "indrisoap:Field");
	case SOAP_TYPE_indrisoap__doRunQueryRequest:
		return soap_out_indrisoap__doRunQueryRequest(soap, tag, id, (const struct indrisoap__doRunQueryRequest *)ptr, "indrisoap:doRunQueryRequest");
	case SOAP_TYPE_indrisoap__doRunQueryResponse:
		return soap_out_indrisoap__doRunQueryResponse(soap, tag, id, (const struct indrisoap__doRunQueryResponse *)ptr, "indrisoap:doRunQueryResponse");
	case SOAP_TYPE_indrisoap__QueryResponse:
		return soap_out_indrisoap__QueryResponse(soap, tag, id, (const struct indrisoap__QueryResponse *)ptr, "indrisoap:QueryResponse");
	case SOAP_TYPE_ResultArray:
		return soap_out_ResultArray(soap, tag, id, (const struct ResultArray *)ptr, "indrisoap:Result");
	case SOAP_TYPE_indrisoap__Result:
		return soap_out_indrisoap__Result(soap, tag, id, (const struct indrisoap__Result *)ptr, "indrisoap:Result");
	case SOAP_TYPE_indrisoap__QueryRequest:
		return soap_out_indrisoap__QueryRequest(soap, tag, id, (const struct indrisoap__QueryRequest *)ptr, "indrisoap:QueryRequest");
	case SOAP_TYPE_intArray:
		return soap_out_intArray(soap, tag, id, (const struct intArray *)ptr, "xsd:int");
	case SOAP_TYPE_StringArray:
		return soap_out_StringArray(soap, tag, id, (const struct StringArray *)ptr, "xsd:string");
	case SOAP_TYPE_MetadataPairArray:
		return soap_out_MetadataPairArray(soap, tag, id, (const struct MetadataPairArray *)ptr, "indrisoap:MetadataPair");
	case SOAP_TYPE_indrisoap__MetadataPair:
		return soap_out_indrisoap__MetadataPair(soap, tag, id, (const struct indrisoap__MetadataPair *)ptr, "indrisoap:MetadataPair");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_out_xsd__base64Binary(soap, tag, id, (const struct xsd__base64Binary *)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerToindrisoap__DocumentVector:
		return soap_out_PointerToindrisoap__DocumentVector(soap, tag, id, (struct indrisoap__DocumentVector *const*)ptr, "indrisoap:DocumentVector");
	case SOAP_TYPE_PointerToindrisoap__Field:
		return soap_out_PointerToindrisoap__Field(soap, tag, id, (struct indrisoap__Field *const*)ptr, "indrisoap:Field");
	case SOAP_TYPE_PointerToindrisoap__Result:
		return soap_out_PointerToindrisoap__Result(soap, tag, id, (struct indrisoap__Result *const*)ptr, "indrisoap:Result");
	case SOAP_TYPE_PointerToxsd__int:
		return soap_out_PointerToxsd__int(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToindrisoap__MetadataPair:
		return soap_out_PointerToindrisoap__MetadataPair(soap, tag, id, (struct indrisoap__MetadataPair *const*)ptr, "indrisoap:MetadataPair");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doDeleteDocument:
		soap_serialize_indrisoap__doDeleteDocument(soap, (const struct indrisoap__doDeleteDocument *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doDeleteDocumentResponse:
		soap_serialize_indrisoap__doDeleteDocumentResponse(soap, (const struct indrisoap__doDeleteDocumentResponse *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doAddDocument:
		soap_serialize_indrisoap__doAddDocument(soap, (const struct indrisoap__doAddDocument *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doAddDocumentResponse:
		soap_serialize_indrisoap__doAddDocumentResponse(soap, (const struct indrisoap__doAddDocumentResponse *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doDocumentVectors:
		soap_serialize_indrisoap__doDocumentVectors(soap, (const struct indrisoap__doDocumentVectors *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doDocumentVectorsResponse:
		soap_serialize_indrisoap__doDocumentVectorsResponse(soap, (const struct indrisoap__doDocumentVectorsResponse *)ptr);
		break;
	case SOAP_TYPE_DocumentVectorArray:
		soap_serialize_DocumentVectorArray(soap, (const struct DocumentVectorArray *)ptr);
		break;
	case SOAP_TYPE_indrisoap__DocumentVector:
		soap_serialize_indrisoap__DocumentVector(soap, (const struct indrisoap__DocumentVector *)ptr);
		break;
	case SOAP_TYPE_FieldArray:
		soap_serialize_FieldArray(soap, (const struct FieldArray *)ptr);
		break;
	case SOAP_TYPE_indrisoap__Field:
		soap_serialize_indrisoap__Field(soap, (const struct indrisoap__Field *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doRunQueryRequest:
		soap_serialize_indrisoap__doRunQueryRequest(soap, (const struct indrisoap__doRunQueryRequest *)ptr);
		break;
	case SOAP_TYPE_indrisoap__doRunQueryResponse:
		soap_serialize_indrisoap__doRunQueryResponse(soap, (const struct indrisoap__doRunQueryResponse *)ptr);
		break;
	case SOAP_TYPE_indrisoap__QueryResponse:
		soap_serialize_indrisoap__QueryResponse(soap, (const struct indrisoap__QueryResponse *)ptr);
		break;
	case SOAP_TYPE_ResultArray:
		soap_serialize_ResultArray(soap, (const struct ResultArray *)ptr);
		break;
	case SOAP_TYPE_indrisoap__Result:
		soap_serialize_indrisoap__Result(soap, (const struct indrisoap__Result *)ptr);
		break;
	case SOAP_TYPE_indrisoap__QueryRequest:
		soap_serialize_indrisoap__QueryRequest(soap, (const struct indrisoap__QueryRequest *)ptr);
		break;
	case SOAP_TYPE_intArray:
		soap_serialize_intArray(soap, (const struct intArray *)ptr);
		break;
	case SOAP_TYPE_StringArray:
		soap_serialize_StringArray(soap, (const struct StringArray *)ptr);
		break;
	case SOAP_TYPE_MetadataPairArray:
		soap_serialize_MetadataPairArray(soap, (const struct MetadataPairArray *)ptr);
		break;
	case SOAP_TYPE_indrisoap__MetadataPair:
		soap_serialize_indrisoap__MetadataPair(soap, (const struct indrisoap__MetadataPair *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		soap_serialize_xsd__base64Binary(soap, (const struct xsd__base64Binary *)ptr);
		break;
	case SOAP_TYPE_PointerToindrisoap__DocumentVector:
		soap_serialize_PointerToindrisoap__DocumentVector(soap, (struct indrisoap__DocumentVector *const*)ptr);
		break;
	case SOAP_TYPE_PointerToindrisoap__Field:
		soap_serialize_PointerToindrisoap__Field(soap, (struct indrisoap__Field *const*)ptr);
		break;
	case SOAP_TYPE_PointerToindrisoap__Result:
		soap_serialize_PointerToindrisoap__Result(soap, (struct indrisoap__Result *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__int:
		soap_serialize_PointerToxsd__int(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToindrisoap__MetadataPair:
		soap_serialize_PointerToindrisoap__MetadataPair(soap, (struct indrisoap__MetadataPair *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__MetadataPair:
		return (void*)soap_instantiate_indrisoap__MetadataPair(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MetadataPairArray:
		return (void*)soap_instantiate_MetadataPairArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_StringArray:
		return (void*)soap_instantiate_StringArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_intArray:
		return (void*)soap_instantiate_intArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__QueryRequest:
		return (void*)soap_instantiate_indrisoap__QueryRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__Result:
		return (void*)soap_instantiate_indrisoap__Result(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ResultArray:
		return (void*)soap_instantiate_ResultArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__QueryResponse:
		return (void*)soap_instantiate_indrisoap__QueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doRunQueryResponse:
		return (void*)soap_instantiate_indrisoap__doRunQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doRunQueryRequest:
		return (void*)soap_instantiate_indrisoap__doRunQueryRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__Field:
		return (void*)soap_instantiate_indrisoap__Field(soap, -1, type, arrayType, n);
	case SOAP_TYPE_FieldArray:
		return (void*)soap_instantiate_FieldArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__DocumentVector:
		return (void*)soap_instantiate_indrisoap__DocumentVector(soap, -1, type, arrayType, n);
	case SOAP_TYPE_DocumentVectorArray:
		return (void*)soap_instantiate_DocumentVectorArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doDocumentVectorsResponse:
		return (void*)soap_instantiate_indrisoap__doDocumentVectorsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doDocumentVectors:
		return (void*)soap_instantiate_indrisoap__doDocumentVectors(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doAddDocumentResponse:
		return (void*)soap_instantiate_indrisoap__doAddDocumentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doAddDocument:
		return (void*)soap_instantiate_indrisoap__doAddDocument(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doDeleteDocumentResponse:
		return (void*)soap_instantiate_indrisoap__doDeleteDocumentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_indrisoap__doDeleteDocument:
		return (void*)soap_instantiate_indrisoap__doDeleteDocument(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (struct xsd__base64Binary*)p->ptr;
		else
			delete[] (struct xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__MetadataPair:
		if (p->size < 0)
			delete (struct indrisoap__MetadataPair*)p->ptr;
		else
			delete[] (struct indrisoap__MetadataPair*)p->ptr;
		break;
	case SOAP_TYPE_MetadataPairArray:
		if (p->size < 0)
			delete (struct MetadataPairArray*)p->ptr;
		else
			delete[] (struct MetadataPairArray*)p->ptr;
		break;
	case SOAP_TYPE_StringArray:
		if (p->size < 0)
			delete (struct StringArray*)p->ptr;
		else
			delete[] (struct StringArray*)p->ptr;
		break;
	case SOAP_TYPE_intArray:
		if (p->size < 0)
			delete (struct intArray*)p->ptr;
		else
			delete[] (struct intArray*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__QueryRequest:
		if (p->size < 0)
			delete (struct indrisoap__QueryRequest*)p->ptr;
		else
			delete[] (struct indrisoap__QueryRequest*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__Result:
		if (p->size < 0)
			delete (struct indrisoap__Result*)p->ptr;
		else
			delete[] (struct indrisoap__Result*)p->ptr;
		break;
	case SOAP_TYPE_ResultArray:
		if (p->size < 0)
			delete (struct ResultArray*)p->ptr;
		else
			delete[] (struct ResultArray*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__QueryResponse:
		if (p->size < 0)
			delete (struct indrisoap__QueryResponse*)p->ptr;
		else
			delete[] (struct indrisoap__QueryResponse*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doRunQueryResponse:
		if (p->size < 0)
			delete (struct indrisoap__doRunQueryResponse*)p->ptr;
		else
			delete[] (struct indrisoap__doRunQueryResponse*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doRunQueryRequest:
		if (p->size < 0)
			delete (struct indrisoap__doRunQueryRequest*)p->ptr;
		else
			delete[] (struct indrisoap__doRunQueryRequest*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__Field:
		if (p->size < 0)
			delete (struct indrisoap__Field*)p->ptr;
		else
			delete[] (struct indrisoap__Field*)p->ptr;
		break;
	case SOAP_TYPE_FieldArray:
		if (p->size < 0)
			delete (struct FieldArray*)p->ptr;
		else
			delete[] (struct FieldArray*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__DocumentVector:
		if (p->size < 0)
			delete (struct indrisoap__DocumentVector*)p->ptr;
		else
			delete[] (struct indrisoap__DocumentVector*)p->ptr;
		break;
	case SOAP_TYPE_DocumentVectorArray:
		if (p->size < 0)
			delete (struct DocumentVectorArray*)p->ptr;
		else
			delete[] (struct DocumentVectorArray*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doDocumentVectorsResponse:
		if (p->size < 0)
			delete (struct indrisoap__doDocumentVectorsResponse*)p->ptr;
		else
			delete[] (struct indrisoap__doDocumentVectorsResponse*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doDocumentVectors:
		if (p->size < 0)
			delete (struct indrisoap__doDocumentVectors*)p->ptr;
		else
			delete[] (struct indrisoap__doDocumentVectors*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doAddDocumentResponse:
		if (p->size < 0)
			delete (struct indrisoap__doAddDocumentResponse*)p->ptr;
		else
			delete[] (struct indrisoap__doAddDocumentResponse*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doAddDocument:
		if (p->size < 0)
			delete (struct indrisoap__doAddDocument*)p->ptr;
		else
			delete[] (struct indrisoap__doAddDocument*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doDeleteDocumentResponse:
		if (p->size < 0)
			delete (struct indrisoap__doDeleteDocumentResponse*)p->ptr;
		else
			delete[] (struct indrisoap__doDeleteDocumentResponse*)p->ptr;
		break;
	case SOAP_TYPE_indrisoap__doDeleteDocument:
		if (p->size < 0)
			delete (struct indrisoap__doDeleteDocument*)p->ptr;
		else
			delete[] (struct indrisoap__doDeleteDocument*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{	soap_default_int(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__double(struct soap *soap, double *a)
{	soap_default_double(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (soap_out_xsd__double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Options(struct soap *soap, enum Options *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Options
	*a = SOAP_DEFAULT_Options;
#else
	*a = (enum Options)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Options(struct soap *soap, const enum Options *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Options);
	if (soap_out_Options(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_Options[] =
{	{ (long)HTMLSnippet, "HTMLSnippet" },
	{ (long)TextSnippet, "TextSnippet" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_Options2s(struct soap *soap, enum Options n)
{	const char *s = soap_code_str(soap_codes_Options, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Options(struct soap *soap, const char *tag, int id, const enum Options *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Options), type) || soap_send(soap, soap_Options2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum Options * SOAP_FMAC4 soap_get_Options(struct soap *soap, enum Options *p, const char *tag, const char *type)
{
	if ((p = soap_in_Options(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2Options(struct soap *soap, const char *s, enum Options *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_Options, s);
	if (map)
		*a = (enum Options)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum Options)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum Options * SOAP_FMAC4 soap_in_Options(struct soap *soap, const char *tag, enum Options *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum Options *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Options, sizeof(enum Options), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2Options(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum Options *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Options, 0, sizeof(enum Options), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{	soap_default_bool(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (soap_out_xsd__boolean(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__boolean2s(struct soap *soap, bool n)
{	return soap_bool2s(soap, n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type) || soap_send(soap, soap_xsd__boolean2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	return soap_s2bool(soap, s, a);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__boolean, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doDeleteDocument(struct soap *soap, struct indrisoap__doDeleteDocument *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->doc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doDeleteDocument(struct soap *soap, const struct indrisoap__doDeleteDocument *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->doc, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doDeleteDocument(struct soap *soap, const struct indrisoap__doDeleteDocument *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doDeleteDocument);
	if (soap_out_indrisoap__doDeleteDocument(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doDeleteDocument(struct soap *soap, const char *tag, int id, const struct indrisoap__doDeleteDocument *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doDeleteDocument), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "doc", -1, &a->doc, "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doDeleteDocument * SOAP_FMAC4 soap_get_indrisoap__doDeleteDocument(struct soap *soap, struct indrisoap__doDeleteDocument *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doDeleteDocument(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doDeleteDocument * SOAP_FMAC4 soap_in_indrisoap__doDeleteDocument(struct soap *soap, const char *tag, struct indrisoap__doDeleteDocument *a, const char *type)
{
	short soap_flag_doc = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doDeleteDocument *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doDeleteDocument, sizeof(struct indrisoap__doDeleteDocument), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doDeleteDocument(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_doc && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "doc", &a->doc, "xsd:int"))
				{	soap_flag_doc--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doDeleteDocument *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doDeleteDocument, 0, sizeof(struct indrisoap__doDeleteDocument), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_doc > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doDeleteDocument * SOAP_FMAC6 soap_new_indrisoap__doDeleteDocument(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doDeleteDocument(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doDeleteDocument(struct soap *soap, struct indrisoap__doDeleteDocument *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doDeleteDocument * SOAP_FMAC4 soap_instantiate_indrisoap__doDeleteDocument(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doDeleteDocument(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doDeleteDocument, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doDeleteDocument;
		if (size)
			*size = sizeof(struct indrisoap__doDeleteDocument);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doDeleteDocument[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doDeleteDocument);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doDeleteDocument*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doDeleteDocument(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doDeleteDocument %p -> %p\n", q, p));
	*(struct indrisoap__doDeleteDocument*)p = *(struct indrisoap__doDeleteDocument*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doDeleteDocumentResponse(struct soap *soap, struct indrisoap__doDeleteDocumentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doDeleteDocumentResponse(struct soap *soap, const struct indrisoap__doDeleteDocumentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doDeleteDocumentResponse(struct soap *soap, const struct indrisoap__doDeleteDocumentResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doDeleteDocumentResponse);
	if (soap_out_indrisoap__doDeleteDocumentResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doDeleteDocumentResponse(struct soap *soap, const char *tag, int id, const struct indrisoap__doDeleteDocumentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doDeleteDocumentResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doDeleteDocumentResponse * SOAP_FMAC4 soap_get_indrisoap__doDeleteDocumentResponse(struct soap *soap, struct indrisoap__doDeleteDocumentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doDeleteDocumentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doDeleteDocumentResponse * SOAP_FMAC4 soap_in_indrisoap__doDeleteDocumentResponse(struct soap *soap, const char *tag, struct indrisoap__doDeleteDocumentResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doDeleteDocumentResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doDeleteDocumentResponse, sizeof(struct indrisoap__doDeleteDocumentResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doDeleteDocumentResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doDeleteDocumentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doDeleteDocumentResponse, 0, sizeof(struct indrisoap__doDeleteDocumentResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doDeleteDocumentResponse * SOAP_FMAC6 soap_new_indrisoap__doDeleteDocumentResponse(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doDeleteDocumentResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doDeleteDocumentResponse(struct soap *soap, struct indrisoap__doDeleteDocumentResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doDeleteDocumentResponse * SOAP_FMAC4 soap_instantiate_indrisoap__doDeleteDocumentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doDeleteDocumentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doDeleteDocumentResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doDeleteDocumentResponse;
		if (size)
			*size = sizeof(struct indrisoap__doDeleteDocumentResponse);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doDeleteDocumentResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doDeleteDocumentResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doDeleteDocumentResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doDeleteDocumentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doDeleteDocumentResponse %p -> %p\n", q, p));
	*(struct indrisoap__doDeleteDocumentResponse*)p = *(struct indrisoap__doDeleteDocumentResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doAddDocument(struct soap *soap, struct indrisoap__doAddDocument *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->doc);
	soap_default_xsd__string(soap, &a->fileClass);
	soap_default_MetadataPairArray(soap, &a->meta);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doAddDocument(struct soap *soap, const struct indrisoap__doAddDocument *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->doc);
	soap_serialize_xsd__string(soap, &a->fileClass);
	soap_serialize_MetadataPairArray(soap, &a->meta);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doAddDocument(struct soap *soap, const struct indrisoap__doAddDocument *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doAddDocument);
	if (soap_out_indrisoap__doAddDocument(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doAddDocument(struct soap *soap, const char *tag, int id, const struct indrisoap__doAddDocument *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doAddDocument), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "doc", -1, &a->doc, "xsd:string"))
		return soap->error;
	if (soap_out_xsd__string(soap, "fileClass", -1, &a->fileClass, "xsd:string"))
		return soap->error;
	if (soap_out_MetadataPairArray(soap, "meta", -1, &a->meta, "indrisoap:MetadataPair"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doAddDocument * SOAP_FMAC4 soap_get_indrisoap__doAddDocument(struct soap *soap, struct indrisoap__doAddDocument *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doAddDocument(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doAddDocument * SOAP_FMAC4 soap_in_indrisoap__doAddDocument(struct soap *soap, const char *tag, struct indrisoap__doAddDocument *a, const char *type)
{
	short soap_flag_doc = 1, soap_flag_fileClass = 1, soap_flag_meta = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doAddDocument *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doAddDocument, sizeof(struct indrisoap__doAddDocument), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doAddDocument(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_doc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "doc", &a->doc, "xsd:string"))
				{	soap_flag_doc--;
					continue;
				}
			if (soap_flag_fileClass && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "fileClass", &a->fileClass, "xsd:string"))
				{	soap_flag_fileClass--;
					continue;
				}
			if (soap_flag_meta && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_MetadataPairArray(soap, "meta", &a->meta, "indrisoap:MetadataPair"))
				{	soap_flag_meta--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doAddDocument *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doAddDocument, 0, sizeof(struct indrisoap__doAddDocument), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_meta > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doAddDocument * SOAP_FMAC6 soap_new_indrisoap__doAddDocument(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doAddDocument(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doAddDocument(struct soap *soap, struct indrisoap__doAddDocument *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doAddDocument * SOAP_FMAC4 soap_instantiate_indrisoap__doAddDocument(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doAddDocument(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doAddDocument, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doAddDocument;
		if (size)
			*size = sizeof(struct indrisoap__doAddDocument);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doAddDocument[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doAddDocument);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doAddDocument*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doAddDocument(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doAddDocument %p -> %p\n", q, p));
	*(struct indrisoap__doAddDocument*)p = *(struct indrisoap__doAddDocument*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doAddDocumentResponse(struct soap *soap, struct indrisoap__doAddDocumentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->docid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doAddDocumentResponse(struct soap *soap, const struct indrisoap__doAddDocumentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->docid, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doAddDocumentResponse(struct soap *soap, const struct indrisoap__doAddDocumentResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doAddDocumentResponse);
	if (soap_out_indrisoap__doAddDocumentResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doAddDocumentResponse(struct soap *soap, const char *tag, int id, const struct indrisoap__doAddDocumentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doAddDocumentResponse), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "docid", -1, &a->docid, "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doAddDocumentResponse * SOAP_FMAC4 soap_get_indrisoap__doAddDocumentResponse(struct soap *soap, struct indrisoap__doAddDocumentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doAddDocumentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doAddDocumentResponse * SOAP_FMAC4 soap_in_indrisoap__doAddDocumentResponse(struct soap *soap, const char *tag, struct indrisoap__doAddDocumentResponse *a, const char *type)
{
	short soap_flag_docid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doAddDocumentResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doAddDocumentResponse, sizeof(struct indrisoap__doAddDocumentResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doAddDocumentResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_docid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "docid", &a->docid, "xsd:int"))
				{	soap_flag_docid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doAddDocumentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doAddDocumentResponse, 0, sizeof(struct indrisoap__doAddDocumentResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_docid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doAddDocumentResponse * SOAP_FMAC6 soap_new_indrisoap__doAddDocumentResponse(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doAddDocumentResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doAddDocumentResponse(struct soap *soap, struct indrisoap__doAddDocumentResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doAddDocumentResponse * SOAP_FMAC4 soap_instantiate_indrisoap__doAddDocumentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doAddDocumentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doAddDocumentResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doAddDocumentResponse;
		if (size)
			*size = sizeof(struct indrisoap__doAddDocumentResponse);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doAddDocumentResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doAddDocumentResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doAddDocumentResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doAddDocumentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doAddDocumentResponse %p -> %p\n", q, p));
	*(struct indrisoap__doAddDocumentResponse*)p = *(struct indrisoap__doAddDocumentResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doDocumentVectors(struct soap *soap, struct indrisoap__doDocumentVectors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_intArray(soap, &a->ids);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doDocumentVectors(struct soap *soap, const struct indrisoap__doDocumentVectors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_intArray(soap, &a->ids);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doDocumentVectors(struct soap *soap, const struct indrisoap__doDocumentVectors *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doDocumentVectors);
	if (soap_out_indrisoap__doDocumentVectors(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doDocumentVectors(struct soap *soap, const char *tag, int id, const struct indrisoap__doDocumentVectors *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doDocumentVectors), type))
		return soap->error;
	if (soap_out_intArray(soap, "ids", -1, &a->ids, "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doDocumentVectors * SOAP_FMAC4 soap_get_indrisoap__doDocumentVectors(struct soap *soap, struct indrisoap__doDocumentVectors *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doDocumentVectors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doDocumentVectors * SOAP_FMAC4 soap_in_indrisoap__doDocumentVectors(struct soap *soap, const char *tag, struct indrisoap__doDocumentVectors *a, const char *type)
{
	short soap_flag_ids = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doDocumentVectors *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doDocumentVectors, sizeof(struct indrisoap__doDocumentVectors), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doDocumentVectors(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ids && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_intArray(soap, "ids", &a->ids, "xsd:int"))
				{	soap_flag_ids--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doDocumentVectors *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doDocumentVectors, 0, sizeof(struct indrisoap__doDocumentVectors), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ids > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doDocumentVectors * SOAP_FMAC6 soap_new_indrisoap__doDocumentVectors(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doDocumentVectors(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doDocumentVectors(struct soap *soap, struct indrisoap__doDocumentVectors *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doDocumentVectors * SOAP_FMAC4 soap_instantiate_indrisoap__doDocumentVectors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doDocumentVectors(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doDocumentVectors, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doDocumentVectors;
		if (size)
			*size = sizeof(struct indrisoap__doDocumentVectors);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doDocumentVectors[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doDocumentVectors);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doDocumentVectors*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doDocumentVectors(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doDocumentVectors %p -> %p\n", q, p));
	*(struct indrisoap__doDocumentVectors*)p = *(struct indrisoap__doDocumentVectors*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doDocumentVectorsResponse(struct soap *soap, struct indrisoap__doDocumentVectorsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_DocumentVectorArray(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doDocumentVectorsResponse(struct soap *soap, const struct indrisoap__doDocumentVectorsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_DocumentVectorArray(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doDocumentVectorsResponse(struct soap *soap, const struct indrisoap__doDocumentVectorsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doDocumentVectorsResponse);
	if (soap_out_indrisoap__doDocumentVectorsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doDocumentVectorsResponse(struct soap *soap, const char *tag, int id, const struct indrisoap__doDocumentVectorsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doDocumentVectorsResponse), type))
		return soap->error;
	if (soap_out_DocumentVectorArray(soap, "response", -1, &a->response, "indrisoap:DocumentVector"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doDocumentVectorsResponse * SOAP_FMAC4 soap_get_indrisoap__doDocumentVectorsResponse(struct soap *soap, struct indrisoap__doDocumentVectorsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doDocumentVectorsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doDocumentVectorsResponse * SOAP_FMAC4 soap_in_indrisoap__doDocumentVectorsResponse(struct soap *soap, const char *tag, struct indrisoap__doDocumentVectorsResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doDocumentVectorsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doDocumentVectorsResponse, sizeof(struct indrisoap__doDocumentVectorsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doDocumentVectorsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_DocumentVectorArray(soap, "response", &a->response, "indrisoap:DocumentVector"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doDocumentVectorsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doDocumentVectorsResponse, 0, sizeof(struct indrisoap__doDocumentVectorsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doDocumentVectorsResponse * SOAP_FMAC6 soap_new_indrisoap__doDocumentVectorsResponse(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doDocumentVectorsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doDocumentVectorsResponse(struct soap *soap, struct indrisoap__doDocumentVectorsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doDocumentVectorsResponse * SOAP_FMAC4 soap_instantiate_indrisoap__doDocumentVectorsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doDocumentVectorsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doDocumentVectorsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doDocumentVectorsResponse;
		if (size)
			*size = sizeof(struct indrisoap__doDocumentVectorsResponse);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doDocumentVectorsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doDocumentVectorsResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doDocumentVectorsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doDocumentVectorsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doDocumentVectorsResponse %p -> %p\n", q, p));
	*(struct indrisoap__doDocumentVectorsResponse*)p = *(struct indrisoap__doDocumentVectorsResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_DocumentVectorArray(struct soap *soap, struct DocumentVectorArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_DocumentVectorArray(struct soap *soap, struct DocumentVectorArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_DocumentVectorArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_indrisoap__DocumentVector);
			soap_serialize_indrisoap__DocumentVector(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_DocumentVectorArray(struct soap *soap, const struct DocumentVectorArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_DocumentVectorArray);
	if (soap_out_DocumentVectorArray(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_DocumentVectorArray(struct soap *soap, const char *tag, int id, const struct DocumentVectorArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "indrisoap:DocumentVector", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_DocumentVectorArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_indrisoap__DocumentVector(soap, "item", -1, &a->__ptr[i], "indrisoap:DocumentVector");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct DocumentVectorArray * SOAP_FMAC4 soap_get_DocumentVectorArray(struct soap *soap, struct DocumentVectorArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_DocumentVectorArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct DocumentVectorArray * SOAP_FMAC4 soap_in_DocumentVectorArray(struct soap *soap, const char *tag, struct DocumentVectorArray *a, const char *type)
{	int i, j;
	struct indrisoap__DocumentVector *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct DocumentVectorArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_DocumentVectorArray, sizeof(struct DocumentVectorArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_DocumentVectorArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct indrisoap__DocumentVector *)soap_malloc(soap, sizeof(struct indrisoap__DocumentVector) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_indrisoap__DocumentVector(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_indrisoap__DocumentVector(soap, NULL, a->__ptr + i, "indrisoap:DocumentVector"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct indrisoap__DocumentVector *)soap_push_block(soap, sizeof(struct indrisoap__DocumentVector));
				if (!p)
					return NULL;
				soap_default_indrisoap__DocumentVector(soap, p);
				if (!soap_in_indrisoap__DocumentVector(soap, NULL, p, "indrisoap:DocumentVector"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct indrisoap__DocumentVector *)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct DocumentVectorArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_DocumentVectorArray, 0, sizeof(struct DocumentVectorArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct DocumentVectorArray * SOAP_FMAC6 soap_new_DocumentVectorArray(struct soap *soap, int n)
{	return soap_instantiate_DocumentVectorArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_DocumentVectorArray(struct soap *soap, struct DocumentVectorArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct DocumentVectorArray * SOAP_FMAC4 soap_instantiate_DocumentVectorArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_DocumentVectorArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_DocumentVectorArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct DocumentVectorArray;
		if (size)
			*size = sizeof(struct DocumentVectorArray);
	}
	else
	{	cp->ptr = (void*)new struct DocumentVectorArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct DocumentVectorArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct DocumentVectorArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_DocumentVectorArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct DocumentVectorArray %p -> %p\n", q, p));
	*(struct DocumentVectorArray*)p = *(struct DocumentVectorArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__DocumentVector(struct soap *soap, struct indrisoap__DocumentVector *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_StringArray(soap, &a->stems);
	soap_default_intArray(soap, &a->positions);
	soap_default_FieldArray(soap, &a->fields);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__DocumentVector(struct soap *soap, const struct indrisoap__DocumentVector *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_StringArray(soap, &a->stems);
	soap_serialize_intArray(soap, &a->positions);
	soap_serialize_FieldArray(soap, &a->fields);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__DocumentVector(struct soap *soap, const struct indrisoap__DocumentVector *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__DocumentVector);
	if (soap_out_indrisoap__DocumentVector(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__DocumentVector(struct soap *soap, const char *tag, int id, const struct indrisoap__DocumentVector *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__DocumentVector), type))
		return soap->error;
	if (soap_out_StringArray(soap, "stems", -1, &a->stems, "xsd:string"))
		return soap->error;
	if (soap_out_intArray(soap, "positions", -1, &a->positions, "xsd:int"))
		return soap->error;
	if (soap_out_FieldArray(soap, "fields", -1, &a->fields, "indrisoap:Field"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__DocumentVector * SOAP_FMAC4 soap_get_indrisoap__DocumentVector(struct soap *soap, struct indrisoap__DocumentVector *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__DocumentVector(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__DocumentVector * SOAP_FMAC4 soap_in_indrisoap__DocumentVector(struct soap *soap, const char *tag, struct indrisoap__DocumentVector *a, const char *type)
{
	short soap_flag_stems = 1, soap_flag_positions = 1, soap_flag_fields = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__DocumentVector *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__DocumentVector, sizeof(struct indrisoap__DocumentVector), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__DocumentVector(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stems && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_StringArray(soap, "stems", &a->stems, "xsd:string"))
				{	soap_flag_stems--;
					continue;
				}
			if (soap_flag_positions && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_intArray(soap, "positions", &a->positions, "xsd:int"))
				{	soap_flag_positions--;
					continue;
				}
			if (soap_flag_fields && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_FieldArray(soap, "fields", &a->fields, "indrisoap:Field"))
				{	soap_flag_fields--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__DocumentVector *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__DocumentVector, 0, sizeof(struct indrisoap__DocumentVector), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stems > 0 || soap_flag_positions > 0 || soap_flag_fields > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__DocumentVector * SOAP_FMAC6 soap_new_indrisoap__DocumentVector(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__DocumentVector(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__DocumentVector(struct soap *soap, struct indrisoap__DocumentVector *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__DocumentVector * SOAP_FMAC4 soap_instantiate_indrisoap__DocumentVector(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__DocumentVector(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__DocumentVector, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__DocumentVector;
		if (size)
			*size = sizeof(struct indrisoap__DocumentVector);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__DocumentVector[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__DocumentVector);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__DocumentVector*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__DocumentVector(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__DocumentVector %p -> %p\n", q, p));
	*(struct indrisoap__DocumentVector*)p = *(struct indrisoap__DocumentVector*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_FieldArray(struct soap *soap, struct FieldArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_FieldArray(struct soap *soap, struct FieldArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_FieldArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_indrisoap__Field);
			soap_serialize_indrisoap__Field(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_FieldArray(struct soap *soap, const struct FieldArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_FieldArray);
	if (soap_out_FieldArray(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_FieldArray(struct soap *soap, const char *tag, int id, const struct FieldArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "indrisoap:Field", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_FieldArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_indrisoap__Field(soap, "item", -1, &a->__ptr[i], "indrisoap:Field");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct FieldArray * SOAP_FMAC4 soap_get_FieldArray(struct soap *soap, struct FieldArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_FieldArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct FieldArray * SOAP_FMAC4 soap_in_FieldArray(struct soap *soap, const char *tag, struct FieldArray *a, const char *type)
{	int i, j;
	struct indrisoap__Field *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct FieldArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_FieldArray, sizeof(struct FieldArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_FieldArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_indrisoap__Field(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_indrisoap__Field(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_indrisoap__Field(soap, NULL, a->__ptr + i, "indrisoap:Field"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	struct indrisoap__Field q;
			soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct indrisoap__Field *)soap_push_block(soap, sizeof(struct indrisoap__Field));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(struct indrisoap__Field));
				soap_default_indrisoap__Field(soap, p);
				if (!soap_in_indrisoap__Field(soap, NULL, p, "indrisoap:Field"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			if (soap->blist->size)
				a->__ptr = soap_new_indrisoap__Field(soap, soap->blist->size/sizeof(struct indrisoap__Field));
			else
				a->__ptr = NULL;
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct FieldArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_FieldArray, 0, sizeof(struct FieldArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct FieldArray * SOAP_FMAC6 soap_new_FieldArray(struct soap *soap, int n)
{	return soap_instantiate_FieldArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_FieldArray(struct soap *soap, struct FieldArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct FieldArray * SOAP_FMAC4 soap_instantiate_FieldArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_FieldArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_FieldArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct FieldArray;
		if (size)
			*size = sizeof(struct FieldArray);
	}
	else
	{	cp->ptr = (void*)new struct FieldArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct FieldArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct FieldArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_FieldArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct FieldArray %p -> %p\n", q, p));
	*(struct FieldArray*)p = *(struct FieldArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__Field(struct soap *soap, struct indrisoap__Field *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->name);
	soap_default_int(soap, &a->begin);
	soap_default_int(soap, &a->end);
	soap_default_LONG64(soap, &a->number);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__Field(struct soap *soap, const struct indrisoap__Field *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->name);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__Field(struct soap *soap, const struct indrisoap__Field *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__Field);
	if (soap_out_indrisoap__Field(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__Field(struct soap *soap, const char *tag, int id, const struct indrisoap__Field *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__Field), type))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &a->name, "xsd:string"))
		return soap->error;
	if (soap_out_int(soap, "begin", -1, &a->begin, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "end", -1, &a->end, "xsd:int"))
		return soap->error;
	if (soap_out_LONG64(soap, "number", -1, &a->number, "xsd:long"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__Field * SOAP_FMAC4 soap_get_indrisoap__Field(struct soap *soap, struct indrisoap__Field *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__Field * SOAP_FMAC4 soap_in_indrisoap__Field(struct soap *soap, const char *tag, struct indrisoap__Field *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_begin = 1, soap_flag_end = 1, soap_flag_number = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__Field *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__Field, sizeof(struct indrisoap__Field), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_indrisoap__Field(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_begin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "begin", &a->begin, "xsd:int"))
				{	soap_flag_begin--;
					continue;
				}
			if (soap_flag_end && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "end", &a->end, "xsd:int"))
				{	soap_flag_end--;
					continue;
				}
			if (soap_flag_number && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "number", &a->number, "xsd:long"))
				{	soap_flag_number--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__Field *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__Field, 0, sizeof(struct indrisoap__Field), 0, soap_copy_indrisoap__Field);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name > 0 || soap_flag_begin > 0 || soap_flag_end > 0 || soap_flag_number > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__Field * SOAP_FMAC6 soap_new_indrisoap__Field(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__Field(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__Field(struct soap *soap, struct indrisoap__Field *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__Field * SOAP_FMAC4 soap_instantiate_indrisoap__Field(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__Field(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__Field, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__Field;
		if (size)
			*size = sizeof(struct indrisoap__Field);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__Field[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__Field);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__Field*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__Field(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__Field %p -> %p\n", q, p));
	*(struct indrisoap__Field*)p = *(struct indrisoap__Field*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doRunQueryRequest(struct soap *soap, struct indrisoap__doRunQueryRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_indrisoap__QueryRequest(soap, &a->request);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doRunQueryRequest(struct soap *soap, const struct indrisoap__doRunQueryRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_indrisoap__QueryRequest(soap, &a->request);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doRunQueryRequest(struct soap *soap, const struct indrisoap__doRunQueryRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doRunQueryRequest);
	if (soap_out_indrisoap__doRunQueryRequest(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doRunQueryRequest(struct soap *soap, const char *tag, int id, const struct indrisoap__doRunQueryRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doRunQueryRequest), type))
		return soap->error;
	if (soap_out_indrisoap__QueryRequest(soap, "request", -1, &a->request, "indrisoap:QueryRequest"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doRunQueryRequest * SOAP_FMAC4 soap_get_indrisoap__doRunQueryRequest(struct soap *soap, struct indrisoap__doRunQueryRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doRunQueryRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doRunQueryRequest * SOAP_FMAC4 soap_in_indrisoap__doRunQueryRequest(struct soap *soap, const char *tag, struct indrisoap__doRunQueryRequest *a, const char *type)
{
	short soap_flag_request = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doRunQueryRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doRunQueryRequest, sizeof(struct indrisoap__doRunQueryRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_indrisoap__doRunQueryRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_request && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_indrisoap__QueryRequest(soap, "request", &a->request, "indrisoap:QueryRequest"))
				{	soap_flag_request--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doRunQueryRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doRunQueryRequest, 0, sizeof(struct indrisoap__doRunQueryRequest), 0, soap_copy_indrisoap__doRunQueryRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_request > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doRunQueryRequest * SOAP_FMAC6 soap_new_indrisoap__doRunQueryRequest(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doRunQueryRequest(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doRunQueryRequest(struct soap *soap, struct indrisoap__doRunQueryRequest *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doRunQueryRequest * SOAP_FMAC4 soap_instantiate_indrisoap__doRunQueryRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doRunQueryRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doRunQueryRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doRunQueryRequest;
		if (size)
			*size = sizeof(struct indrisoap__doRunQueryRequest);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doRunQueryRequest[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doRunQueryRequest);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doRunQueryRequest*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doRunQueryRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doRunQueryRequest %p -> %p\n", q, p));
	*(struct indrisoap__doRunQueryRequest*)p = *(struct indrisoap__doRunQueryRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__doRunQueryResponse(struct soap *soap, struct indrisoap__doRunQueryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_indrisoap__QueryResponse(soap, &a->_return);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__doRunQueryResponse(struct soap *soap, const struct indrisoap__doRunQueryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_indrisoap__QueryResponse(soap, &a->_return);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__doRunQueryResponse(struct soap *soap, const struct indrisoap__doRunQueryResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__doRunQueryResponse);
	if (soap_out_indrisoap__doRunQueryResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__doRunQueryResponse(struct soap *soap, const char *tag, int id, const struct indrisoap__doRunQueryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__doRunQueryResponse), type))
		return soap->error;
	if (soap_out_indrisoap__QueryResponse(soap, "return", -1, &a->_return, "indrisoap:QueryResponse"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__doRunQueryResponse * SOAP_FMAC4 soap_get_indrisoap__doRunQueryResponse(struct soap *soap, struct indrisoap__doRunQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__doRunQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__doRunQueryResponse * SOAP_FMAC4 soap_in_indrisoap__doRunQueryResponse(struct soap *soap, const char *tag, struct indrisoap__doRunQueryResponse *a, const char *type)
{
	short soap_flag__return = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__doRunQueryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__doRunQueryResponse, sizeof(struct indrisoap__doRunQueryResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__doRunQueryResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_indrisoap__QueryResponse(soap, NULL, &a->_return, "indrisoap:QueryResponse"))
				{	soap_flag__return--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__doRunQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__doRunQueryResponse, 0, sizeof(struct indrisoap__doRunQueryResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__return > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__doRunQueryResponse * SOAP_FMAC6 soap_new_indrisoap__doRunQueryResponse(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__doRunQueryResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__doRunQueryResponse(struct soap *soap, struct indrisoap__doRunQueryResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__doRunQueryResponse * SOAP_FMAC4 soap_instantiate_indrisoap__doRunQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__doRunQueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__doRunQueryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__doRunQueryResponse;
		if (size)
			*size = sizeof(struct indrisoap__doRunQueryResponse);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__doRunQueryResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__doRunQueryResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__doRunQueryResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__doRunQueryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__doRunQueryResponse %p -> %p\n", q, p));
	*(struct indrisoap__doRunQueryResponse*)p = *(struct indrisoap__doRunQueryResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__QueryResponse(struct soap *soap, struct indrisoap__QueryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->parseTime);
	soap_default_float(soap, &a->executeTime);
	soap_default_float(soap, &a->documentsTime);
	soap_default_int(soap, &a->estimatedMatches);
	soap_default_ResultArray(soap, &a->results);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__QueryResponse(struct soap *soap, const struct indrisoap__QueryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ResultArray(soap, &a->results);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__QueryResponse(struct soap *soap, const struct indrisoap__QueryResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__QueryResponse);
	if (soap_out_indrisoap__QueryResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__QueryResponse(struct soap *soap, const char *tag, int id, const struct indrisoap__QueryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__QueryResponse), type))
		return soap->error;
	if (soap_out_float(soap, "parseTime", -1, &a->parseTime, "xsd:float"))
		return soap->error;
	if (soap_out_float(soap, "executeTime", -1, &a->executeTime, "xsd:float"))
		return soap->error;
	if (soap_out_float(soap, "documentsTime", -1, &a->documentsTime, "xsd:float"))
		return soap->error;
	if (soap_out_int(soap, "estimatedMatches", -1, &a->estimatedMatches, "xsd:int"))
		return soap->error;
	if (soap_out_ResultArray(soap, "results", -1, &a->results, "indrisoap:Result"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__QueryResponse * SOAP_FMAC4 soap_get_indrisoap__QueryResponse(struct soap *soap, struct indrisoap__QueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__QueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__QueryResponse * SOAP_FMAC4 soap_in_indrisoap__QueryResponse(struct soap *soap, const char *tag, struct indrisoap__QueryResponse *a, const char *type)
{
	short soap_flag_parseTime = 1, soap_flag_executeTime = 1, soap_flag_documentsTime = 1, soap_flag_estimatedMatches = 1, soap_flag_results = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__QueryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__QueryResponse, sizeof(struct indrisoap__QueryResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_indrisoap__QueryResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parseTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "parseTime", &a->parseTime, "xsd:float"))
				{	soap_flag_parseTime--;
					continue;
				}
			if (soap_flag_executeTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "executeTime", &a->executeTime, "xsd:float"))
				{	soap_flag_executeTime--;
					continue;
				}
			if (soap_flag_documentsTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "documentsTime", &a->documentsTime, "xsd:float"))
				{	soap_flag_documentsTime--;
					continue;
				}
			if (soap_flag_estimatedMatches && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "estimatedMatches", &a->estimatedMatches, "xsd:int"))
				{	soap_flag_estimatedMatches--;
					continue;
				}
			if (soap_flag_results && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ResultArray(soap, "results", &a->results, "indrisoap:Result"))
				{	soap_flag_results--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__QueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__QueryResponse, 0, sizeof(struct indrisoap__QueryResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_parseTime > 0 || soap_flag_executeTime > 0 || soap_flag_documentsTime > 0 || soap_flag_estimatedMatches > 0 || soap_flag_results > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__QueryResponse * SOAP_FMAC6 soap_new_indrisoap__QueryResponse(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__QueryResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__QueryResponse(struct soap *soap, struct indrisoap__QueryResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__QueryResponse * SOAP_FMAC4 soap_instantiate_indrisoap__QueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__QueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__QueryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__QueryResponse;
		if (size)
			*size = sizeof(struct indrisoap__QueryResponse);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__QueryResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__QueryResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__QueryResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__QueryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__QueryResponse %p -> %p\n", q, p));
	*(struct indrisoap__QueryResponse*)p = *(struct indrisoap__QueryResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ResultArray(struct soap *soap, struct ResultArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ResultArray(struct soap *soap, struct ResultArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_ResultArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_indrisoap__Result);
			soap_serialize_indrisoap__Result(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ResultArray(struct soap *soap, const struct ResultArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_ResultArray);
	if (soap_out_ResultArray(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ResultArray(struct soap *soap, const char *tag, int id, const struct ResultArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "indrisoap:Result", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ResultArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_indrisoap__Result(soap, "item", -1, &a->__ptr[i], "indrisoap:Result");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ResultArray * SOAP_FMAC4 soap_get_ResultArray(struct soap *soap, struct ResultArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ResultArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ResultArray * SOAP_FMAC4 soap_in_ResultArray(struct soap *soap, const char *tag, struct ResultArray *a, const char *type)
{	int i, j;
	struct indrisoap__Result *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ResultArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ResultArray, sizeof(struct ResultArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ResultArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_indrisoap__Result(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_indrisoap__Result(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_indrisoap__Result(soap, NULL, a->__ptr + i, "indrisoap:Result"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	struct indrisoap__Result q;
			soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct indrisoap__Result *)soap_push_block(soap, sizeof(struct indrisoap__Result));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(struct indrisoap__Result));
				soap_default_indrisoap__Result(soap, p);
				if (!soap_in_indrisoap__Result(soap, NULL, p, "indrisoap:Result"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			if (soap->blist->size)
				a->__ptr = soap_new_indrisoap__Result(soap, soap->blist->size/sizeof(struct indrisoap__Result));
			else
				a->__ptr = NULL;
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ResultArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ResultArray, 0, sizeof(struct ResultArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ResultArray * SOAP_FMAC6 soap_new_ResultArray(struct soap *soap, int n)
{	return soap_instantiate_ResultArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ResultArray(struct soap *soap, struct ResultArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ResultArray * SOAP_FMAC4 soap_instantiate_ResultArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ResultArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ResultArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ResultArray;
		if (size)
			*size = sizeof(struct ResultArray);
	}
	else
	{	cp->ptr = (void*)new struct ResultArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ResultArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ResultArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ResultArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ResultArray %p -> %p\n", q, p));
	*(struct ResultArray*)p = *(struct ResultArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__Result(struct soap *soap, struct indrisoap__Result *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->snippet);
	soap_default_std__string(soap, &a->documentName);
	soap_default_std__string(soap, &a->cachedURL);
	soap_default_int(soap, &a->docid);
	soap_default_double(soap, &a->score);
	soap_default_int(soap, &a->begin);
	soap_default_int(soap, &a->end);
	soap_default_MetadataPairArray(soap, &a->metadata);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__Result(struct soap *soap, const struct indrisoap__Result *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->snippet, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->snippet);
	soap_embedded(soap, &a->documentName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->documentName);
	soap_embedded(soap, &a->cachedURL, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->cachedURL);
	soap_serialize_MetadataPairArray(soap, &a->metadata);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__Result(struct soap *soap, const struct indrisoap__Result *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__Result);
	if (soap_out_indrisoap__Result(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__Result(struct soap *soap, const char *tag, int id, const struct indrisoap__Result *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__Result), type))
		return soap->error;
	if (soap_out_std__string(soap, "snippet", -1, &a->snippet, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "documentName", -1, &a->documentName, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "cachedURL", -1, &a->cachedURL, "xsd:string"))
		return soap->error;
	if (soap_out_int(soap, "docid", -1, &a->docid, "xsd:int"))
		return soap->error;
	if (soap_out_double(soap, "score", -1, &a->score, "xsd:double"))
		return soap->error;
	if (soap_out_int(soap, "begin", -1, &a->begin, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "end", -1, &a->end, "xsd:int"))
		return soap->error;
	if (soap_out_MetadataPairArray(soap, "metadata", -1, &a->metadata, "indrisoap:MetadataPair"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__Result * SOAP_FMAC4 soap_get_indrisoap__Result(struct soap *soap, struct indrisoap__Result *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__Result * SOAP_FMAC4 soap_in_indrisoap__Result(struct soap *soap, const char *tag, struct indrisoap__Result *a, const char *type)
{
	short soap_flag_snippet = 1, soap_flag_documentName = 1, soap_flag_cachedURL = 1, soap_flag_docid = 1, soap_flag_score = 1, soap_flag_begin = 1, soap_flag_end = 1, soap_flag_metadata = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__Result *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__Result, sizeof(struct indrisoap__Result), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_indrisoap__Result(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_snippet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "snippet", &a->snippet, "xsd:string"))
				{	soap_flag_snippet--;
					continue;
				}
			if (soap_flag_documentName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "documentName", &a->documentName, "xsd:string"))
				{	soap_flag_documentName--;
					continue;
				}
			if (soap_flag_cachedURL && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "cachedURL", &a->cachedURL, "xsd:string"))
				{	soap_flag_cachedURL--;
					continue;
				}
			if (soap_flag_docid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "docid", &a->docid, "xsd:int"))
				{	soap_flag_docid--;
					continue;
				}
			if (soap_flag_score && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "score", &a->score, "xsd:double"))
				{	soap_flag_score--;
					continue;
				}
			if (soap_flag_begin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "begin", &a->begin, "xsd:int"))
				{	soap_flag_begin--;
					continue;
				}
			if (soap_flag_end && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "end", &a->end, "xsd:int"))
				{	soap_flag_end--;
					continue;
				}
			if (soap_flag_metadata && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_MetadataPairArray(soap, "metadata", &a->metadata, "indrisoap:MetadataPair"))
				{	soap_flag_metadata--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__Result *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__Result, 0, sizeof(struct indrisoap__Result), 0, soap_copy_indrisoap__Result);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_snippet > 0 || soap_flag_documentName > 0 || soap_flag_cachedURL > 0 || soap_flag_docid > 0 || soap_flag_score > 0 || soap_flag_begin > 0 || soap_flag_end > 0 || soap_flag_metadata > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__Result * SOAP_FMAC6 soap_new_indrisoap__Result(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__Result(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__Result(struct soap *soap, struct indrisoap__Result *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__Result * SOAP_FMAC4 soap_instantiate_indrisoap__Result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__Result(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__Result, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__Result;
		if (size)
			*size = sizeof(struct indrisoap__Result);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__Result[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__Result);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__Result*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__Result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__Result %p -> %p\n", q, p));
	*(struct indrisoap__Result*)p = *(struct indrisoap__Result*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__QueryRequest(struct soap *soap, struct indrisoap__QueryRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->query);
	soap_default_StringArray(soap, &a->formulators);
	soap_default_StringArray(soap, &a->metadata);
	soap_default_intArray(soap, &a->docSet);
	soap_default_int(soap, &a->resultsRequested);
	soap_default_int(soap, &a->startNum);
	soap_default_Options(soap, &a->options);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__QueryRequest(struct soap *soap, const struct indrisoap__QueryRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->query, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->query);
	soap_serialize_StringArray(soap, &a->formulators);
	soap_serialize_StringArray(soap, &a->metadata);
	soap_serialize_intArray(soap, &a->docSet);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__QueryRequest(struct soap *soap, const struct indrisoap__QueryRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__QueryRequest);
	if (soap_out_indrisoap__QueryRequest(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__QueryRequest(struct soap *soap, const char *tag, int id, const struct indrisoap__QueryRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__QueryRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "query", -1, &a->query, "xsd:string"))
		return soap->error;
	if (soap_out_StringArray(soap, "formulators", -1, &a->formulators, "xsd:string"))
		return soap->error;
	if (soap_out_StringArray(soap, "metadata", -1, &a->metadata, "xsd:string"))
		return soap->error;
	if (soap_out_intArray(soap, "docSet", -1, &a->docSet, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "resultsRequested", -1, &a->resultsRequested, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "startNum", -1, &a->startNum, "xsd:int"))
		return soap->error;
	if (soap_out_Options(soap, "options", -1, &a->options, "Options"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__QueryRequest * SOAP_FMAC4 soap_get_indrisoap__QueryRequest(struct soap *soap, struct indrisoap__QueryRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__QueryRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__QueryRequest * SOAP_FMAC4 soap_in_indrisoap__QueryRequest(struct soap *soap, const char *tag, struct indrisoap__QueryRequest *a, const char *type)
{
	short soap_flag_query = 1, soap_flag_formulators = 1, soap_flag_metadata = 1, soap_flag_docSet = 1, soap_flag_resultsRequested = 1, soap_flag_startNum = 1, soap_flag_options = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__QueryRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__QueryRequest, sizeof(struct indrisoap__QueryRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_indrisoap__QueryRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_query && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "query", &a->query, "xsd:string"))
				{	soap_flag_query--;
					continue;
				}
			if (soap_flag_formulators && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_StringArray(soap, "formulators", &a->formulators, "xsd:string"))
				{	soap_flag_formulators--;
					continue;
				}
			if (soap_flag_metadata && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_StringArray(soap, "metadata", &a->metadata, "xsd:string"))
				{	soap_flag_metadata--;
					continue;
				}
			if (soap_flag_docSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_intArray(soap, "docSet", &a->docSet, "xsd:int"))
				{	soap_flag_docSet--;
					continue;
				}
			if (soap_flag_resultsRequested && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "resultsRequested", &a->resultsRequested, "xsd:int"))
				{	soap_flag_resultsRequested--;
					continue;
				}
			if (soap_flag_startNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "startNum", &a->startNum, "xsd:int"))
				{	soap_flag_startNum--;
					continue;
				}
			if (soap_flag_options && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Options(soap, "options", &a->options, "Options"))
				{	soap_flag_options--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__QueryRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__QueryRequest, 0, sizeof(struct indrisoap__QueryRequest), 0, soap_copy_indrisoap__QueryRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_query > 0 || soap_flag_formulators > 0 || soap_flag_metadata > 0 || soap_flag_docSet > 0 || soap_flag_resultsRequested > 0 || soap_flag_startNum > 0 || soap_flag_options > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__QueryRequest * SOAP_FMAC6 soap_new_indrisoap__QueryRequest(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__QueryRequest(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__QueryRequest(struct soap *soap, struct indrisoap__QueryRequest *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__QueryRequest * SOAP_FMAC4 soap_instantiate_indrisoap__QueryRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__QueryRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__QueryRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__QueryRequest;
		if (size)
			*size = sizeof(struct indrisoap__QueryRequest);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__QueryRequest[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__QueryRequest);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__QueryRequest*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__QueryRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__QueryRequest %p -> %p\n", q, p));
	*(struct indrisoap__QueryRequest*)p = *(struct indrisoap__QueryRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_intArray(struct soap *soap, struct intArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_intArray(struct soap *soap, struct intArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_intArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_xsd__int);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_intArray(struct soap *soap, const struct intArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_intArray);
	if (soap_out_intArray(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_intArray(struct soap *soap, const char *tag, int id, const struct intArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "xsd:int", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_intArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_xsd__int(soap, "item", -1, &a->__ptr[i], "xsd:int");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct intArray * SOAP_FMAC4 soap_get_intArray(struct soap *soap, struct intArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_intArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct intArray * SOAP_FMAC4 soap_in_intArray(struct soap *soap, const char *tag, struct intArray *a, const char *type)
{	int i, j;
	int *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct intArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_intArray, sizeof(struct intArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_intArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (int *)soap_malloc(soap, sizeof(int) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_xsd__int(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_xsd__int(soap, NULL, a->__ptr + i, "xsd:int"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (int *)soap_push_block(soap, sizeof(int));
				if (!p)
					return NULL;
				soap_default_xsd__int(soap, p);
				if (!soap_in_xsd__int(soap, NULL, p, "xsd:int"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (int *)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct intArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_intArray, 0, sizeof(struct intArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct intArray * SOAP_FMAC6 soap_new_intArray(struct soap *soap, int n)
{	return soap_instantiate_intArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_intArray(struct soap *soap, struct intArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct intArray * SOAP_FMAC4 soap_instantiate_intArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_intArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_intArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct intArray;
		if (size)
			*size = sizeof(struct intArray);
	}
	else
	{	cp->ptr = (void*)new struct intArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct intArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct intArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_intArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct intArray %p -> %p\n", q, p));
	*(struct intArray*)p = *(struct intArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_StringArray(struct soap *soap, struct StringArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StringArray(struct soap *soap, struct StringArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_StringArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_std__string);
			soap_serialize_std__string(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_StringArray(struct soap *soap, const struct StringArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_StringArray);
	if (soap_out_StringArray(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StringArray(struct soap *soap, const char *tag, int id, const struct StringArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "xsd:string", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_StringArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_std__string(soap, "item", -1, &a->__ptr[i], "xsd:string");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct StringArray * SOAP_FMAC4 soap_get_StringArray(struct soap *soap, struct StringArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_StringArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct StringArray * SOAP_FMAC4 soap_in_StringArray(struct soap *soap, const char *tag, struct StringArray *a, const char *type)
{	int i, j;
	std::string *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct StringArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_StringArray, sizeof(struct StringArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_StringArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_std__string(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__string(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__string(soap, NULL, a->__ptr + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	std::string q;
			soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (std::string *)soap_push_block(soap, sizeof(std::string));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(std::string));
				soap_default_std__string(soap, p);
				if (!soap_in_std__string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			if (soap->blist->size)
				a->__ptr = soap_new_std__string(soap, soap->blist->size/sizeof(std::string));
			else
				a->__ptr = NULL;
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct StringArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_StringArray, 0, sizeof(struct StringArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct StringArray * SOAP_FMAC6 soap_new_StringArray(struct soap *soap, int n)
{	return soap_instantiate_StringArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_StringArray(struct soap *soap, struct StringArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct StringArray * SOAP_FMAC4 soap_instantiate_StringArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_StringArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_StringArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct StringArray;
		if (size)
			*size = sizeof(struct StringArray);
	}
	else
	{	cp->ptr = (void*)new struct StringArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct StringArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct StringArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_StringArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct StringArray %p -> %p\n", q, p));
	*(struct StringArray*)p = *(struct StringArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_MetadataPairArray(struct soap *soap, struct MetadataPairArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MetadataPairArray(struct soap *soap, struct MetadataPairArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_MetadataPairArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_indrisoap__MetadataPair);
			soap_serialize_indrisoap__MetadataPair(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MetadataPairArray(struct soap *soap, const struct MetadataPairArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_MetadataPairArray);
	if (soap_out_MetadataPairArray(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MetadataPairArray(struct soap *soap, const char *tag, int id, const struct MetadataPairArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "indrisoap:MetadataPair", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_MetadataPairArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_indrisoap__MetadataPair(soap, "item", -1, &a->__ptr[i], "indrisoap:MetadataPair");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct MetadataPairArray * SOAP_FMAC4 soap_get_MetadataPairArray(struct soap *soap, struct MetadataPairArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_MetadataPairArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct MetadataPairArray * SOAP_FMAC4 soap_in_MetadataPairArray(struct soap *soap, const char *tag, struct MetadataPairArray *a, const char *type)
{	int i, j;
	struct indrisoap__MetadataPair *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct MetadataPairArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MetadataPairArray, sizeof(struct MetadataPairArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_MetadataPairArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_indrisoap__MetadataPair(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_indrisoap__MetadataPair(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_indrisoap__MetadataPair(soap, NULL, a->__ptr + i, "indrisoap:MetadataPair"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	struct indrisoap__MetadataPair q;
			soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct indrisoap__MetadataPair *)soap_push_block(soap, sizeof(struct indrisoap__MetadataPair));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(struct indrisoap__MetadataPair));
				soap_default_indrisoap__MetadataPair(soap, p);
				if (!soap_in_indrisoap__MetadataPair(soap, NULL, p, "indrisoap:MetadataPair"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			if (soap->blist->size)
				a->__ptr = soap_new_indrisoap__MetadataPair(soap, soap->blist->size/sizeof(struct indrisoap__MetadataPair));
			else
				a->__ptr = NULL;
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct MetadataPairArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MetadataPairArray, 0, sizeof(struct MetadataPairArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct MetadataPairArray * SOAP_FMAC6 soap_new_MetadataPairArray(struct soap *soap, int n)
{	return soap_instantiate_MetadataPairArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_MetadataPairArray(struct soap *soap, struct MetadataPairArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct MetadataPairArray * SOAP_FMAC4 soap_instantiate_MetadataPairArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MetadataPairArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_MetadataPairArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct MetadataPairArray;
		if (size)
			*size = sizeof(struct MetadataPairArray);
	}
	else
	{	cp->ptr = (void*)new struct MetadataPairArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct MetadataPairArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct MetadataPairArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_MetadataPairArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct MetadataPairArray %p -> %p\n", q, p));
	*(struct MetadataPairArray*)p = *(struct MetadataPairArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_indrisoap__MetadataPair(struct soap *soap, struct indrisoap__MetadataPair *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->key);
	soap_default_std__string(soap, &a->value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_indrisoap__MetadataPair(struct soap *soap, const struct indrisoap__MetadataPair *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->key, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->key);
	soap_embedded(soap, &a->value, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_indrisoap__MetadataPair(struct soap *soap, const struct indrisoap__MetadataPair *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_indrisoap__MetadataPair);
	if (soap_out_indrisoap__MetadataPair(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_indrisoap__MetadataPair(struct soap *soap, const char *tag, int id, const struct indrisoap__MetadataPair *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_indrisoap__MetadataPair), type))
		return soap->error;
	if (soap_out_std__string(soap, "key", -1, &a->key, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "value", -1, &a->value, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct indrisoap__MetadataPair * SOAP_FMAC4 soap_get_indrisoap__MetadataPair(struct soap *soap, struct indrisoap__MetadataPair *p, const char *tag, const char *type)
{
	if ((p = soap_in_indrisoap__MetadataPair(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__MetadataPair * SOAP_FMAC4 soap_in_indrisoap__MetadataPair(struct soap *soap, const char *tag, struct indrisoap__MetadataPair *a, const char *type)
{
	short soap_flag_key = 1, soap_flag_value = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct indrisoap__MetadataPair *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_indrisoap__MetadataPair, sizeof(struct indrisoap__MetadataPair), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_indrisoap__MetadataPair(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "value", &a->value, "xsd:string"))
				{	soap_flag_value--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct indrisoap__MetadataPair *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_indrisoap__MetadataPair, 0, sizeof(struct indrisoap__MetadataPair), 0, soap_copy_indrisoap__MetadataPair);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_value > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct indrisoap__MetadataPair * SOAP_FMAC6 soap_new_indrisoap__MetadataPair(struct soap *soap, int n)
{	return soap_instantiate_indrisoap__MetadataPair(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_indrisoap__MetadataPair(struct soap *soap, struct indrisoap__MetadataPair *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct indrisoap__MetadataPair * SOAP_FMAC4 soap_instantiate_indrisoap__MetadataPair(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_indrisoap__MetadataPair(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_indrisoap__MetadataPair, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct indrisoap__MetadataPair;
		if (size)
			*size = sizeof(struct indrisoap__MetadataPair);
	}
	else
	{	cp->ptr = (void*)new struct indrisoap__MetadataPair[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct indrisoap__MetadataPair);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct indrisoap__MetadataPair*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_indrisoap__MetadataPair(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct indrisoap__MetadataPair %p -> %p\n", q, p));
	*(struct indrisoap__MetadataPair*)p = *(struct indrisoap__MetadataPair*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary const*a)
{
	if (a->__ptr)
		soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_xsd__base64Binary);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__base64Binary(struct soap *soap, const struct xsd__base64Binary *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (soap_out_xsd__base64Binary(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const struct xsd__base64Binary *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, struct xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xsd__base64Binary(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(struct xsd__base64Binary), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct xsd__base64Binary;
		if (size)
			*size = sizeof(struct xsd__base64Binary);
	}
	else
	{	cp->ptr = (void*)new struct xsd__base64Binary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct xsd__base64Binary);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct xsd__base64Binary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct xsd__base64Binary %p -> %p\n", q, p));
	*(struct xsd__base64Binary*)p = *(struct xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToindrisoap__DocumentVector(struct soap *soap, struct indrisoap__DocumentVector *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_indrisoap__DocumentVector))
		soap_serialize_indrisoap__DocumentVector(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToindrisoap__DocumentVector(struct soap *soap, struct indrisoap__DocumentVector *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToindrisoap__DocumentVector);
	if (soap_out_PointerToindrisoap__DocumentVector(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToindrisoap__DocumentVector(struct soap *soap, const char *tag, int id, struct indrisoap__DocumentVector *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_indrisoap__DocumentVector);
	if (id < 0)
		return soap->error;
	return soap_out_indrisoap__DocumentVector(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct indrisoap__DocumentVector ** SOAP_FMAC4 soap_get_PointerToindrisoap__DocumentVector(struct soap *soap, struct indrisoap__DocumentVector **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToindrisoap__DocumentVector(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__DocumentVector ** SOAP_FMAC4 soap_in_PointerToindrisoap__DocumentVector(struct soap *soap, const char *tag, struct indrisoap__DocumentVector **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct indrisoap__DocumentVector **)soap_malloc(soap, sizeof(struct indrisoap__DocumentVector *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_indrisoap__DocumentVector(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct indrisoap__DocumentVector **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_indrisoap__DocumentVector, sizeof(struct indrisoap__DocumentVector), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToindrisoap__Field(struct soap *soap, struct indrisoap__Field *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_indrisoap__Field))
		soap_serialize_indrisoap__Field(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToindrisoap__Field(struct soap *soap, struct indrisoap__Field *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToindrisoap__Field);
	if (soap_out_PointerToindrisoap__Field(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToindrisoap__Field(struct soap *soap, const char *tag, int id, struct indrisoap__Field *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_indrisoap__Field);
	if (id < 0)
		return soap->error;
	return soap_out_indrisoap__Field(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct indrisoap__Field ** SOAP_FMAC4 soap_get_PointerToindrisoap__Field(struct soap *soap, struct indrisoap__Field **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToindrisoap__Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__Field ** SOAP_FMAC4 soap_in_PointerToindrisoap__Field(struct soap *soap, const char *tag, struct indrisoap__Field **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct indrisoap__Field **)soap_malloc(soap, sizeof(struct indrisoap__Field *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_indrisoap__Field(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct indrisoap__Field **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_indrisoap__Field, sizeof(struct indrisoap__Field), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToindrisoap__Result(struct soap *soap, struct indrisoap__Result *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_indrisoap__Result))
		soap_serialize_indrisoap__Result(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToindrisoap__Result(struct soap *soap, struct indrisoap__Result *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToindrisoap__Result);
	if (soap_out_PointerToindrisoap__Result(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToindrisoap__Result(struct soap *soap, const char *tag, int id, struct indrisoap__Result *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_indrisoap__Result);
	if (id < 0)
		return soap->error;
	return soap_out_indrisoap__Result(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct indrisoap__Result ** SOAP_FMAC4 soap_get_PointerToindrisoap__Result(struct soap *soap, struct indrisoap__Result **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToindrisoap__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__Result ** SOAP_FMAC4 soap_in_PointerToindrisoap__Result(struct soap *soap, const char *tag, struct indrisoap__Result **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct indrisoap__Result **)soap_malloc(soap, sizeof(struct indrisoap__Result *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_indrisoap__Result(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct indrisoap__Result **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_indrisoap__Result, sizeof(struct indrisoap__Result), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__int(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__int(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__int);
	if (soap_out_PointerToxsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__int(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__int);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToxsd__int(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToxsd__int(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToindrisoap__MetadataPair(struct soap *soap, struct indrisoap__MetadataPair *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_indrisoap__MetadataPair))
		soap_serialize_indrisoap__MetadataPair(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToindrisoap__MetadataPair(struct soap *soap, struct indrisoap__MetadataPair *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToindrisoap__MetadataPair);
	if (soap_out_PointerToindrisoap__MetadataPair(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToindrisoap__MetadataPair(struct soap *soap, const char *tag, int id, struct indrisoap__MetadataPair *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_indrisoap__MetadataPair);
	if (id < 0)
		return soap->error;
	return soap_out_indrisoap__MetadataPair(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct indrisoap__MetadataPair ** SOAP_FMAC4 soap_get_PointerToindrisoap__MetadataPair(struct soap *soap, struct indrisoap__MetadataPair **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToindrisoap__MetadataPair(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct indrisoap__MetadataPair ** SOAP_FMAC4 soap_in_PointerToindrisoap__MetadataPair(struct soap *soap, const char *tag, struct indrisoap__MetadataPair **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct indrisoap__MetadataPair **)soap_malloc(soap, sizeof(struct indrisoap__MetadataPair *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_indrisoap__MetadataPair(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct indrisoap__MetadataPair **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_indrisoap__MetadataPair, sizeof(struct indrisoap__MetadataPair), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
