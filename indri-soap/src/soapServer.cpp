/* soapServer.cpp
   Generated by gSOAP 2.7.10 from ../src/indrisoap.hpp
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.10 2008-04-11 12:28:16 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "indrisoap:doRunQueryRequest"))
		return soap_serve_indrisoap__doRunQueryRequest(soap);
	if (!soap_match_tag(soap, soap->tag, "indrisoap:doDocumentVectors"))
		return soap_serve_indrisoap__doDocumentVectors(soap);
	if (!soap_match_tag(soap, soap->tag, "indrisoap:doAddDocument"))
		return soap_serve_indrisoap__doAddDocument(soap);
	if (!soap_match_tag(soap, soap->tag, "indrisoap:doDeleteDocument"))
		return soap_serve_indrisoap__doDeleteDocument(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_indrisoap__doRunQueryRequest(struct soap *soap)
{	struct indrisoap__doRunQueryRequest soap_tmp_indrisoap__doRunQueryRequest;
	struct indrisoap__doRunQueryResponse response;
	soap_default_indrisoap__doRunQueryResponse(soap, &response);
	soap_default_indrisoap__doRunQueryRequest(soap, &soap_tmp_indrisoap__doRunQueryRequest);
	soap->encodingStyle = "";
	if (!soap_get_indrisoap__doRunQueryRequest(soap, &soap_tmp_indrisoap__doRunQueryRequest, "indrisoap:doRunQueryRequest", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = indrisoap__doRunQueryRequest(soap, soap_tmp_indrisoap__doRunQueryRequest.request, response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_indrisoap__doRunQueryResponse(soap, &response);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_indrisoap__doRunQueryResponse(soap, &response, "indrisoap:doRunQueryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_indrisoap__doRunQueryResponse(soap, &response, "indrisoap:doRunQueryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_indrisoap__doDocumentVectors(struct soap *soap)
{	struct indrisoap__doDocumentVectors soap_tmp_indrisoap__doDocumentVectors;
	struct indrisoap__doDocumentVectorsResponse soap_tmp_indrisoap__doDocumentVectorsResponse;
	soap_default_indrisoap__doDocumentVectorsResponse(soap, &soap_tmp_indrisoap__doDocumentVectorsResponse);
	soap_default_indrisoap__doDocumentVectors(soap, &soap_tmp_indrisoap__doDocumentVectors);
	soap->encodingStyle = "";
	if (!soap_get_indrisoap__doDocumentVectors(soap, &soap_tmp_indrisoap__doDocumentVectors, "indrisoap:doDocumentVectors", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = indrisoap__doDocumentVectors(soap, soap_tmp_indrisoap__doDocumentVectors.ids, soap_tmp_indrisoap__doDocumentVectorsResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_indrisoap__doDocumentVectorsResponse(soap, &soap_tmp_indrisoap__doDocumentVectorsResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_indrisoap__doDocumentVectorsResponse(soap, &soap_tmp_indrisoap__doDocumentVectorsResponse, "indrisoap:doDocumentVectorsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_indrisoap__doDocumentVectorsResponse(soap, &soap_tmp_indrisoap__doDocumentVectorsResponse, "indrisoap:doDocumentVectorsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_indrisoap__doAddDocument(struct soap *soap)
{	struct indrisoap__doAddDocument soap_tmp_indrisoap__doAddDocument;
	struct indrisoap__doAddDocumentResponse response;
	soap_default_indrisoap__doAddDocumentResponse(soap, &response);
	soap_default_indrisoap__doAddDocument(soap, &soap_tmp_indrisoap__doAddDocument);
	soap->encodingStyle = "";
	if (!soap_get_indrisoap__doAddDocument(soap, &soap_tmp_indrisoap__doAddDocument, "indrisoap:doAddDocument", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = indrisoap__doAddDocument(soap, soap_tmp_indrisoap__doAddDocument.doc, soap_tmp_indrisoap__doAddDocument.fileClass, soap_tmp_indrisoap__doAddDocument.meta, response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_indrisoap__doAddDocumentResponse(soap, &response);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_indrisoap__doAddDocumentResponse(soap, &response, "indrisoap:doAddDocumentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_indrisoap__doAddDocumentResponse(soap, &response, "indrisoap:doAddDocumentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_indrisoap__doDeleteDocument(struct soap *soap)
{	struct indrisoap__doDeleteDocument soap_tmp_indrisoap__doDeleteDocument;
	struct indrisoap__doDeleteDocumentResponse response;
	soap_default_indrisoap__doDeleteDocumentResponse(soap, &response);
	soap_default_indrisoap__doDeleteDocument(soap, &soap_tmp_indrisoap__doDeleteDocument);
	soap->encodingStyle = "";
	if (!soap_get_indrisoap__doDeleteDocument(soap, &soap_tmp_indrisoap__doDeleteDocument, "indrisoap:doDeleteDocument", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = indrisoap__doDeleteDocument(soap, soap_tmp_indrisoap__doDeleteDocument.doc, response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_indrisoap__doDeleteDocumentResponse(soap, &response);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_indrisoap__doDeleteDocumentResponse(soap, &response, "indrisoap:doDeleteDocumentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_indrisoap__doDeleteDocumentResponse(soap, &response, "indrisoap:doDeleteDocumentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of soapServer.cpp */
