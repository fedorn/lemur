// 
// Warning: This file is automatically generated
// 

#ifndef INDRI_WALKER_HPP
#define INDRI_WALKER_HPP

namespace indri { 
  namespace lang { 
    class Walker { 
    public:
      virtual ~Walker();
      virtual void defaultBefore( class Node* n );
      virtual void defaultAfter( class Node* n );

      virtual void before( class IndexTerm* n );
      virtual void after( class IndexTerm* n );
      virtual void before( class Field* n );
      virtual void after( class Field* n );
      virtual void before( class ExtentInside* n );
      virtual void after( class ExtentInside* n );
      virtual void before( class WeightedExtentOr* n );
      virtual void after( class WeightedExtentOr* n );
      virtual void before( class ExtentOr* n );
      virtual void after( class ExtentOr* n );
      virtual void before( class ExtentAnd* n );
      virtual void after( class ExtentAnd* n );
      virtual void before( class BAndNode* n );
      virtual void after( class BAndNode* n );
      virtual void before( class UWNode* n );
      virtual void after( class UWNode* n );
      virtual void before( class ODNode* n );
      virtual void after( class ODNode* n );
      virtual void before( class FilReqNode* n );
      virtual void after( class FilReqNode* n );
      virtual void before( class FilRejNode* n );
      virtual void after( class FilRejNode* n );
      virtual void before( class FieldLessNode* n );
      virtual void after( class FieldLessNode* n );
      virtual void before( class FieldGreaterNode* n );
      virtual void after( class FieldGreaterNode* n );
      virtual void before( class FieldBetweenNode* n );
      virtual void after( class FieldBetweenNode* n );
      virtual void before( class FieldEqualsNode* n );
      virtual void after( class FieldEqualsNode* n );
      virtual void before( class RawScorerNode* n );
      virtual void after( class RawScorerNode* n );
      virtual void before( class TermFrequencyScorerNode* n );
      virtual void after( class TermFrequencyScorerNode* n );
      virtual void before( class CachedFrequencyScorerNode* n );
      virtual void after( class CachedFrequencyScorerNode* n );
      virtual void before( class PriorNode* n );
      virtual void after( class PriorNode* n );
      virtual void before( class OrNode* n );
      virtual void after( class OrNode* n );
      virtual void before( class NotNode* n );
      virtual void after( class NotNode* n );
      virtual void before( class MaxNode* n );
      virtual void after( class MaxNode* n );
      virtual void before( class CombineNode* n );
      virtual void after( class CombineNode* n );
      virtual void before( class WAndNode* n );
      virtual void after( class WAndNode* n );
      virtual void before( class WSumNode* n );
      virtual void after( class WSumNode* n );
      virtual void before( class WeightNode* n );
      virtual void after( class WeightNode* n );
      virtual void before( class ExtentRestriction* n );
      virtual void after( class ExtentRestriction* n );
      virtual void before( class FixedPassage* n );
      virtual void after( class FixedPassage* n );
      virtual void before( class FilterNode* n );
      virtual void after( class FilterNode* n );
      virtual void before( class ListAccumulator* n );
      virtual void after( class ListAccumulator* n );
      virtual void before( class ContextCounterNode* n );
      virtual void after( class ContextCounterNode* n );
      virtual void before( class ContextSimpleCounterNode* n );
      virtual void after( class ContextSimpleCounterNode* n );
      virtual void before( class ScoreAccumulatorNode* n );
      virtual void after( class ScoreAccumulatorNode* n );
      virtual void before( class AnnotatorNode* n );
      virtual void after( class AnnotatorNode* n );
      virtual void before( class FieldWildcard* n );
      virtual void after( class FieldWildcard* n );
      virtual void before( class NestedExtentInside* n );
      virtual void after( class NestedExtentInside* n );
      virtual void before( class NestedRawScorerNode* n );
      virtual void after( class NestedRawScorerNode* n );
      virtual void before( class ExtentEnforcement* n );
      virtual void after( class ExtentEnforcement* n );
      virtual void before( class ContextInclusionNode* n );
      virtual void after( class ContextInclusionNode* n );
      virtual void before( class LengthPrior* n );
      virtual void after( class LengthPrior* n );
      virtual void before( class DocumentStructureNode* n );
      virtual void after( class DocumentStructureNode* n );
      virtual void before( class ShrinkageScorerNode* n );
      virtual void after( class ShrinkageScorerNode* n );
      virtual void before( class ExtentDescendant* n );
      virtual void after( class ExtentDescendant* n );
      virtual void before( class ExtentChild* n );
      virtual void after( class ExtentChild* n );
      virtual void before( class ExtentParent* n );
      virtual void after( class ExtentParent* n );
   };
 }
}

#endif // INDRI_WALKER_HPP

