#define yy_create_buffer ChineseChar_create_buffer
#define yy_delete_buffer ChineseChar_delete_buffer
#define yy_scan_buffer ChineseChar_scan_buffer
#define yy_scan_string ChineseChar_scan_string
#define yy_scan_bytes ChineseChar_scan_bytes
#define yy_flex_debug ChineseChar_flex_debug
#define yy_init_buffer ChineseChar_init_buffer
#define yy_flush_buffer ChineseChar_flush_buffer
#define yy_load_buffer_state ChineseChar_load_buffer_state
#define yy_switch_to_buffer ChineseChar_switch_to_buffer
#define yyin ChineseCharin
#define yyleng ChineseCharleng
#define yylex ChineseCharlex
#define yyout ChineseCharout
#define yyrestart ChineseCharrestart
#define yytext ChineseChartext

#line 19 "../src/ChineseCharParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 28
#define YY_END_OF_BUFFER 29
static yyconst short int yy_accept[483] =
    {   0,
        0,    0,    0,    0,   29,   27,   26,   27,   27,   20,
       27,   20,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,   19,
       25,   18,   18,   18,   24,   18,   24,    0,    0,   17,
       16,   22,    0,    0,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,    0,    0,    0,    0,    0,    0,    0,

       12,    0,    0,   23,   21,    0,   24,   24,   24,    0,
       24,   24,   24,   24,   24,    0,    0,    0,    5,   13,
        0,    1,    0,    0,    0,   10,    0,    0,    0,    0,
        0,    0,    2,    0,   11,    0,    6,    0,    4,   24,
        0,   24,    0,    0,    7,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    8,    0,    0,    0,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   24,   24,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
       24,    0,    0,    0,    0,   24,   24,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,   24,    0,    0,   24,   24,
        0,   24,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,    0,   24,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,   24,    0,    0,    0,   24,
        0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    5,    1,    1,    6,    7,    1,
        1,    1,    1,    1,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,   12,   13,
        1,   14,    1,    1,   15,   16,   17,   18,   19,   16,
       16,   20,   21,   16,   16,   22,   16,   23,   24,   25,
       16,   16,   16,   26,   16,   16,   16,   27,   16,   16,
        1,    1,    1,    1,    1,    1,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   28,   28,   28,   28,   28,
       28,   28,    1,    1,    1,    1,    1,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       36,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   57,   58,
       59,   57,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   62,   74,   62,   75,
       62,   76,   77,   78,   79,   62,   80,   81,   62,   82,
       62,   62,   83,   62,   62,   62,   62,   62,   84,   62,
       85,   62,   62,   86,   87,   87,   87,   87,   87,   88,
       89,   90,   89,   89,   91,   89,   89,   89,   92,   89,
       89,   89,   93,   94,   89
    } ;

static yyconst int yy_meta[95] =
    {   0,
        1,    2,    1,    3,    4,    1,    5,    6,    7,    3,
        5,    1,    1,    1,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        9,    9,   10,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9

    } ;

static yyconst short int yy_base[506] =
    {   0,
        0,    0,    0,    0, 1107, 2449, 2449, 1032, 1096, 1092,
       91,   91,    0,   88,   98,  151, 1027, 1002, 1030,  996,
     1002,  989, 1035, 1014,  992, 1019, 1012,   92,   94,    0,
     1064,    0,  169, 1056,   83,   91,   98,  144,  181,  165,
     2449, 2449, 2449, 2449,  183, 2449,  228, 1013,  103, 2449,
     2449,    0, 1053,  102,  146,  150,  152, 1050, 2449,  107,
      147, 1049,  163,  195, 1053, 1032, 1053, 1014,  261,  966,
      946,  924,  970,  928,  912,  912,  920,  939,  919,  961,
      140,  901,  930,  901,  905,  134,  944,  919,  896,  111,
      938,  963, 2449,  108,  198,  961,  959,  201,  207,  204,

     2449,  205,  955,  301,    0,  933, 2449,  298,  305,  902,
      889,  191, 2449,  202,    0,  889,  942,  220, 2449, 2449,
      940, 2449,  251,  211,  938, 2449,  338,  873,  881,  862,
      864,  858, 2449,  242, 2449,  924, 2449,  255, 2449,  348,
      206, 2449,  884,    0, 2449,  256,  922,  257,  381,  867,
      864,    0,  258,  918,  919,  264,  403,  268,  909,  911,
        0,  350,  850,  821,  849,  819,  827,  813,  859,  836,
      812,  836,  876,  865, 2449,  424,  450,  471, 2449,  870,
        0,  392,  815,  790,  817,  788,  785,  773,  822,  801,
      779,  799,  818,  504,  757,  253,  781,  814,  515,  536,

      559,  580,  606,  627,  650,  812,    0,  681,  760,  735,
      760,  730,  737,  726,  774,  748,  724,  749,  767,  695,
      714,  255,  738,  705,  715,  728,  702,  730,  701,  709,
      697,  744,  270,  702,  729,  721,  769,  737,  758,  781,
      802,  828,  849,  872,  895,  916,  939, 2449,    0,  726,
      711,  645,  674,  645,  641,  629,  678,  655,  632,  658,
      679,  970,  626,  259,  650,  980,  990,  639,  613,  642,
      613,  621,  610,  655,  272,  609,  635,  626,  654, 1004,
      598,  260,  619,  262, 1014, 1035, 1058, 1079, 1105, 1126,
     1149, 1172, 1193, 1216, 1237, 1263, 1284, 1310, 1341,  607,

      580,  606,  576,  584,  572,  620,  599,  575,  602,  612,
     1355,  558,  270,  582, 1365, 1375,  572,  547,  569,  538,
      538,  527,  571,  282,  524,  551,  539,  566, 1389,  511,
      285,  534,  328, 1399, 2449, 1416,  519,  501,  489,  514,
      485,  493,  481,  529,  286,  487,  514,  502,  429, 1426,
      531,  560, 1447, 1470,  585, 1491, 1514,  530,  623, 1535,
     1566,  782,    0,  807, 1587,  529, 1616,  484, 1647, 1657,
      473,  445,  473,  441,  449,  437,  485,  388,  443,  468,
      458,  437, 1667, 1684,  441,  415,  443,  414,  420,  405,
      442,  393,  396,  403,  395, 1698,    0,  419, 1712,  366,

      370,  357,  372,  379,  845, 1059, 1722, 1084, 1122, 1743,
      380,  379, 1242, 1772, 1793, 1824,  376, 1838,  323,  331,
      346,  373, 1852,  372, 1866,  281,  289,  299,  378,  320,
     1876,  401,  321, 1289, 1905, 1931,  309, 1443, 1957, 1983,
     1515, 2009, 1894, 2042,  271,  246,  270,  200,  207,  196,
      242,  404,  200,  197,  188, 2052,  414, 2066, 1592, 1723,
     2076, 2105, 1748, 2126, 2157,  198, 2171,  140,  111,  110,
      409, 2185,  136, 1921,  509,  485, 2195,   41, 1962,  565,
     2209, 2449, 2260, 2264, 2270, 2274, 2274, 2279,  100, 2289,
     2299, 2309, 2319, 2329, 2339, 2349, 2359, 2369, 2379, 2389,

     2399, 2409, 2419, 2429, 2438
    } ;

static yyconst short int yy_def[506] =
    {   0,
      482,    1,    1,    1,  482,  482,  482,  482,  483,  484,
      485,  486,  487,  488,  487,  488,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  482,  482,  483,  489,
      484,  490,  485,  491,  491,  491,  491,  491,  482,  486,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  489,  492,  491,  491,  491,  491,  491,  482,  491,
      491,  491,  491,  491,  482,  489,  484,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  492,  482,  491,  491,  491,  491,  491,  491,  491,

      482,  491,  491,  482,  489,  482,  482,  482,  482,  482,
      482,  482,  482,  482,   47,  482,  491,  491,  482,  482,
      491,  482,  491,  491,  491,  482,  482,  482,  482,  482,
      482,  482,  482,  491,  482,  491,  482,  491,  482,  482,
      482,  482,  482,  493,  482,  491,  494,  491,  482,  482,
      482,  495,  491,  494,  482,  491,  496,  491,  482,  491,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  491,  482,  482,  498,  498,  498,  482,  482,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  482,  500,  500,

      500,  500,  500,  500,  500,  482,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  482,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  482,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  504,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  505,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      504,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,    0,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482
    } ;

static yyconst short int yy_nxt[2544] =
    {   0,
        6,    7,    8,    6,    6,    9,    6,    6,    6,    6,
       10,    6,   11,    6,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   10,   10,   13,
       14,   13,   15,   13,   13,   13,   13,   13,   16,   13,
       13,   13,   13,   13,   17,   13,   13,   13,   13,   13,
       18,   13,   13,   13,   13,   13,   13,   19,   13,   20,
       13,   13,   13,   13,   21,   13,   22,   13,   23,   24,
       13,   13,   25,   13,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   32,   42,   59,   30,  482,   39,

       33,   31,   49,   50,   59,   51,   60,   52,   35,   61,
       36,   59,   37,   49,   50,   59,   38,   41,   31,   31,
       59,   59,   62,   99,  117,   94,  480,   44,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       44,   43,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   43,   43,   43,   43,   43,   59,  482,   59,
       59,  100,   63,   59,   95,   59,  115,   96,  477,   64,
      476,   66,  482,  482,   97,   31,   59,   98,  482,   46,
       41,   41,   41,   41,   43,   43,   54,  476,   55,  102,
       56,  112,   31,   67,   57,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   59,  115,
      113,   59,  118,   68,   59,   69,  103,   59,   59,  109,
      122,  124,  121,   80,  137,  475,  115,   70,   71,  123,
      125,  473,  138,   59,   80,   70,   71,  134,   41,   41,
       41,   41,   41,   41,   41,   72,  131,   71,   73,   74,
      461,  150,  461,   75,   76,  145,   73,   77,   78,   79,
       80,   75,   76,  146,   59,   77,  151,   79,   59,   59,
       59,   59,   81,   71,  136,  148,  153,   59,   82,  156,
      158,   59,  160,  461,  461,   83,  173,   84,  461,  461,
       72,  461,   85,   73,   86,  107,   87,   88,   75,   76,

       89,  106,   90,   78,   79,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   68,  205,
       69,  244,  246,  461,  293,  291,  298,   80,  298,  461,
      461,  456,   70,   71,  356,  201,  354,  240,  365,   70,
       71,  287,  287,  443,  293,  247,  128,  294,  335,  440,
       72,  361,  350,   73,   74,  440,  439,  357,   75,   76,
       73,  367,   77,   78,   79,   75,   76,  350,   68,   77,
      149,   79,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,   70,   71,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  361,  437,  436,  436,  435,  433,
       72,  431,  430,   73,   74,  107,  363,  415,   75,   76,
      356,  106,   77,   78,   79,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  162,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  415,  163,  415,  436,
      407,  414,  412,  164,  440,  410,  182,  410,  410,  310,
      165,  311,  166,  410,  365,  407,  461,  167,  183,  168,
      410,  169,  170,  357,  184,  171,  461,  172,  367,  410,
      193,  185,  194,  186,  410,  476,  442,  335,  187,  462,
      188,  312,  189,  190,  183,  368,  191,  410,  192,  464,

      184,  461,  410,  182,  314,  410,  410,  185,  410,  186,
      410,  335,  195,  361,  187,  183,  196,  404,  189,  190,
      407,  184,  191,  407,  192,  197,  407,  407,  185,  407,
      186,  407,  407,  195,  338,  187,  407,  196,  407,  189,
      190,  404,  407,  191,  202,  192,  197,  208,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  338,  209,
      354,  404,  383,  369,  365,  210,  219,  335,  220,  365,
      365,  365,  211,  365,  212,  365,  365,  365,  478,  213,
      209,  214,  365,  215,  216,  366,  210,  217,  365,  218,
      310,  208,  311,  211,  361,  212,  360,  404,  221,  358,

      213,  356,  222,  209,  215,  216,  356,  356,  217,  210,
      218,  223,  224,  356,  338,  328,  211,  329,  212,  356,
      356,  221,  312,  213,  209,  222,  368,  215,  216,  356,
      210,  217,  356,  218,  223,  314,  219,  211,  220,  212,
      356,  356,  354,  353,  213,  351,  214,  330,  215,  216,
      209,  382,  217,  328,  218,  329,  210,  350,  350,  225,
      332,  350,  350,  211,  350,  212,  350,  350,  221,  350,
      213,  226,  222,  350,  215,  216,  350,  227,  217,  298,
      218,  223,  225,  297,  228,  330,  229,  295,  293,  382,
      293,  230,  293,  231,  226,  232,  233,  293,  332,  234,

      227,  235,  293,  293,  293,  293,  293,  228,  293,  229,
      291,  290,  288,  287,  230,  287,  231,  287,  232,  236,
      287,  287,  234,  287,  235,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  241,  287,  287,  287,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  250,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      287,  251,  248,  246,  246,  246,  246,  252,  261,  246,
      262,  246,  246,  246,  253,  246,  254,  246,  244,  243,

      241,  255,  251,  256,  240,  257,  258,  240,  252,  259,
      240,  260,  328,  250,  396,  253,  240,  254,  240,  240,
      263,  240,  255,  240,  264,  251,  257,  258,  240,  240,
      259,  252,  260,  265,  266,  237,  206,  398,  253,  399,
      254,  205,  204,  263,  330,  255,  251,  264,  382,  257,
      258,  202,  252,  259,  201,  260,  265,  332,  261,  253,
      262,  254,  201,  201,  201,  201,  255,  201,  256,  400,
      257,  258,  251,  401,  259,  310,  260,  416,  252,  201,
      201,  267,  402,  201,  201,  253,  198,  254,  180,  179,
      263,  178,  255,  268,  264,  178,  257,  258,  178,  269,

      259,  178,  260,  265,  267,  178,  270,  312,  271,  178,
      178,  368,  178,  272,  178,  273,  268,  274,  275,  178,
      314,  276,  269,  277,  175,  279,  174,  280,  159,  270,
      155,  271,  107,  107,  155,  128,  272,  147,  273,  251,
      274,  278,  144,  143,  276,  252,  277,  142,  250,  107,
      141,  139,  253,  135,  254,  133,  132,  281,  130,  255,
      268,  282,  129,  257,  258,  127,  269,  259,  126,  260,
      283,  267,  120,  270,  119,  271,   93,  116,  281,  115,
      272,  115,  284,  268,  274,  278,  115,  115,  276,  269,
      277,  283,  115,  115,  115,  107,  270,  112,  271,  113,

      112,  112,  114,  272,  113,  273,  112,  274,  278,  111,
      288,  276,  110,  277,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  295,  109,  299,  106,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  300,   30,
      105,  104,  101,   59,  301,  310,   93,  311,   91,   59,
       30,  302,   48,  303,   47,   47,   47,   47,  304,  300,
      305,   47,  306,  307,   47,  301,  308,   47,  309,  417,
      299,  418,  302,   47,  303,   47,   47,  312,   30,  304,

       28,  313,  300,  306,  307,   27,  482,  308,  301,  309,
      314,  315,  482,  482,  328,  302,  423,  303,  482,  482,
      312,  419,  304,  300,  313,  420,  306,  307,  482,  301,
      308,  482,  309,  314,  421,  310,  302,  311,  303,  482,
      482,  482,  482,  304,  482,  305,  330,  306,  307,  300,
      382,  308,  424,  309,  425,  301,  482,  482,  316,  332,
      482,  482,  302,  482,  303,  482,  482,  312,  482,  304,
      317,  313,  482,  306,  307,  482,  318,  308,  482,  309,
      314,  316,  482,  319,  426,  320,  482,  482,  427,  482,
      321,  482,  322,  317,  323,  324,  482,  428,  325,  318,

      326,  482,  328,  482,  329,  482,  319,  482,  320,  482,
      482,  482,  482,  321,  482,  322,  300,  323,  327,  482,
      482,  325,  301,  326,  482,  299,  482,  482,  482,  302,
      482,  303,  482,  482,  330,  482,  304,  317,  331,  482,
      306,  307,  482,  318,  308,  482,  309,  332,  316,  482,
      319,  482,  320,  482,  482,  330,  482,  321,  482,  333,
      317,  323,  327,  482,  482,  325,  318,  326,  332,  334,
      482,  482,  398,  319,  399,  320,  482,  482,  482,  482,
      321,  300,  322,  482,  323,  327,  335,  301,  325,  482,
      326,  482,  482,  328,  302,  329,  303,  482,  482,  482,

      482,  304,  482,  305,  400,  306,  307,  300,  401,  308,
      482,  309,  335,  301,  482,  482,  336,  402,  482,  417,
      302,  418,  303,  482,  482,  330,  482,  304,  337,  331,
      482,  306,  307,  338,  339,  308,  482,  309,  332,  482,
      482,  340,  336,  341,  482,  482,  482,  482,  342,  482,
      343,  419,  344,  345,  337,  420,  346,  482,  347,  338,
      339,  482,  482,  482,  421,  482,  482,  340,  482,  341,
      482,  482,  482,  482,  342,  482,  343,  482,  344,  348,
      482,  482,  346,  482,  347,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  351,  482,  482,  482,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  358,
      482,  482,  482,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  363,  482,  482,  482,  482,  482,  482,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      300,  482,  482,  424,  482,  425,  301,  482,  482,  370,
      482,  482,  482,  302,  482,  303,  482,  482,  312,  482,
      304,  371,  313,  482,  306,  307,  482,  372,  308,  482,

      309,  314,  370,  482,  373,  426,  374,  482,  482,  427,
      482,  375,  482,  376,  371,  377,  378,  482,  428,  379,
      372,  380,  482,  482,  482,  482,  482,  373,  482,  374,
      482,  482,  482,  482,  375,  317,  376,  335,  377,  381,
      482,  318,  379,  482,  380,  398,  370,  458,  319,  482,
      320,  482,  482,  330,  482,  321,  482,  333,  371,  323,
      327,  482,  482,  325,  372,  326,  332,  384,  335,  482,
      482,  373,  482,  374,  482,  482,  482,  400,  375,  385,
      376,  401,  377,  381,  338,  386,  379,  482,  380,  482,
      402,  482,  387,  482,  388,  482,  482,  482,  384,  389,

      482,  390,  482,  391,  392,  482,  482,  393,  482,  394,
      385,  482,  482,  482,  482,  338,  386,  482,  335,  482,
      482,  482,  417,  387,  465,  388,  482,  482,  482,  482,
      389,  337,  390,  482,  391,  395,  482,  339,  393,  482,
      394,  482,  482,  482,  340,  482,  341,  482,  384,  400,
      482,  342,  482,  403,  419,  344,  348,  482,  420,  346,
      385,  347,  402,  482,  482,  338,  386,  421,  482,  482,
      482,  482,  482,  387,  482,  388,  482,  482,  482,  482,
      389,  482,  390,  482,  391,  395,  482,  482,  393,  482,
      394,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  363,  482,  482,  482,  482,  482,  482,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  358,  482,
      482,  482,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  412,  466,  482,  467,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  371,  482,  482,  482,
      482,  482,  372,  482,  335,  482,  482,  482,  424,  373,
      472,  374,  482,  482,  419,  468,  375,  385,  422,  469,
      377,  381,  482,  386,  379,  335,  380,  421,  470,  482,

      387,  482,  388,  482,  384,  426,  482,  389,  482,  429,
      426,  391,  395,  482,  427,  393,  385,  394,  428,  482,
      482,  338,  386,  428,  482,  384,  482,  482,  482,  387,
      482,  388,  482,  482,  482,  482,  389,  385,  390,  482,
      391,  432,  338,  386,  393,  482,  394,  482,  482,  482,
      387,  482,  388,  482,  482,  482,  482,  389,  482,  390,
      482,  391,  395,  482,  351,  393,  482,  394,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  433,  482,
      482,  482,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  358,  482,  482,  482,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  437,  335,  482,  482,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      482,  482,  482,  335,  482,  482,  482,  444,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  482,  445,
      482,  466,  482,  467,  338,  446,  482,  482,  482,  335,
      482,  482,  447,  444,  448,  482,  482,  482,  482,  449,
      482,  450,  482,  451,  452,  445,  482,  453,  482,  454,
      338,  446,  482,  468,  482,  335,  482,  469,  447,  444,
      448,  482,  466,  482,  481,  449,  470,  450,  482,  451,

      455,  445,  482,  453,  482,  454,  338,  446,  482,  482,
      482,  335,  482,  482,  447,  444,  448,  482,  482,  482,
      482,  449,  482,  450,  468,  451,  457,  445,  469,  453,
      482,  454,  338,  446,  482,  482,  482,  470,  482,  482,
      447,  384,  448,  482,  482,  482,  482,  449,  482,  450,
      482,  451,  455,  385,  482,  453,  482,  454,  338,  386,
      482,  482,  482,  482,  482,  482,  387,  482,  388,  482,
      482,  482,  482,  389,  482,  390,  482,  391,  395,  363,
      482,  393,  482,  394,  482,  482,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  463,  463,  463,  463,

      463,  463,  463,  463,  463,  463,  412,  335,  482,  482,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      445,  482,  482,  482,  482,  482,  446,  482,  335,  482,
      482,  482,  482,  447,  482,  448,  482,  444,  468,  482,
      449,  482,  471,  482,  451,  455,  482,  482,  453,  445,
      454,  470,  482,  482,  338,  446,  482,  482,  444,  482,
      482,  482,  447,  482,  448,  482,  482,  482,  482,  449,
      445,  450,  482,  451,  455,  338,  446,  453,  482,  454,
      482,  482,  482,  447,  482,  448,  482,  482,  482,  482,
      449,  482,  450,  482,  451,  455,  482,  433,  453,  482,

      454,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  473,  482,  482,  482,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  437,  482,  482,  482,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  473,
      482,  482,  482,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,   29,  482,  482,  482,   29,   31,  482,
      482,   31,   34,  482,  482,  482,  482,   34,   40,  482,
       40,   40,   41,   41,   43,  482,  482,   43,   43,   53,
       53,   53,   53,   53,  482,   53,   53,   53,   53,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  152,
      482,  152,  152,  152,  152,  152,  152,  152,  152,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  157,
      482,  157,  157,  157,  157,  157,  157,  157,  157,  161,
      482,  161,  161,  161,  161,  161,  161,  161,  161,  176,
      482,  176,  176,  176,  176,  176,  176,  176,  176,  181,
      482,  181,  181,  181,  181,  181,  181,  181,  181,  199,
      482,  199,  199,  199,  199,  199,  199,  199,  199,  207,
      482,  207,  207,  207,  207,  207,  207,  207,  207,  238,

      482,  238,  238,  238,  238,  238,  238,  238,  238,  249,
      482,  249,  249,  249,  249,  249,  249,  249,  249,  285,
      482,  285,  285,  285,  285,  285,  285,  285,  285,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  411,  482,
      411,  411,  411,  411,  411,  411,  411,  411,    5,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482
    } ;

static yyconst short int yy_chk[2544] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,   14,   35,   12,   29,   12,

       11,   12,   28,   28,   36,   29,   35,  489,   11,   36,
       11,   37,   11,   49,   49,   54,   11,   14,   12,   12,
       60,   94,   37,   60,   94,   54,  478,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   38,   16,   55,
       61,   61,   38,   56,   55,   57,   90,   55,  473,   38,
      470,   40,   33,   40,   56,   40,   63,   57,   33,   15,
       16,   16,   16,   16,   15,   15,   33,  469,   33,   63,
       33,   90,   40,   40,   33,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   64,   81,
       86,   95,   95,   45,   98,   45,   64,  100,  102,   81,
       99,  100,   98,  112,  124,  468,   86,   45,   45,   99,
      102,  466,  124,  118,  114,  112,  112,  118,   16,   16,
       16,   16,   16,   16,   16,   45,  114,  114,   45,   45,
      455,  141,  454,   45,   45,  134,  112,   45,   45,   45,
       47,  112,  112,  134,  123,  112,  141,  112,  138,  146,
      148,  153,   47,   47,  123,  138,  146,  156,   47,  148,
      153,  158,  156,  453,  451,   47,  158,   47,  450,  449,
       47,  448,   47,   47,   47,   69,   47,   47,   47,   47,

       47,   69,   47,   47,   47,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  108,  196,
      108,  222,  233,  447,  275,  264,  282,  109,  284,  446,
      445,  437,  108,  108,  324,  196,  313,  222,  345,  109,
      109,  264,  282,  433,  284,  233,  109,  275,  430,  428,
      108,  331,  313,  108,  108,  427,  426,  324,  108,  108,
      109,  345,  108,  108,  108,  109,  109,  331,  140,  109,
      140,  109,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  140,  140,  162,  162,  162,  162,  162,  162,

      162,  162,  162,  162,  333,  424,  421,  420,  419,  417,
      140,  412,  411,  140,  140,  149,  404,  402,  140,  140,
      333,  149,  140,  140,  140,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  157,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  401,  157,  403,  422,
      378,  400,  398,  157,  429,  392,  176,  395,  394,  349,
      157,  349,  157,  432,  403,  422,  452,  157,  176,  157,
      429,  157,  157,  378,  176,  157,  457,  157,  392,  393,
      177,  176,  177,  176,  391,  471,  432,  476,  176,  452,
      176,  349,  176,  176,  177,  349,  176,  390,  176,  457,

      177,  471,  389,  178,  349,  388,  387,  177,  386,  177,
      385,  475,  177,  382,  177,  178,  177,  476,  177,  177,
      381,  178,  177,  380,  177,  177,  379,  377,  178,  376,
      178,  375,  374,  178,  476,  178,  373,  178,  372,  178,
      178,  475,  371,  178,  194,  178,  178,  199,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  475,  199,
      368,  366,  358,  351,  348,  199,  200,  480,  200,  347,
      346,  344,  199,  343,  199,  342,  341,  340,  475,  199,
      200,  199,  339,  199,  199,  338,  200,  199,  337,  199,
      352,  201,  352,  200,  332,  200,  330,  480,  200,  328,

      200,  327,  200,  201,  200,  200,  326,  325,  200,  201,
      200,  200,  202,  323,  480,  355,  201,  355,  201,  322,
      321,  201,  352,  201,  202,  201,  352,  201,  201,  320,
      202,  201,  319,  201,  201,  352,  203,  202,  203,  202,
      318,  317,  314,  312,  202,  310,  202,  355,  202,  202,
      203,  355,  202,  359,  202,  359,  203,  309,  308,  204,
      355,  307,  306,  203,  305,  203,  304,  303,  203,  302,
      203,  204,  203,  301,  203,  203,  300,  204,  203,  283,
      203,  203,  205,  281,  204,  359,  204,  279,  278,  359,
      277,  204,  276,  204,  205,  204,  204,  274,  359,  204,

      205,  204,  273,  272,  271,  270,  269,  205,  268,  205,
      265,  263,  261,  260,  205,  259,  205,  258,  205,  205,
      257,  256,  205,  255,  205,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  220,  254,  253,  252,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  238,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      251,  238,  237,  236,  235,  234,  232,  238,  239,  231,
      239,  230,  229,  228,  238,  227,  238,  226,  223,  221,

      219,  238,  239,  238,  218,  238,  238,  217,  239,  238,
      216,  238,  362,  240,  362,  239,  215,  239,  214,  213,
      239,  212,  239,  211,  239,  240,  239,  239,  210,  209,
      239,  240,  239,  239,  241,  206,  198,  364,  240,  364,
      240,  197,  195,  240,  362,  240,  241,  240,  362,  240,
      240,  193,  241,  240,  192,  240,  240,  362,  242,  241,
      242,  241,  191,  190,  189,  188,  241,  187,  241,  364,
      241,  241,  242,  364,  241,  405,  241,  405,  242,  186,
      185,  243,  364,  184,  183,  242,  180,  242,  174,  173,
      242,  172,  242,  243,  242,  171,  242,  242,  170,  243,

      242,  169,  242,  242,  244,  168,  243,  405,  243,  167,
      166,  405,  165,  243,  164,  243,  244,  243,  243,  163,
      405,  243,  244,  243,  160,  245,  159,  245,  155,  244,
      154,  244,  151,  150,  147,  143,  244,  136,  244,  245,
      244,  244,  132,  131,  244,  245,  244,  130,  246,  129,
      128,  125,  245,  121,  245,  117,  116,  245,  111,  245,
      246,  245,  110,  245,  245,  106,  246,  245,  103,  245,
      245,  247,   97,  246,   96,  246,   92,   91,  246,   89,
      246,   88,  246,  247,  246,  246,   87,   85,  246,  247,
      246,  246,   84,   83,   82,   80,  247,   79,  247,   78,

       77,   76,   75,  247,   74,  247,   73,  247,  247,   72,
      262,  247,   71,  247,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  280,   70,  285,   68,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  285,   67,
       66,   65,   62,   58,  285,  286,   53,  286,   48,   34,
       31,  285,   27,  285,   26,   25,   24,   23,  285,  286,
      285,   22,  285,  285,   21,  286,  285,   20,  285,  406,
      287,  406,  286,   19,  286,   18,   17,  286,   10,  286,

        9,  286,  287,  286,  286,    8,    5,  286,  287,  286,
      286,  288,    0,    0,  408,  287,  408,  287,    0,    0,
      287,  406,  287,  288,  287,  406,  287,  287,    0,  288,
      287,    0,  287,  287,  406,  289,  288,  289,  288,    0,
        0,    0,    0,  288,    0,  288,  408,  288,  288,  289,
      408,  288,  409,  288,  409,  289,    0,    0,  290,  408,
        0,    0,  289,    0,  289,    0,    0,  289,    0,  289,
      290,  289,    0,  289,  289,    0,  290,  289,    0,  289,
      289,  291,    0,  290,  409,  290,    0,    0,  409,    0,
      290,    0,  290,  291,  290,  290,    0,  409,  290,  291,

      290,    0,  292,    0,  292,    0,  291,    0,  291,    0,
        0,    0,    0,  291,    0,  291,  292,  291,  291,    0,
        0,  291,  292,  291,    0,  293,    0,    0,    0,  292,
        0,  292,    0,    0,  292,    0,  292,  293,  292,    0,
      292,  292,    0,  293,  292,    0,  292,  292,  294,    0,
      293,    0,  293,    0,    0,  293,    0,  293,    0,  293,
      294,  293,  293,    0,    0,  293,  294,  293,  293,  295,
        0,    0,  413,  294,  413,  294,    0,    0,    0,    0,
      294,  295,  294,    0,  294,  294,  297,  295,  294,    0,
      294,    0,    0,  296,  295,  296,  295,    0,    0,    0,

        0,  295,    0,  295,  413,  295,  295,  296,  413,  295,
        0,  295,  298,  296,    0,    0,  297,  413,    0,  434,
      296,  434,  296,    0,    0,  296,    0,  296,  297,  296,
        0,  296,  296,  297,  297,  296,    0,  296,  296,    0,
        0,  297,  298,  297,    0,    0,    0,    0,  297,    0,
      297,  434,  297,  297,  298,  434,  297,    0,  297,  298,
      298,    0,    0,    0,  434,    0,    0,  298,    0,  298,
        0,    0,    0,    0,  298,    0,  298,    0,  298,  298,
        0,    0,  298,    0,  298,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  311,    0,    0,    0,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  329,
        0,    0,    0,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  336,    0,    0,    0,    0,    0,    0,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      350,    0,    0,  438,    0,  438,  350,    0,    0,  353,
        0,    0,    0,  350,    0,  350,    0,    0,  350,    0,
      350,  353,  350,    0,  350,  350,    0,  353,  350,    0,

      350,  350,  354,    0,  353,  438,  353,    0,    0,  438,
        0,  353,    0,  353,  354,  353,  353,    0,  438,  353,
      354,  353,    0,    0,    0,    0,    0,  354,    0,  354,
        0,    0,    0,    0,  354,  356,  354,  360,  354,  354,
        0,  356,  354,    0,  354,  441,  357,  441,  356,    0,
      356,    0,    0,  356,    0,  356,    0,  356,  357,  356,
      356,    0,    0,  356,  357,  356,  356,  360,  361,    0,
        0,  357,    0,  357,    0,    0,    0,  441,  357,  360,
      357,  441,  357,  357,  360,  360,  357,    0,  357,    0,
      441,    0,  360,    0,  360,    0,    0,    0,  361,  360,

        0,  360,    0,  360,  360,    0,    0,  360,    0,  360,
      361,    0,    0,    0,    0,  361,  361,    0,  367,    0,
        0,    0,  459,  361,  459,  361,    0,    0,    0,    0,
      361,  365,  361,    0,  361,  361,    0,  365,  361,    0,
      361,    0,    0,    0,  365,    0,  365,    0,  367,  365,
        0,  365,    0,  365,  459,  365,  365,    0,  459,  365,
      367,  365,  365,    0,    0,  367,  367,  459,    0,    0,
        0,    0,    0,  367,    0,  367,    0,    0,    0,    0,
      367,    0,  367,    0,  367,  367,    0,    0,  367,    0,
      367,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  384,    0,    0,    0,    0,    0,    0,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  396,    0,
        0,    0,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  399,  460,    0,  460,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  407,    0,    0,    0,
        0,    0,  407,    0,  414,    0,    0,    0,  463,  407,
      463,  407,    0,    0,  407,  460,  407,  410,  407,  460,
      407,  407,    0,  410,  407,  415,  407,  407,  460,    0,

      410,    0,  410,    0,  414,  410,    0,  410,    0,  410,
      463,  410,  410,    0,  463,  410,  414,  410,  410,    0,
        0,  414,  414,  463,    0,  415,    0,    0,    0,  414,
        0,  414,    0,    0,    0,    0,  414,  415,  414,    0,
      414,  414,  415,  415,  414,    0,  414,    0,    0,    0,
      415,    0,  415,    0,    0,    0,    0,  415,    0,  415,
        0,  415,  415,    0,  416,  415,    0,  415,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  418,    0,
        0,    0,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  423,    0,    0,    0,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  425,  435,    0,    0,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
        0,    0,    0,  436,    0,    0,    0,  435,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,    0,  435,
        0,  474,    0,  474,  435,  435,    0,    0,    0,  439,
        0,    0,  435,  436,  435,    0,    0,    0,    0,  435,
        0,  435,    0,  435,  435,  436,    0,  435,    0,  435,
      436,  436,    0,  474,    0,  440,    0,  474,  436,  439,
      436,    0,  479,    0,  479,  436,  474,  436,    0,  436,

      436,  439,    0,  436,    0,  436,  439,  439,    0,    0,
        0,  442,    0,    0,  439,  440,  439,    0,    0,    0,
        0,  439,    0,  439,  479,  439,  439,  440,  479,  439,
        0,  439,  440,  440,    0,    0,    0,  479,    0,    0,
      440,  442,  440,    0,    0,    0,    0,  440,    0,  440,
        0,  440,  440,  442,    0,  440,    0,  440,  442,  442,
        0,    0,    0,    0,    0,    0,  442,    0,  442,    0,
        0,    0,    0,  442,    0,  442,    0,  442,  442,  444,
        0,  442,    0,  442,    0,    0,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  458,  462,    0,    0,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      461,    0,    0,    0,    0,    0,  461,    0,  464,    0,
        0,    0,    0,  461,    0,  461,    0,  462,  461,    0,
      461,    0,  461,    0,  461,  461,    0,    0,  461,  462,
      461,  461,    0,    0,  462,  462,    0,    0,  464,    0,
        0,    0,  462,    0,  462,    0,    0,    0,    0,  462,
      464,  462,    0,  462,  462,  464,  464,  462,    0,  462,
        0,    0,    0,  464,    0,  464,    0,    0,    0,    0,
      464,    0,  464,    0,  464,  464,    0,  465,  464,    0,

      464,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  467,    0,    0,    0,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  472,    0,    0,    0,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  481,
        0,    0,    0,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  483,    0,    0,    0,  483,  484,    0,
        0,  484,  485,    0,    0,    0,    0,  485,  486,    0,
      486,  486,  487,  487,  488,    0,    0,  488,  488,  490,
      490,  490,  490,  490,    0,  490,  490,  490,  490,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  493,
        0,  493,  493,  493,  493,  493,  493,  493,  493,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  495,
        0,  495,  495,  495,  495,  495,  495,  495,  495,  496,
        0,  496,  496,  496,  496,  496,  496,  496,  496,  497,
        0,  497,  497,  497,  497,  497,  497,  497,  497,  498,
        0,  498,  498,  498,  498,  498,  498,  498,  498,  499,
        0,  499,  499,  499,  499,  499,  499,  499,  499,  500,
        0,  500,  500,  500,  500,  500,  500,  500,  500,  501,

        0,  501,  501,  501,  501,  501,  501,  501,  501,  502,
        0,  502,  502,  502,  502,  502,  502,  502,  502,  503,
        0,  503,  503,  503,  503,  503,  503,  503,  503,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  505,    0,
      505,  505,  505,  505,  505,  505,  505,  505,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/ChineseCharParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "../src/ChineseCharParser.l"

/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.cs.cmu.edu/~lemur/license.html
 *
 *==========================================================================
*/


#include "ChineseCharParser.hpp"

#include <cstring>

#include <cctype>
#include <cstdlib>
#include <cstdio>

#include <iostream>
#include <fstream>

#define B_DOC 1
#define E_DOC 2
#define B_DOCHDR 12
#define E_DOCHDR 13
#define F_DOCNO 3
#define WORD 11
#define UPWORD 18
#define CONTRACTION 14
#define ACRONYM 15
#define ACRONYM2 17
#define UNKNOWN 16
#define B_TEXT 19
#define E_TEXT 20


extern FILE * ChineseCharin;
extern char * ChineseChartext;

long CCpos;

#define SKIP 1

#line 1162 "../src/ChineseCharParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 88 "../src/ChineseCharParser.l"


#line 1316 "../src/ChineseCharParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 483 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2449 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_DOC; /*1*/}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_DOC; /*2*/}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return F_DOCNO; /*3*/}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 93 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT; /*4*}
"</TEXT>"                           { CCpos += ChineseCharleng; return E_TEXT; /*5*}
"<HL>"                              { CCpos += ChineseCharleng; return B_TEXT;/*6*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*7*/}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 97 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*8*/}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 98 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*9*/}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 99 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*10*/}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*11*/}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT;/*12*/ }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT;/*13*/ }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return B_TEXT; /*14*/}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return E_TEXT; /*15*/}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap tags */ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap other tags*/}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap symbols */ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap symbols */ }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap one chinese punctutions */ } 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return UPWORD; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return ACRONYM2; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return CONTRACTION;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return ACRONYM; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; /* chinese number or date */ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return WORD; /* single chinese char */ }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; /* zap newline */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "../src/ChineseCharParser.l"
{ CCpos += ChineseCharleng; return UNKNOWN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 120 "../src/ChineseCharParser.l"
ECHO;
	YY_BREAK
#line 1541 "../src/ChineseCharParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 483 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 483 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 482);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 120 "../src/ChineseCharParser.l"


#define OUTER 0
#define DOC 1
#define TEXT 9

ChineseCharParser::ChineseCharParser() {
  state = OUTER;
}

long ChineseCharParser::fileTell() {
  return CCpos;
}

void ChineseCharParser::parseFile(char * filename) {  
  CCpos = 0;
  ChineseCharin = fopen(filename, "r");
  doParse();
  fclose(ChineseCharin);
}

void ChineseCharParser::parseBuffer(char* buf, int len) {
  yy_scan_bytes(buf, len);
  doParse();
}


void ChineseCharParser::doParse() {
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering a tag
  // can transition the machine into another state.
  // When in the TEXT state, text is parsed.
  while (tok = ChineseCharlex()) {
      //      fprintf(stderr, "parsing tok %d %s\n", tok, ChineseChartext);
    switch (tok) {	
    case E_DOC:
      state = OUTER;
      break;
    
    case B_DOC:
      state = DOC;
      docpos = CCpos - ChineseCharleng;
      break;

    case F_DOCNO:
      {
        // Extract the document number and pass it on.
	char * dn = ChineseChartext + 7;
	while (isspace(*dn)) dn++;
	char * de = dn;
	while (!isspace(*de) && *de != '<') de++;
	*de = '\0';
	if (textHandler != NULL) textHandler->foundDoc(dn);

	state = TEXT;
	break;
      }

    case B_TEXT:
      state = TEXT;
      break;

    case E_TEXT:
      state = DOC;
      break;
         
    case WORD:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case CONTRACTION:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case UPWORD:
      if (state == TEXT) {
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;

    case ACRONYM:
      if (state == TEXT) {
	char * e = ChineseChartext;
	for (char * c = ChineseChartext; *c != '\0'; c++) {
	  if (*c != '.') *(e++) = *c;
	}
	*e = '\0';
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);
      }
      break;
    
    case ACRONYM2:
      if (state == TEXT) {
        char * c;
	// strip suffix
	for (c = ChineseChartext; *c != '\'' && *c != '\0' && *c != 's'; c++);
        *c = '\0';
	if (textHandler != NULL) textHandler->foundWord(ChineseChartext);	
      }      
      break;
    }
  }
}

