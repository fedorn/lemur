#define yy_create_buffer InQuery_create_buffer
#define yy_delete_buffer InQuery_delete_buffer
#define yy_scan_buffer InQuery_scan_buffer
#define yy_scan_string InQuery_scan_string
#define yy_scan_bytes InQuery_scan_bytes
#define yy_flex_debug InQuery_flex_debug
#define yy_init_buffer InQuery_init_buffer
#define yy_flush_buffer InQuery_flush_buffer
#define yy_load_buffer_state InQuery_load_buffer_state
#define yy_switch_to_buffer InQuery_switch_to_buffer
#define yyin InQueryin
#define yyleng InQueryleng
#define yylex InQuerylex
#define yyout InQueryout
#define yyrestart InQueryrestart
#define yytext InQuerytext

#line 19 "utility/src/InQueryOpParser.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
static yyconst short int yy_accept[575] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   59,
       59,   59,   59,   59,   57,   55,   58,   58,   59,   58,
        4,    5,    4,    4,    1,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    6,    7,    0,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   31,   57,    0,    0,   57,   58,   58,    0,
        0,   58,   58,    0,   58,   56,   58,   58,   58,   58,
       58,   58,    4,    1,    2,    0,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    2,    4,
        4,    4,    4,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,   41,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,    0,   57,   58,   58,    0,   58,
       58,   58,    0,   56,    0,   58,   58,   58,   58,   58,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    0,    8,    9,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   34,    0,   35,    0,   36,   37,   38,   39,    0,
        0,    0,    0,    0,   46,   48,   47,   49,   52,    0,
        0,    0,    0,   57,   58,   58,   58,   58,   58,   58,
       58,    4,    1,    2,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,   11,
        0,   12,   23,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,   53,   54,   57,   58,   58,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    0,    0,    0,    0,   32,    0,    0,

        0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    0,    0,    0,    0,   21,   17,    0,    0,   22,
       18,    0,    0,    0,    0,    0,   44,    0,   45,   57,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,   13,
       14,   25,   26,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    0,    0,    0,    0,   29,   30,   42,

       43,    4,    4,    4,    4,    4,    4,    4,    4,    0,
        0,    0,    0,    4,    4,    4,    4,    0,    0,    0,
        0,    0,    0,    4,    4,    4,    4,    4,    4,    0,
        0,    0,    0,    0,    0,    4,    4,    4,    4,    4,
        4,    0,    0,    0,    0,    0,    0,    4,    4,    4,
        4,    4,    4,   19,    0,    0,   20,    0,    0,    4,
        4,    4,    4,    4,    4,   15,   27,   16,   28,    4,
        4,    4,    4,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    1,    1,    7,    8,
        9,   10,    1,   11,   12,   13,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,   15,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   27,   38,   39,   40,   27,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   27,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   27,   62,   63,
       64,   27,    1,    1,    1,    1,    1,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   65,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   65,   66,   66,   66,
       66,   66,   66,   66,   66
    } ;

static yyconst int yy_meta[68] =
    {   0,
        1,    2,    3,    2,    1,    1,    4,    1,    1,    1,
        5,    6,    7,    8,    1,    1,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   12,   13
    } ;

static yyconst short int yy_base[625] =
    {   0,
        0,   67,  134,  201,   15,   18,   26,   34, 1537, 3316,
     1492,  255,    0, 1521,   33, 3316,   38,   80,    0,  317,
       23,   51,   53,  375, 3316, 3316,  437,   50,  504,   31,
      571,  638,  101,  705, 3316, 3316, 1529, 1519,   58,   69,
       64,   76,  126,   73,   67,  132,  136,  102,  118,   61,
       95, 1478,   85,   70,  106,  109, 1489, 1475,  173,  131,
      108, 1470,    0, 1514, 1513, 1512,  173,    0, 1506, 1509,
     1497, 1493,  212,  113,  216, 1501,   97,  181,  171,  157,
      179,  282,   40, 3316, 3316,  246, 3316,  230,  219,  251,
      262,  326,  330,  341,  328,  245,  366,  432,  248,  460,

      333,  355,  187,  335,  370,  407,  446,  345,  451,  478,
      499,  464,  467,  772,  351,  359,  839,  906,  973, 1040,
     1107, 1174, 1241,  247, 1308,  474,  484,  132,  333, 1375,
     1442, 1509,  419,  523, 1501, 1483, 1457,  252, 1447, 1464,
     1470, 1438, 1444,   35, 1462,   39, 1437, 1458, 1474, 1432,
     1447, 1451, 1426, 1452, 1427, 1472, 3316, 3316, 1450, 1450,
      260, 1423, 1423,  447, 1451, 1449, 1425, 1423, 1462, 1438,
     1413, 1419, 1458,  388, 1458,  466,    0, 1463, 1466, 1465,
     1454,  451, 1452, 1460,    0, 1576, 1641, 1706, 1771, 1836,
      550,  522,  547,  565,  480,  486,  462,  538,  552,  582,

      559,  554,  556,  588,  599,  607,  593,  617,  612,  619,
      614,  621,  535,  623,  625,  632,  649,  663,  668,  674,
      655,  661,  677,  684,  686,  688,  690,  693,  715, 1901,
     1449, 1448, 1968,  596,  662, 2035,  668, 2102,  733, 2169,
     2236, 2303, 2370, 2437, 1458, 3316, 3316, 3316, 1426, 1399,
     1394, 1398, 1405, 1372, 1379, 1398,  244, 1403, 1369,  697,
     1373, 3316, 1396, 3316, 1363, 3316, 3316, 3316, 3316, 1366,
     1378,  519, 1315, 1330, 3316, 3316, 3316, 3316, 1350, 1325,
     1299, 1327,    0,  726, 1315,  725,  678,  731,  736,  739,
      741,  756, 1302, 1299,  753,  758,  766,  784,  786,  790,

      800,  760,  802,  805,  807,  813,  809,  865,  811,  817,
      819,  851,  854,  856,  858,  860,  862,  867,  869,  873,
      875,  882,  879,  884,  886,  889,  918,  901,  892,  927,
     2504,  229,  872,    0, 1289,    0,  890, 1268,  874, 1248,
      540,  898, 3316, 1255, 3316, 1201, 1211, 1193, 1191, 1181,
     1159, 1155, 1151, 1142, 1140, 1113, 1140, 1107, 3316, 1097,
     1078, 3316, 3316,  290, 1113, 2571,  934,  940,  942,  945,
      949,  951,  953,  967,  982,  984,  990,  959,  993,  998,
     1008, 1000, 1002, 1004, 1022, 1010, 1017, 1014, 1019, 1024,
     1052, 2636, 2703, 1075, 1039, 1062, 1018, 3316,   95, 1003,

     1006, 3316,  289,  962,  949,  952,  919,  942,  942,  898,
      898,  919, 1058, 1066, 1034, 1026, 1060, 1062, 1068, 1070,
     1074, 1076, 1078, 1082, 1116, 1088, 1120, 1090, 1092, 1123,
     1095,  895,  848,  849,  821, 3316, 3316,  838,  842, 3316,
     3316,  815,  788,  804,  768,  791, 3316,  757, 3316,  775,
     1126, 1136, 1138, 1141, 1143, 1145, 1150, 1147, 1152, 1155,
     1157, 1159, 1162, 1200, 1186, 1191, 1194, 1202, 1208, 3316,
     3316, 3316, 3316,  750,  757,  966,  727,  733,  702,  736,
      734, 1210, 1212, 1215, 1217, 1224, 1219, 1226, 1221, 1236,
     1253, 1255, 1259,  668,  656,  627,  613, 3316, 3316,  645,

      603, 1262, 1228, 1279, 1271, 1266, 1268, 1277, 1281,  336,
      576,  478,  550, 1302, 1290, 1285, 1292,  588,  567,  569,
      520,  479,  484, 1322, 1295, 1325, 1331, 1336, 1338,  513,
      474,  431,  414,  389,  366, 1329, 1342, 1357, 1350, 1348,
     1352,  385,  375,  354,  296,  255,  217, 1360, 1370, 1391,
     1354, 1362, 1398, 3316,  244,  181, 3316,  137,   49, 1288,
     1394, 1419, 1400, 1414, 1402, 3316, 3316, 3316, 3316, 1409,
     1421, 1423, 1425, 3316, 2770, 2783, 2791, 2797, 2806, 2818,
     2830, 2842, 2855, 2868, 2881, 2894, 2907, 2913, 2918, 2927,
     2937, 2942, 2948, 2960, 2973, 2986, 2999, 3012, 3025, 3038,

     3045, 3057, 3069, 3081, 3093, 3105, 3117, 3129, 3142, 3155,
     3168, 3181, 3194, 3207, 3220, 3233, 3239, 3245, 3254, 3259,
     3265, 3277, 3290, 3302
    } ;

static yyconst short int yy_def[625] =
    {   0,
      575,  575,  576,  576,    2,    2,    2,    2,  574,  574,
      574,  574,  577,  574,  578,  574,  579,  579,  580,  581,
      582,  574,  582,  582,  574,  574,  583,  582,  584,  582,
      585,  585,  586,  587,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  577,  574,  574,  588,  578,  589,  590,  591,
      592,  593,  579,  574,  593,  574,  574,  590,  591,  592,
      593,  579,  582,  574,  574,  574,  574,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  583,  582,  582,  594,  584,  595,  596,
      597,  598,  599,   32,  599,  582,  582,  574,  574,  596,
      597,  598,  125,   32,  600,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  588,  588,  578,  589,  590,  591,  591,
      601,  592,  601,  574,  602,  603,  604,  605,  606,  607,
      608,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  594,
      230,  118,  595,  130,  131,  609,  132,  609,  610,  611,
      612,  613,  614,  615,  616,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  617,  618,  592,  619,  620,  592,  621,  592,
      621,  608,  616,  616,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      622,  118,  132,  130,  131,  132,  238,  132,  238,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  617,  623,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  622,  624,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  574,  574,  574,  574,  574,  574,  574,

      574,  582,  582,  582,  582,  582,  582,  582,  582,  574,
      574,  574,  574,  582,  582,  582,  582,  574,  574,  574,
      574,  574,  574,  582,  582,  582,  582,  582,  582,  574,
      574,  574,  574,  574,  574,  582,  582,  582,  582,  582,
      582,  574,  574,  574,  574,  574,  574,  582,  582,  582,
      582,  582,  582,  574,  574,  574,  574,  574,  574,  582,
      582,  582,  582,  582,  582,  574,  574,  574,  574,  582,
      582,  582,  582,    0,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574
    } ;

static yyconst short int yy_nxt[3384] =
    {   0,
       10,   10,   10,   10,   11,   12,   10,   10,   10,   13,
       10,   10,   14,   15,   16,   10,   22,   22,   22,   22,
       22,   22,   35,   26,  574,   35,   26,   22,   22,   22,
       84,   85,   18,   36,   26,   22,   22,   22,   84,   85,
       10,   36,   26,   65,   69,   66,   67,   84,   85,   70,
       71,   72,   86,   86,   86,  256,   18,   84,   85,   87,
       84,   85,  257,  115,   19,   20,   10,   10,   10,   10,
       10,   11,   12,   10,   10,   10,   13,   10,   10,   14,
       15,   16,   10,   74,  259,  138,   69,  136,  140,  152,
      260,   70,   71,   75,  141,   76,   88,  154,  169,   18,

      144,  172,   77,   77,   77,   74,  145,   10,  128,  129,
      139,  137,  569,  142,  153,  164,   74,   76,  143,  142,
      436,  155,  169,   18,  143,  146,  139,  437,   76,  170,
      147,   19,   20,   10,   21,   22,   22,   22,   23,   24,
       21,   25,   26,   27,   21,   21,   28,   29,   30,   21,
      148,  156,  159,  171,  165,  146,  149,  166,  150,  160,
      147,  185,  185,  151,  161,  157,   32,   83,  167,  161,
      181,  168,  162,  179,   21,  150,  156,  162,  167,  163,
      151,  168,  568,   65,  163,   66,  176,   69,  161,  158,
       32,  183,  156,  161,   84,   85,  185,  185,   33,   34,

       21,   21,   22,   22,   22,   23,   24,   21,   25,   26,
       27,   21,   21,   28,   29,   30,   21,  156,   69,   74,
      567,  185,  188,   70,   71,   72,   84,   85,  183,   75,
      158,   76,   89,   32,  191,  185,  187,   84,   85,   83,
      193,   21,  332,  185,  189,  185,  186,   86,   86,   86,
      574,   74,   84,   85,   87,   84,   85,   32,   84,   85,
      123,  220,   83,  126,  566,   33,   34,   21,   38,   84,
       85,   39,   40,   41,  559,  210,   42,  348,  194,  349,
      192,  249,   43,   44,   45,   46,   47,   48,   69,   49,
      272,   50,   51,   70,   71,   72,   52,   53,   54,  211,

       65,   55,  412,  195,  193,  250,   56,   57,   58,   59,
       60,   48,  558,   61,  272,   50,   62,   77,   77,   77,
       77,   77,   77,   78,   77,   77,   77,   77,   79,   80,
       81,   77,   77,   84,   85,   84,   85,   84,   85,  440,
       84,   85,   84,   85,  208,  441,  185,  190,   84,   85,
      196,  228,   84,   85,  200,  557,  197,   77,   84,   85,
      201,  518,   84,   85,  115,  204,   84,   85,  519,  209,
      225,  205,  229,   84,   85,  198,  195,   84,   85,  202,
      199,   77,   84,   85,  203,  212,  209,  556,   89,  226,
      206,   90,   91,   92,  225,  207,   93,  185,  185,  213,

      283,  174,   94,   95,   96,   97,   98,   99,  555,  100,
      212,  101,  102,  227,   84,   85,  103,  104,  105,  198,
      554,  106,  574,  214,  199,  547,  107,  108,  109,  110,
      111,   99,  123,  112,   83,  101,  113,   83,  546,   84,
       85,   83,   83,   83,   84,   85,   83,   83,  215,   83,
       74,   83,   83,   84,   85,  216,  202,  545,   84,   85,
      164,  203,   76,  285,  181,  217,  544,   84,   85,   84,
       85,   84,   85,  218,   84,   85,   65,  184,   66,  284,
      219,   84,   85,  239,  243,   84,   85,   84,   85,  217,
      301,   84,   85,   84,   85,  206,  221,  212,  543,  222,

      207,   83,   83,   83,   83,  211,   84,   85,   83,   83,
       83,   84,   85,   83,  116,   83,  117,  118,   83,   83,
      223,  300,  212,  224,  223,  227,  574,  224,  521,   84,
       85,  542,  217,  299,  522,  214,  123,  535,   83,  534,
      218,  295,   84,   85,   83,   84,   85,  219,  239,  239,
      359,  245,  246,  245,   84,   85,  217,  293,  294,   84,
       85,   84,   85,   84,   85,  533,   84,   85,   83,  395,
       83,   83,   84,   85,  359,   83,   83,  120,   84,   85,
       83,   83,  121,  122,  123,   83,   83,  239,  244,   84,
       85,  296,  306,  395,  297,   84,   85,  302,  532,  307,

       84,   85,  304,  531,  303,  308,   84,   85,  530,  305,
      523,   83,  520,  309,   84,   85,  501,  311,  298,   84,
       85,   84,   85,  310,   84,   85,   84,   85,   84,   85,
       84,   85,   84,   85,   89,   83,  313,   83,   83,   84,
       85,   74,   83,   83,  120,   84,   85,   83,   83,  121,
      122,  125,   83,  126,  316,  314,   84,   85,  500,  318,
       83,  234,   84,   85,  574,  319,  312,  513,   84,   85,
       84,   85,  512,  317,  315,   84,   85,   74,   83,  320,
      333,   84,   85,  323,   84,   85,  511,  220,  510,  126,
      324,   84,   85,   84,   85,   84,   85,   84,   85,  327,

       84,   85,   83,  320,   83,  127,   77,   77,   77,  127,
      127,  130,  128,  129,  127,  127,  131,  132,  133,  127,
      127,  321,   84,   85,  328,  322,   83,  235,  330,  325,
      352,   69,   83,  237,   77,   77,   77,  326,   66,  284,
      128,  129,  185,  187,  181,  127,  298,  501,  183,  500,
      329,  285,  181,  574,  352,  499,  353,  245,  246,  245,
       84,   85,  498,  293,  294,   84,   85,   84,   85,  127,
      497,   83,   83,   84,   85,  495,   83,   83,   83,   84,
       85,   83,   83,  494,   83,  367,   83,   83,  450,  185,
      186,   84,   85,   84,   85,  185,  188,   84,   85,   83,

      185,  366,  481,  185,  188,  185,  366,   84,   85,   84,
       85,  480,   84,   85,   84,   85,   84,   85,   84,   85,
       84,   85,  479,  372,   84,   85,   84,   85,  368,  370,
      369,  371,  374,  377,  478,  382,   83,   83,   83,   83,
      375,  477,  376,   83,   83,   83,   84,   85,   83,   83,
       83,   83,  230,   83,   83,  476,  381,  373,   84,   85,
      378,   84,   85,   84,   85,   84,   85,   84,   85,   84,
       85,  475,   84,   85,   84,   85,   84,   85,  474,   83,
       84,   85,   84,   85,  473,  385,   84,   85,  472,   84,
       85,   84,   85,   84,   85,  383,   84,   85,  379,   84,

       85,  384,  238,   83,  386,   83,   83,  471,   84,   85,
       83,   83,   83,   84,   85,   83,  116,   83,  117,  232,
       83,   83,  379,  388,  380,   84,   85,  395,  386,  389,
      470,  327,  450,  387,   84,   85,   83,  237,  239,  393,
      391,   84,   85,  449,  390,  448,   83,   84,   85,   84,
       85,  395,   84,   85,  239,  393,   84,   85,   84,   85,
       84,   85,  447,  413,  446,  415,   84,   85,  445,  414,
       83,  414,   83,   83,   84,   85,  444,   83,   83,   83,
       84,   85,   83,   83,   83,   83,  417,   83,   83,   84,
       85,   84,   85,  414,  416,  414,  443,   84,   85,  496,

       84,   85,  418,  421,  419,   84,   85,   84,   85,   84,
       85,   84,   85,   83,  420,   84,   85,   84,   85,  442,
      427,   84,   85,  496,   84,   85,   84,   85,  439,   84,
       85,   84,   85,   84,   85,  425,  438,   83,  422,   83,
       83,   84,   85,  423,   83,   83,  120,   84,   85,   83,
       83,   83,   83,   83,   83,   83,  428,  424,  429,   84,
       85,  426,  116,  453,  431,   84,   85,   84,   85,   84,
       85,  435,  430,   84,   85,   84,   85,   84,   85,  454,
       83,   84,   85,   84,   85,   84,   85,  455,  451,   84,
       85,  434,  458,  433,  456,   84,   85,   84,   85,   84,

       85,  457,   84,   85,   83,  432,   83,   83,  469,  179,
      466,   83,   83,   83,   84,   85,   83,   83,   83,   83,
      452,   83,   83,   84,   85,  283,  459,   84,   85,  462,
       84,   85,  460,   84,   85,  461,  411,  464,  410,  467,
      463,  409,  465,   84,   85,   84,   85,   83,   84,   85,
       84,   85,   84,   85,   84,   85,  408,   84,   85,   84,
       85,  482,   84,   85,   84,   85,   84,   85,  468,   84,
       85,   83,  407,   83,   83,  406,  487,  484,   83,   83,
       83,   84,   85,   83,   83,   83,   83,  236,   83,   83,
      486,  405,  490,   84,   85,  483,  404,  488,   84,   85,

      403,   84,   85,  402,  485,  401,  492,   84,   85,   84,
       85,  400,  489,  399,   83,   84,   85,   84,   85,   84,
       85,  469,   84,   85,   84,   85,   84,   85,   84,   85,
      398,   84,   85,   84,   85,   84,   85,  503,   83,  493,
       83,   83,  397,   84,   85,   83,   83,   83,   84,   85,
       83,   83,   83,  238,  491,   83,   83,  502,  515,  504,
       84,   85,   84,   85,  505,  506,   84,   85,  508,   84,
       85,  396,  509,   84,   85,   84,   85,  394,   84,   85,
      333,   83,  514,  504,   84,   85,   84,   85,   84,   85,
      508,  574,   84,   85,  509,   84,   85,   84,   85,   84,

       85,  246,   84,   85,  246,   83,  507,   83,   83,   84,
       85,   74,   83,   83,   83,   84,   85,   83,   83,   83,
      238,  125,   83,  126,  516,  517,  526,  524,  181,   84,
       85,  537,   84,   85,  525,  527,   84,   85,   84,   85,
      364,  528,  536,   84,   85,   84,   85,  548,   83,   84,
       85,  363,  529,  362,  538,   84,   85,   84,   85,   84,
       85,   84,   85,  279,   84,   85,  549,   84,   85,   84,
       85,  361,   83,  360,   83,   83,  539,   84,   85,   83,
       83,  120,   84,   85,   83,   83,   83,   83,   83,   83,
       83,  541,  550,  551,  358,  560,  540,  552,   84,   85,

      357,   84,   85,  561,  356,   84,   85,   84,   85,   84,
       85,  553,  355,  563,  570,   83,   84,   85,  354,  564,
      351,   84,   85,  350,  562,  347,   84,   85,   84,   85,
       84,   85,   84,   85,  346,  345,  344,  343,  342,  239,
      240,   83,   83,  341,  179,  340,   83,   83,   83,   84,
       85,   83,   83,   83,   83,  565,   83,   83,  571,  572,
      246,  332,  231,  184,  574,  573,  183,  574,  574,   69,
      283,  282,  250,  281,  280,  279,  278,  277,  276,  275,
      274,  273,   83,  271,  270,   38,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  258,  255,  254,  253,  252,

      251,  248,  247,  246,  184,  183,  239,  241,   83,   83,
      181,  179,   69,   83,   83,   83,   84,   85,   83,   83,
       83,   83,  236,   83,   83,  174,  173,   64,  171,  155,
      153,  137,   38,  135,   64,   37,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,   83,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  239,  242,   83,   77,   77,   77,   77,
       77,   77,   78,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,   77,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  574,   77,   77,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,   77,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  288,  289,
       77,   77,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,   77,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  291,  574,   77,   77,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,   77,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,   77,   77,   77,   77,   77,
       77,   77,   78,   77,   77,   77,   77,   79,   80,   81,
       77,   77,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,   77,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

       77,   83,  574,  574,  574,   83,   83,   83,   84,   85,
       83,   83,   83,  331,  230,   83,   83,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,   83,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,   83,  574,   83,   83,  574,
      574,  574,   83,   83,   83,   84,   85,   83,   83,   83,
       83,  574,   83,   83,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,   83,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,   83,  574,   83,   83,  574,  574,  574,   83,
       83,   83,   84,   85,   83,   83,   83,  238,  574,   83,
       83,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,   83,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,   83,

      574,   83,   83,  574,  574,  574,   83,   83,   83,   84,
       85,   83,   83,   83,   83,  574,   83,   83,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,   83,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,   83,  574,   83,  127,
       77,   77,   77,  127,  127,  130,  128,  129,  127,  127,
      127,  127,  127,  127,  127,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  127,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  127,  574,   83,  127,   77,   77,   77,
      127,  127,  127,  128,  129,  127,  127,  127,  127,  574,
      127,  127,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  127,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      127,  574,   83,  127,   77,   77,   77,  127,  127,  127,
      128,  129,  127,  127,  127,  336,  337,  127,  127,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  127,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  127,  574,   83,
      127,   77,   77,   77,  127,  127,  127,  128,  129,  127,
      127,  127,  339,  574,  127,  127,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      127,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  127,  574,   83,  127,   77,   77,
       77,  127,  127,  130,  128,  129,  127,  127,  131,  132,
      133,  127,  127,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  127,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  127,  574,   83,   83,  574,  574,  574,   83,   83,
       83,   84,   85,   83,   83,   83,   83,  574,   83,   83,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,   83,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,   83,  574,
       83,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  291,  574,   77,   77,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,   77,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,   77,   83,  574,  574,  574,
       83,   83,   83,   84,   85,   83,   83,   83,  331,  574,
       83,   83,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,   83,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

       83,  574,   83,  127,   77,   77,   77,  127,  127,  127,
      128,  129,  127,  127,  127,  339,  574,  127,  127,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  127,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  127,  574,   83,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   63,  574,   63,   63,

       63,   68,  574,   68,   68,   68,  574,  574,   68,   73,
      574,   73,   73,   73,   73,  574,  574,   73,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   83,  574,  574,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,  114,  574,  574,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  119,  574,
      574,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  124,  574,  574,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      175,  175,  574,  574,  175,  177,  177,  574,  574,  177,
      178,  574,  574,  574,  574,  178,  574,  574,  178,  180,
      574,  574,  574,  574,  180,  180,  574,  574,  180,  182,
      182,  574,  574,  182,   72,   72,   72,  574,  574,   72,
      231,  574,  574,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  233,  574,  574,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  234,  574,  574,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  235,

      574,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  237,  574,  574,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  123,  574,  574,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  181,  181,  181,  574,  574,  181,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  236,  574,  574,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  365,  365,  574,  574,
      365,   68,   68,   68,  574,  574,   68,  178,  574,  574,
      574,  574,  178,  574,  178,  178,  180,  180,  574,  180,
      180,  181,  181,  181,  574,  181,  181,  392,  574,  574,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,    9,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574
    } ;

static yyconst short int yy_chk[3384] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    6,
        6,    6,    5,    5,    0,    6,    6,    7,    7,    7,
       21,   21,    1,    7,    7,    8,    8,    8,   30,   30,
        1,    8,    8,   15,   17,   15,   15,   83,   83,   17,
       17,   17,   22,   22,   22,  144,    1,   28,   28,   22,
       23,   23,  144,   28,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   18,  146,   40,   18,   39,   41,   44,
      146,   18,   18,   18,   41,   18,   23,   45,   50,    2,

       42,   53,   33,   33,   33,   48,   42,    2,   33,   33,
       40,   39,  559,   41,   44,   48,   74,   48,   41,   54,
      399,   45,   50,    2,   54,   42,   53,  399,   74,   51,
       42,    2,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       43,   46,   47,   51,   49,   55,   43,   49,   56,   47,
       55,   77,   77,   56,   60,   46,    3,   33,   61,   47,
       80,   61,   60,   79,    3,   43,   46,   47,   49,   60,
       43,   49,  558,   67,   47,   67,   67,   78,   60,   46,
        3,   81,   59,   47,  103,  103,  128,  128,    3,    3,

        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,   59,   73,   75,
      556,   80,   80,   73,   73,   73,   89,   89,   75,   75,
       59,   75,   89,    4,   88,   79,   79,   88,   88,  332,
      103,    4,  332,   81,   81,   78,   78,   86,   86,   86,
      124,   99,   96,   96,   86,   99,   99,    4,   90,   90,
      124,   99,  124,   99,  555,    4,    4,    4,   12,   91,
       91,   12,   12,   12,  547,   96,   12,  257,   91,  257,
       90,  138,   12,   12,   12,   12,   12,   12,   82,   12,
      161,   12,   12,   82,   82,   82,   12,   12,   12,   96,

      364,   12,  364,   91,   90,  138,   12,   12,   12,   12,
       12,   12,  546,   12,  161,   12,   12,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   92,   92,   95,   95,   93,   93,  403,
      101,  101,  104,  104,   95,  403,   82,   82,   94,   94,
       92,  104,  108,  108,   93,  545,   92,   20,  115,  115,
       93,  510,  102,  102,  115,   94,  116,  116,  510,   95,
      101,   94,  116,   97,   97,   92,  104,  105,  105,   93,
       92,   20,   24,   24,   93,   97,  108,  544,   24,  102,
       94,   24,   24,   24,  101,   94,   24,  129,  129,   97,

      174,  174,   24,   24,   24,   24,   24,   24,  543,   24,
       97,   24,   24,  102,  106,  106,   24,   24,   24,  105,
      542,   24,  133,   97,  105,  535,   24,   24,   24,   24,
       24,   24,  133,   24,  133,   24,   24,   27,  534,   98,
       98,   27,   27,   27,   27,   27,   27,   27,   98,   27,
      164,   27,   27,  107,  107,   98,  106,  533,  109,  109,
      164,  106,  164,  182,  182,   98,  532,  100,  100,  197,
      197,  112,  112,   98,  113,  113,  176,  126,  176,  176,
       98,  126,  126,  133,  133,  110,  110,  195,  195,   98,
      197,  127,  127,  196,  196,  107,  100,  110,  531,  100,

      107,   27,   27,   27,   29,  109,  111,  111,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      100,  196,  110,  100,  112,  113,  134,  112,  512,  192,
      192,  530,  111,  195,  512,  110,  134,  523,  134,  522,
      111,  192,  213,  213,   29,  198,  198,  111,  127,  127,
      272,  191,  191,  191,  193,  193,  111,  191,  191,  199,
      199,  202,  202,  203,  203,  521,  201,  201,   29,  341,
       29,   31,  194,  194,  272,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,  134,  134,  200,
      200,  193,  201,  341,  194,  204,  204,  198,  520,  202,

      207,  207,  200,  519,  199,  202,  205,  205,  518,  200,
      513,   31,  511,  203,  206,  206,  501,  205,  194,  209,
      209,  211,  211,  204,  208,  208,  210,  210,  212,  212,
      214,  214,  215,  215,  212,   31,  207,   31,   32,  216,
      216,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,  210,  208,  217,  217,  500,  215,
      234,  234,  221,  221,  235,  216,  206,  497,  222,  222,
      218,  218,  496,  211,  209,  219,  219,  220,   32,  217,
      237,  220,  220,  221,  223,  223,  495,  220,  494,  220,
      222,  224,  224,  225,  225,  226,  226,  227,  227,  225,

      228,  228,   32,  217,   32,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  218,  229,  229,  226,  219,  235,  235,  229,  223,
      260,  286,  237,  237,  239,  239,  239,  224,  284,  284,
      239,  239,  287,  287,  288,   34,  228,  481,  289,  480,
      227,  290,  290,  291,  260,  479,  260,  292,  292,  292,
      295,  295,  478,  292,  292,  296,  296,  302,  302,   34,
      477,   34,  114,  297,  297,  475,  114,  114,  114,  114,
      114,  114,  114,  474,  114,  297,  114,  114,  450,  286,
      286,  298,  298,  299,  299,  288,  288,  300,  300,  239,

      289,  289,  448,  290,  290,  291,  291,  301,  301,  303,
      303,  446,  304,  304,  305,  305,  307,  307,  309,  309,
      306,  306,  445,  302,  310,  310,  311,  311,  298,  300,
      299,  301,  304,  306,  444,  311,  114,  114,  114,  117,
      305,  443,  305,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  442,  309,  303,  312,  312,
      307,  313,  313,  314,  314,  315,  315,  316,  316,  317,
      317,  439,  308,  308,  318,  318,  319,  319,  438,  117,
      320,  320,  321,  321,  435,  319,  323,  323,  434,  322,
      322,  324,  324,  325,  325,  313,  326,  326,  308,  329,

      329,  318,  337,  117,  320,  117,  118,  433,  328,  328,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  308,  322,  308,  327,  327,  342,  320,  328,
      432,  327,  412,  321,  330,  330,  333,  333,  339,  339,
      330,  367,  367,  411,  329,  410,  118,  368,  368,  369,
      369,  342,  370,  370,  337,  337,  371,  371,  372,  372,
      373,  373,  409,  367,  408,  371,  378,  378,  407,  368,
      118,  369,  118,  119,  374,  374,  406,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  374,  119,  119,  375,
      375,  376,  376,  368,  373,  369,  405,  377,  377,  476,

      379,  379,  375,  378,  376,  380,  380,  382,  382,  383,
      383,  384,  384,  119,  377,  381,  381,  386,  386,  404,
      384,  388,  388,  476,  387,  387,  389,  389,  401,  385,
      385,  390,  390,  416,  416,  382,  400,  119,  379,  119,
      120,  415,  415,  380,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  385,  381,  387,  391,
      391,  383,  391,  415,  391,  413,  413,  417,  417,  418,
      418,  397,  388,  414,  414,  419,  419,  420,  420,  416,
      120,  421,  421,  422,  422,  423,  423,  418,  413,  424,
      424,  396,  420,  395,  418,  426,  426,  428,  428,  429,

      429,  419,  431,  431,  120,  394,  120,  121,  431,  121,
      428,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      414,  121,  121,  425,  425,  365,  422,  427,  427,  424,
      430,  430,  422,  451,  451,  423,  361,  426,  360,  429,
      425,  358,  427,  452,  452,  453,  453,  121,  454,  454,
      455,  455,  456,  456,  458,  458,  357,  457,  457,  459,
      459,  451,  460,  460,  461,  461,  462,  462,  430,  463,
      463,  121,  356,  121,  122,  355,  458,  453,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      457,  354,  463,  465,  465,  452,  353,  461,  466,  466,

      352,  467,  467,  351,  454,  350,  465,  464,  464,  468,
      468,  349,  462,  348,  122,  469,  469,  482,  482,  483,
      483,  469,  484,  484,  485,  485,  487,  487,  489,  489,
      347,  486,  486,  488,  488,  503,  503,  487,  122,  467,
      122,  123,  346,  490,  490,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  464,  123,  123,  486,  503,  488,
      491,  491,  492,  492,  489,  490,  493,  493,  492,  502,
      502,  344,  493,  506,  506,  507,  507,  340,  505,  505,
      338,  123,  502,  488,  508,  508,  504,  504,  509,  509,
      508,  335,  516,  516,  509,  560,  560,  515,  515,  517,

      517,  294,  525,  525,  293,  123,  491,  123,  125,  514,
      514,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  504,  505,  515,  514,  285,  524,
      524,  525,  526,  526,  514,  516,  536,  536,  527,  527,
      282,  516,  524,  528,  528,  529,  529,  536,  125,  537,
      537,  281,  517,  280,  526,  540,  540,  539,  539,  541,
      541,  551,  551,  279,  538,  538,  537,  548,  548,  552,
      552,  274,  125,  273,  125,  130,  527,  549,  549,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  529,  538,  539,  271,  548,  528,  540,  550,  550,

      270,  561,  561,  549,  265,  553,  553,  563,  563,  565,
      565,  541,  263,  551,  561,  130,  570,  570,  261,  552,
      259,  564,  564,  258,  550,  256,  562,  562,  571,  571,
      572,  572,  573,  573,  255,  254,  253,  252,  251,  130,
      130,  130,  131,  250,  131,  249,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  553,  131,  131,  562,  564,
      245,  232,  231,  184,  183,  565,  181,  180,  179,  178,
      175,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      163,  162,  131,  160,  159,  156,  155,  154,  153,  152,
      151,  150,  149,  148,  147,  145,  143,  142,  141,  140,

      139,  137,  136,  135,   76,   72,  131,  131,  131,  132,
       71,   70,   69,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   66,   65,   64,   62,   58,
       57,   52,   38,   37,   14,   11,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  132,  132,  132,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  186,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      186,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,    0,  187,  187,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  187,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  187,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  188,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      188,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,    0,  189,  189,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  189,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  189,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  190,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      190,  230,    0,    0,    0,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  230,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  230,    0,  230,  233,    0,
        0,    0,  233,  233,  233,  233,  233,  233,  233,  233,
      233,    0,  233,  233,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  233,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  233,    0,  233,  236,    0,    0,    0,  236,
      236,  236,  236,  236,  236,  236,  236,  236,    0,  236,
      236,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  236,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  236,

        0,  236,  238,    0,    0,    0,  238,  238,  238,  238,
      238,  238,  238,  238,  238,    0,  238,  238,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  238,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  238,    0,  238,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  240,    0,  240,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,    0,
      241,  241,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  241,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      241,    0,  241,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  242,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  242,    0,  242,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,    0,  243,  243,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      243,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  243,    0,  243,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  244,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  244,    0,  244,  331,    0,    0,    0,  331,  331,
      331,  331,  331,  331,  331,  331,  331,    0,  331,  331,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  331,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  331,    0,
      331,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,    0,  366,  366,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  366,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  366,  392,    0,    0,    0,
      392,  392,  392,  392,  392,  392,  392,  392,  392,    0,
      392,  392,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  392,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      392,    0,  392,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,    0,  393,  393,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  393,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  393,    0,  393,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,    0,  577,  577,

      577,  578,    0,  578,  578,  578,    0,    0,  578,  579,
        0,  579,  579,  579,  579,    0,    0,  579,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  582,    0,    0,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  583,    0,    0,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  584,    0,
        0,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  585,    0,    0,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      588,  588,    0,    0,  588,  589,  589,    0,    0,  589,
      590,    0,    0,    0,    0,  590,    0,    0,  590,  591,
        0,    0,    0,    0,  591,  591,    0,    0,  591,  592,
      592,    0,    0,  592,  593,  593,  593,    0,    0,  593,
      594,    0,    0,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  595,    0,    0,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  596,    0,    0,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  597,

        0,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  598,    0,    0,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  599,    0,    0,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  601,  601,  601,    0,    0,  601,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  609,    0,    0,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  617,  617,    0,    0,
      617,  618,  618,  618,    0,    0,  618,  619,    0,    0,
        0,    0,  619,    0,  619,  619,  620,  620,    0,  620,
      620,  621,  621,  621,    0,  621,  621,  622,    0,    0,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "utility/src/InQueryOpParser.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 5 "utility/src/InQueryOpParser.l"

/*==========================================================================
 * Copyright (c) 2002 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.cs.cmu.edu/~lemur/license.html
 *
 *==========================================================================
*/

#include "InQueryOpParser.hpp"

#include <cstring>
#include <cctype>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <fstream>

#define ON   1
#define OFF  0
#define WORD 2
#define LEFT_PAREN 3
#define RIGHT_PAREN 4
#define AND 7
#define BOOLEANAND 8
#define BOOLEANAND_NOT 9
#define FILTER_REQUIRE 10
#define FILTER_REJECT 11
#define FIELD_OP 12
#define LITERAL 13
#define MAX_OP 14
#define NOT 17
#define ODN 18
#define OR 19
#define PARSUMN 20
#define PHRASE 21
#define SUM 22
#define SYN 23
#define UWN 24
#define WSUM 25
#define NUMBER 26
#define QBEGIN 30
#define QEND 31
#define PROP 32

/* PAREN OPERATIONS:
 * NL_LPAREN :   called when a left paren is seen.  If paren_stack is 
 *		empty, we're not inside an operator so this is a 
 *              Natural Language paren.  If paren_stack is not empty, 
 *		but PARENLEVEL is zero, then the paren we're seeing 
 *		is the operator's left paren; if the PARENLEVEL is > 0, 
 *		then again it's a natural language paren we're looking at.
 *              RESULT: returns 1 if this is a Natural Language left paren.
 *              SIDE EFFECT: increments PARENLEVEL
 * NL_RPAREN;   see above.
 *              RESULT: returns 1 if this is a Natural Language right paren.
 *		SIDE EFFECT: decrements PARENLEVEL
 */

int paren_stack[NESTING_LIMIT];
int paren_stack_top=0;
char wsize[30];
#define push_paren_stack(op) {paren_stack[paren_stack_top++]=op;}
#define pop_paren_stack() {if(paren_stack_top>0)paren_stack_top--;}
#define parseError(msg) {cout << msg << endl; exit(1); }

char * getsize() { 
  int l=yyleng; 
  strcpy(wsize, yytext); 
  while(!isdigit(wsize[l-1])) l--;  
  wsize[l]='\0';
  l=0;
  while(!isdigit(wsize[l])) l++; 
  return &wsize[l];
}


#define LIT 1
#define OP 2
#define NEST 3

#line 1416 "utility/src/InQueryOpParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 117 "utility/src/InQueryOpParser.l"



#line 1571 "utility/src/InQueryOpParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 575 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3316 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 120 "utility/src/InQueryOpParser.l"
{ /* parens jammed together */
    push_paren_stack(LIT); 
    return LEFT_PAREN; 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 125 "utility/src/InQueryOpParser.l"
{ /* NL paren? */ /* words and parens jammed together */
  if(yyleng>1) {
    yytext[yyleng-1]='\0';
    yyless(yyleng-1);
    return WORD;
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 134 "utility/src/InQueryOpParser.l"
{
  pop_paren_stack();
  if(paren_stack_top>0)
    BEGIN(paren_stack[paren_stack_top]);
  else 
   BEGIN(0);
  return RIGHT_PAREN;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "utility/src/InQueryOpParser.l"
{
  return  WORD;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 147 "utility/src/InQueryOpParser.l"
{; /* delimiters */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 149 "utility/src/InQueryOpParser.l"
{
                            push_paren_stack(OP);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 153 "utility/src/InQueryOpParser.l"
{
                            push_paren_stack(NEST);
                            return LEFT_PAREN;
                          /* else just erase it */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 158 "utility/src/InQueryOpParser.l"
{ /* Ignore comments */ }
	YY_BREAK
case 9:
#line 161 "utility/src/InQueryOpParser.l"
case 10:
YY_RULE_SETUP
#line 161 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (AND); }
	YY_BREAK
case 11:
#line 164 "utility/src/InQueryOpParser.l"
case 12:
YY_RULE_SETUP
#line 164 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND); }
	YY_BREAK
case 13:
#line 167 "utility/src/InQueryOpParser.l"
case 14:
YY_RULE_SETUP
#line 167 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (BOOLEANAND_NOT); }
	YY_BREAK
case 15:
#line 171 "utility/src/InQueryOpParser.l"
case 16:
#line 172 "utility/src/InQueryOpParser.l"
case 17:
#line 173 "utility/src/InQueryOpParser.l"
case 18:
YY_RULE_SETUP
#line 173 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (FILTER_REQUIRE); }
	YY_BREAK
case 19:
#line 176 "utility/src/InQueryOpParser.l"
case 20:
#line 177 "utility/src/InQueryOpParser.l"
case 21:
#line 178 "utility/src/InQueryOpParser.l"
case 22:
YY_RULE_SETUP
#line 178 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (FILTER_REJECT); }
	YY_BREAK
case 23:
#line 182 "utility/src/InQueryOpParser.l"
case 24:
#line 183 "utility/src/InQueryOpParser.l"
case 25:
#line 184 "utility/src/InQueryOpParser.l"
case 26:
#line 185 "utility/src/InQueryOpParser.l"
case 27:
#line 186 "utility/src/InQueryOpParser.l"
case 28:
#line 187 "utility/src/InQueryOpParser.l"
case 29:
#line 188 "utility/src/InQueryOpParser.l"
case 30:
#line 189 "utility/src/InQueryOpParser.l"
case 31:
YY_RULE_SETUP
#line 189 "utility/src/InQueryOpParser.l"
{ 
			  /* User keyword/generics are prefixed with a 
			   * "*".   "#" is old-style, retained for 
			   * compatibility.
			   */

			  return  WORD; }
	YY_BREAK
case 32:
#line 198 "utility/src/InQueryOpParser.l"
case 33:
YY_RULE_SETUP
#line 198 "utility/src/InQueryOpParser.l"
{ /* field operator */
                          BEGIN(OP);
                          return (FIELD_OP);
                        }
	YY_BREAK
case 34:
#line 204 "utility/src/InQueryOpParser.l"
case 35:
YY_RULE_SETUP
#line 204 "utility/src/InQueryOpParser.l"
{ /* literal operator */
                          BEGIN LIT;
                          return(LITERAL);
                        }
	YY_BREAK
case 36:
#line 210 "utility/src/InQueryOpParser.l"
case 37:
YY_RULE_SETUP
#line 210 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (MAX_OP); }
	YY_BREAK
case 38:
#line 214 "utility/src/InQueryOpParser.l"
case 39:
YY_RULE_SETUP
#line 214 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (NOT); }
	YY_BREAK
case 40:
#line 218 "utility/src/InQueryOpParser.l"
case 41:
YY_RULE_SETUP
#line 218 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (OR); }
	YY_BREAK
case 42:
#line 222 "utility/src/InQueryOpParser.l"
case 43:
YY_RULE_SETUP
#line 222 "utility/src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (PARSUMN);
			}
	YY_BREAK
case 44:
#line 228 "utility/src/InQueryOpParser.l"
case 45:
YY_RULE_SETUP
#line 228 "utility/src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (PHRASE);
			}
	YY_BREAK
case 46:
#line 234 "utility/src/InQueryOpParser.l"
case 47:
YY_RULE_SETUP
#line 234 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (SUM); }
	YY_BREAK
case 48:
#line 238 "utility/src/InQueryOpParser.l"
case 49:
YY_RULE_SETUP
#line 238 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (SYN); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "utility/src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (ODN);
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 245 "utility/src/InQueryOpParser.l"
{ 
			  BEGIN(NEST);
                          return (PROP);
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 250 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
			  return (UWN);
			}
	YY_BREAK
case 53:
#line 255 "utility/src/InQueryOpParser.l"
case 54:
YY_RULE_SETUP
#line 255 "utility/src/InQueryOpParser.l"
{ BEGIN(NEST);
                          return (WSUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 258 "utility/src/InQueryOpParser.l"
{ /* end of query token */
			  return QEND;
                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 262 "utility/src/InQueryOpParser.l"
{ /* end of query token */
			  return QBEGIN;
                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 266 "utility/src/InQueryOpParser.l"
{
                          return (NUMBER);
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 270 "utility/src/InQueryOpParser.l"
{ 
                          return  WORD;
                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 274 "utility/src/InQueryOpParser.l"
{ /* Ignore unexpected stuff */ 
                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "utility/src/InQueryOpParser.l"
ECHO;
	YY_BREAK
#line 1943 "utility/src/InQueryOpParser.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LIT):
case YY_STATE_EOF(OP):
case YY_STATE_EOF(NEST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 67);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 575 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 67;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 575 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 574);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 277 "utility/src/InQueryOpParser.l"


InQueryOpParser::InQueryOpParser() {
  state = 0;
}

void InQueryOpParser::finishing_nesting_qnote(int top) {
  int tok;
  while((tok=(int)InQuerylex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(paren_stack_top == top)
	return;
    }
    else
      parseQryNode(tok);
  }
}


void InQueryOpParser::parseNestingOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseNestingOp: missing LEFT_PAREN");
  }
  return;
}

void InQueryOpParser::finishing_prox_qnote(int top) {
  int tok;
  while((tok=(int)InQuerylex())) {
    if(tok == RIGHT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
      if(paren_stack_top == top)
	return;
    }
    else
      parseProxNode(tok);
  }
}

void InQueryOpParser::parseProxOp(char *op, char *size) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InQueryOpParser::parsePassageOp(char *op, char *size) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
      textHandler->foundSymbol(size);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_nesting_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InQueryOpParser::parseSynOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parseProxOp: missing LEFT_PAREN");
  }
  return;
}

void InQueryOpParser::parsePropOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) {
      textHandler->foundSymbol(op);
    }
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      finishing_prox_qnote(paren_stack_top-1);
    }
    else 
      parseError (" parsePropOp: missing LEFT_PAREN");
  }
  return;
}

void InQueryOpParser::parseTermOp(char *op) {
  if (state) {
    int nxtok=InQuerylex();
    if (textHandler != NULL) textHandler->foundSymbol(op);
    if(nxtok == LEFT_PAREN) {
      if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
      while((nxtok=(int)InQuerylex())) {
	switch(nxtok) {
	case NUMBER:
	case WORD:
	  if (textHandler != NULL) textHandler->foundWord(InQuerytext);
	  break;

	case LITERAL:
	  parseQryNode(nxtok);
	  break;

	case RIGHT_PAREN:
	  if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	  return;
	default:
	  parseError (" parseTermOp: Syntax error");
	}
      }
    }
    else 
      parseError (" parseTermOp: missing LEFT_PAREN");
  }
  return;
}

void InQueryOpParser::parseProxNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InQuerytext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InQuerytext);
      }
      return;
      break;

    case ODN:
      parseProxOp("#ODN", getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", getsize());
      break;

  case PROP:
    parsePropOp("#PROP"); // should have its own parse method.
      break;
  
  default:
    parseError ("parseProxNode: PARSE ERROR: proximity op allows only prox child");
    }
}


void InQueryOpParser::parseQryNode(int tok) {
  int l;
  switch(tok) {
    case NUMBER:         
    case WORD:
      if (state) {
        // convert word to lowercase and pass it on
	for (char * c = InQuerytext; *c != '\0'; c++)
	  *(c) = tolower(*c);
	if (textHandler != NULL) textHandler->foundWord(InQuerytext);
      }
      return;
      break;

    case AND:
      parseNestingOp("#AND");
      break;
    case OR:
      parseNestingOp("#OR");
      break;
    case BOOLEANAND:
      parseNestingOp("#BAND");
      break;
    case BOOLEANAND_NOT:
      parseNestingOp("#BANDNOT");
      break;
    case FILTER_REQUIRE:
      parseNestingOp("#FILTREQ");
      break;

    case FILTER_REJECT:
      parseNestingOp("#FILTREJ");
      break;

    case FIELD_OP:
      parseTermOp("#FIELD");
      break;

    case LITERAL:
      if (state) {
	// useless in Lemur because of no such an indexed term
	int nxtok=(int)InQuerylex();
	if (textHandler != NULL) textHandler->foundSymbol("#LIT");
	if(nxtok == LEFT_PAREN) {
	  if (textHandler != NULL) {
	    textHandler->foundSymbol("LPAREN");
	    if((nxtok=InQuerylex())==WORD)
	      textHandler->foundSymbol(InQuerytext);
	    else
	      parseError ("parseQryNode: #lit needs a term");
	  }
	}
	else
	  parseError ("parseQryNode: #lit needs LEFT_PAREN");
      }
      return;
      break;

    case MAX_OP:
      parseNestingOp("#MAX");
      break;

    case NOT:
      parseNestingOp("#NOT");
      break;

    case ODN:
      parseProxOp("#ODN", getsize());
      break;

    case SYN:
      parseSynOp("#SYN");
      break;

    case UWN:
      parseProxOp("#UWN", getsize());
      break;

    case PARSUMN:
      parsePassageOp("#PASSAGE", getsize());
      break;

    case PHRASE:
      parseProxOp("#ODN", "3");
      break;

    case SUM:
      parseNestingOp("#SUM");
      break;

    case WSUM:
      if (state) {
	int tok, wsum_top;
	if (textHandler != NULL) textHandler->foundSymbol("#WSUM");
	tok=(int)InQuerylex();
	if(tok == LEFT_PAREN) {
	  if (textHandler != NULL) textHandler->foundSymbol("LPAREN");
	  wsum_top=paren_stack_top-1;
	  while((tok=(int)InQuerylex())) {
	    if(tok == RIGHT_PAREN) {
	      if (textHandler != NULL) textHandler->foundSymbol("RPAREN");
	      if(paren_stack_top == wsum_top)
		return;
	      else
		parseError ("parseQryNode: #WSUM unmatched paren");
	    }
	    else if(tok == NUMBER) {
	      // Syntax: #WSUM(w1 q1 w2 q2 ... wn qn)
	      if (textHandler != NULL) textHandler->foundWord(InQuerytext);
	      tok=(int)InQuerylex();
	      parseQryNode(tok);
	    }
	    else
	      parseError ("parseQryNode: #WSUM syntax error");
	  }
	}
	else
	  parseError ("parseQryNode: #WSUM needs a LEFT_PAREN");
      }
      break;
  case PROP:
    parsePropOp("#PROP"); // should have its own parse method.
      break;
  
  default:
      parseError ("parseQryNode: PARSE ERROR: unknown token");
    }
}

long InQueryOpParser::fileTell() {
  int offset = yy_c_buf_p-YY_CURRENT_BUFFER->yy_ch_buf;
  if (InQueryin) {
    long begin = ftell(InQueryin)-YY_CURRENT_BUFFER->yy_n_chars;
    return begin+offset;
  } 
  return offset;
}


void InQueryOpParser::parseBuffer(char* buf, int len) {
  yy_scan_bytes(buf, len);
  doParse();
}

void InQueryOpParser::parseFile(char * filename) {
  
  InQueryin = fopen(filename, "r");
  doParse();
  fclose(InQueryin);
}

void InQueryOpParser::doParse() {
  
  int tok;
  // The core loop of the parser.
  // The parser is state based.  Encountering an op 
  // can transition the machine into another state.
  while (tok = InQuerylex()) {
    switch (tok) {	
    case QEND:
      // end of a query
      if(paren_stack_top>0)
	parseError ("parse: PARSE ERROR: unmatched paren");
      state = 0;
      break;
      
    case QBEGIN: {
      // start a new query, its id is treated as a docid
      char * qid=strdup(InQuerytext);
      char *tofree=qid;
      int ql = strlen(InQuerytext);
      state = 1;
      while(*qid && !isdigit(*qid))
	qid++;
      while(ql > 0 && !isdigit(tofree[ql-1]))
	tofree[--ql]='\0';
      paren_stack_top=0;
      if (textHandler != NULL) textHandler->foundDoc(qid);
      free(tofree);
      break;
    }
    default:
      parseQryNode(tok);
    }
  }
}
