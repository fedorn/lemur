/*==========================================================================
 * Copyright (c) 2004 University of Massachusetts.  All Rights Reserved.
 *
 * Use of the Lemur Toolkit for Language Modeling and Information Retrieval
 * is subject to the terms of the software license set forth in the LICENSE
 * file included with this software, and also available at
 * http://www.lemurproject.org/license.html
 *
 *==========================================================================
 */


//
// count_iterator
//
// March 2004 -- tds
//

#ifndef INDRI_COUNTITERATOR_HPP
#define INDRI_COUNTITERATOR_HPP

#include <indri/greedy_vector>
#include <algorithm>
namespace indri
{
  namespace utility
  {
                      
    template<typename _ObjectType, typename _IterType = typename greedy_vector<_ObjectType>::iterator>
    class count_iterator {
    public:
      struct value_type {
        unsigned int count;
        _ObjectType object;
      };

    private:
      _IterType _begin;
      _IterType _end;
      _IterType _current;

      value_type _value;

      void _buildValue( _ObjectType object ) {
        _value.count = 0;
        _value.object = object;
                                                        
        for( ;  _current != _end; _current++ ) {
          if( (*_current) != object )
            break;

          _value.count++;
        }
      }

    public:
      count_iterator( _IterType begin, _IterType end )
        :
        _begin( begin ),
        _end( end ),
        _current( begin )
      {
        std::sort( _begin, _end );

        if( _current != _end )
          ++(*this);
      }

      const value_type& operator* ( ) {
        return _value;
      }

      const count_iterator& operator++ ( ) {
        assert( _current != _end );
        _buildValue( *_current );
        return *this;
      }
                                                                                                                                                    
      bool operator!= ( _IterType other ) {
        return _current != other;
      }

      bool operator== ( _IterType other ) {
        return _current == other;
      }
    };
  }
}

#endif // INDRI_COUNTITERATOR_HPP
