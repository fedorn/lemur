/* soapStub.h
   Generated by the gSOAP Stub and Skeleton Compiler for C and C++ 2.1.3b
   Copyright (C) 2001-2002 Robert A. van Engelen, Florida State University.
   All rights reserved.
*/
#ifndef soapStub_H
#define soapStub_H
/* Enumerations */

/* Classes and Structs */

struct mindcall__getInternalStatusResponse
{
	char **return_;
};

struct mindcall__getInternalStatus
{
};

class SOAP_CMAC PredicateArray
{ public:
	int __size;
	char **predicate;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__SchemaAttribute
{ public:
	char *name;
	char *datatype;
	char *domain;
	bool metadata;
	bool sample;
	bool surrogate;
	PredicateArray predicates;
	char *mediatype;
	char *description;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC SchemaAttributeArray
{ public:
	int __size;
	mindtype__SchemaAttribute **schemaAttribute;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__Schema
{ public:
	char *name;
	SchemaAttributeArray *attributes;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__Query
{ public:
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__CostParameters
{ public:
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__Content
{ public:
	char *type;
	char *value;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__PropQueryCondition
{ public:
	char *type;
	double weight;
	char *attributename;
	char *predicate;
	mindtype__Content content;
	char *mapping;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC PropQueryConditionArray
{ public:
	int __size;
	mindtype__PropQueryCondition *propCondition;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__PropQuery
{ public:
	char *id;
	mindtype__Schema *schema;
	mindtype__Query *userQuery;
	int numDocs;
	char *resulttype;
	mindtype__CostParameters costParameters;
	PropQueryConditionArray propConditions;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Vector mindtype:SchemaArray schema type: */
class SOAP_CMAC mindtype__SchemaArray
{ public:
	mindtype__Schema *__ptr;
	int __size;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__DocumentID
{ public:
	char *proxyID;
	char *internalID;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__PropDocumentAttribute
{ public:
	char **attributename;
	mindtype__SchemaAttribute *attribute;
	mindtype__Content content;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Vector mindtype:PropDocumentAttributeArray schema type: */
class SOAP_CMAC mindtype__PropDocumentAttributeArray
{ public:
	mindtype__PropDocumentAttribute *__ptr;
	int __size;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__PropDocument
{ public:
	mindtype__DocumentID documentID;
	char **schemaname;
	mindtype__Schema *schema;
	mindtype__PropDocumentAttributeArray attributes;
	double weight;
	double originalWeight;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Vector mindtype:PropDocumentArray schema type: */
class SOAP_CMAC mindtype__PropDocumentArray
{ public:
	mindtype__PropDocument *__ptr;
	int __size;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindtype__PropResult
{ public:
	mindtype__SchemaArray schemas;
	char *resulttype;
	mindtype__PropDocumentArray propDocuments;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__retrieveURLResponse
{
	char **return_;
};

struct mindcall__retrieveURL
{
	char *service;
	char *callerService;
};

class SOAP_CMAC mindcall__queryResponse
{ public:
	mindtype__PropResult *mindtype__return;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__query
{
	mindtype__PropQuery propQuery;
	int numDocs;
};

/* Vector mindtype:FeatureList schema type: */
class SOAP_CMAC mindtype__FeatureList
{ public:
	char **__ptr;
	int __size;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

class SOAP_CMAC mindcall__extractQBSFeaturesResponse
{ public:
	mindtype__FeatureList *mindtype__return;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__extractQBSFeatures
{
	mindtype__PropDocumentAttribute propDocumentAttribute;
};

class SOAP_CMAC mindcall__getSchemaResponse
{ public:
	mindtype__Schema *mindtype__return;
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__getSchema
{
};

class SOAP_CMAC mindcall__setCollectionNumDocsResponse
{ public:
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__setCollectionNumDocs
{
	int nums;
};

class SOAP_CMAC mindcall__clearDocumentsResponse
{ public:
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__clearDocuments
{
};

class SOAP_CMAC mindcall__addDocumentResponse
{ public:
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__addDocument
{
	mindtype__PropDocument propDocument;
};

class SOAP_CMAC mindcall__constructResourceDescriptionResponse
{ public:
	virtual void soap_default(); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual void soap_put(struct soap*, const char*, const char*) const;
	virtual void soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

struct mindcall__constructResourceDescription
{
};

/* SOAP Header: */
#ifndef WITH_NOHEADER
#define WITH_NOHEADER
struct SOAP_ENV__Header
{
	void *dummy;
};
#endif

/* SOAP Fault: */
#ifndef WITH_NOFAULT
#define WITH_NOFAULT
struct SOAP_ENV__Fault
{
	char *faultcode;
	char *faultstring;
	char *faultactor;
	char *detail;
};
#endif

/* Typedefs */

typedef char *xsd__string;

typedef bool xsd__boolean;

typedef int xsd__int;

typedef double xsd__double;

/* Variables */

/* Remote Methods */

SOAP_FMAC1 int SOAP_FMAC2 mindcall__getInternalStatus(struct soap*, char **);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__retrieveURL(struct soap*, char *, char *, char **);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__query(struct soap*, mindtype__PropQuery, int, mindcall__queryResponse *);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__extractQBSFeatures(struct soap*, mindtype__PropDocumentAttribute, mindcall__extractQBSFeaturesResponse *);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__getSchema(struct soap*, mindcall__getSchemaResponse *);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__setCollectionNumDocs(struct soap*, int, mindcall__setCollectionNumDocsResponse *);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__clearDocuments(struct soap*, mindcall__clearDocumentsResponse *);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__addDocument(struct soap*, mindtype__PropDocument, mindcall__addDocumentResponse *);

SOAP_FMAC1 int SOAP_FMAC2 mindcall__constructResourceDescription(struct soap*, mindcall__constructResourceDescriptionResponse *);

/* Remote Method Stubs */

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__getInternalStatus(struct soap*, const char*, const char*, char **);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__retrieveURL(struct soap*, const char*, const char*, char *, char *, char **);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__query(struct soap*, const char*, const char*, mindtype__PropQuery, int, mindcall__queryResponse *);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__extractQBSFeatures(struct soap*, const char*, const char*, mindtype__PropDocumentAttribute, mindcall__extractQBSFeaturesResponse *);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__getSchema(struct soap*, const char*, const char*, mindcall__getSchemaResponse *);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__setCollectionNumDocs(struct soap*, const char*, const char*, int, mindcall__setCollectionNumDocsResponse *);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__clearDocuments(struct soap*, const char*, const char*, mindcall__clearDocumentsResponse *);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__addDocument(struct soap*, const char*, const char*, mindtype__PropDocument, mindcall__addDocumentResponse *);

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__constructResourceDescription(struct soap*, const char*, const char*, mindcall__constructResourceDescriptionResponse *);

/* Remote Method Skeletons */

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__getInternalStatus(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__retrieveURL(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__query(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__extractQBSFeatures(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__getSchema(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__setCollectionNumDocs(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__clearDocuments(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__addDocument(struct soap*);

SOAP_FMAC1 int SOAP_FMAC2 soap_serve_mindcall__constructResourceDescription(struct soap*);
#endif

/* end of soapStub.h */
