/* soapClient.cpp
   Generated by the gSOAP Stub and Skeleton Compiler for C and C++ 2.1.3b
   Copyright (C) 2001-2002 Robert A. van Engelen, Florida State University.
   All rights reserved.
*/
#include "soapH.h"

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__getInternalStatus(struct soap *soap, const char *URL, const char *action, char **return_)
{
	struct mindcall__getInternalStatus soap_tmp_mindcall__getInternalStatus;
	struct mindcall__getInternalStatusResponse *soap_tmp_mindcall__getInternalStatusResponse;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__getInternalStatus(soap, &soap_tmp_mindcall__getInternalStatus);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__getInternalStatus(soap, &soap_tmp_mindcall__getInternalStatus, "mindcall:getInternalStatus", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__getInternalStatus(soap, &soap_tmp_mindcall__getInternalStatus, "mindcall:getInternalStatus", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	soap_default_xsd__string(return_);

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	soap_tmp_mindcall__getInternalStatusResponse = soap_get_mindcall__getInternalStatusResponse(soap, NULL, "mindcall:getInternalStatusResponse", "mindcall:getInternalStatusResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	if (soap_tmp_mindcall__getInternalStatusResponse->return_)
		*return_ = *soap_tmp_mindcall__getInternalStatusResponse->return_;
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__retrieveURL(struct soap *soap, const char *URL, const char *action, char *service, char *callerService, char **return_)
{
	struct mindcall__retrieveURL soap_tmp_mindcall__retrieveURL;
	struct mindcall__retrieveURLResponse *soap_tmp_mindcall__retrieveURLResponse;
	soap_tmp_mindcall__retrieveURL.service=service;
	soap_tmp_mindcall__retrieveURL.callerService=callerService;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__retrieveURL(soap, &soap_tmp_mindcall__retrieveURL);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__retrieveURL(soap, &soap_tmp_mindcall__retrieveURL, "mindcall:retrieveURL", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__retrieveURL(soap, &soap_tmp_mindcall__retrieveURL, "mindcall:retrieveURL", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	soap_default_xsd__string(return_);

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	soap_tmp_mindcall__retrieveURLResponse = soap_get_mindcall__retrieveURLResponse(soap, NULL, "mindcall:retrieveURLResponse", "mindcall:retrieveURLResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	if (soap_tmp_mindcall__retrieveURLResponse->return_)
		*return_ = *soap_tmp_mindcall__retrieveURLResponse->return_;
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__query(struct soap *soap, const char *URL, const char *action, mindtype__PropQuery propQuery, int numDocs, mindcall__queryResponse *result)
{
	struct mindcall__query soap_tmp_mindcall__query;
	soap_tmp_mindcall__query.propQuery=propQuery;
	soap_tmp_mindcall__query.numDocs=numDocs;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__query(soap, &soap_tmp_mindcall__query);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__query(soap, &soap_tmp_mindcall__query, "mindcall:query", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__query(soap, &soap_tmp_mindcall__query, "mindcall:query", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:queryResponse", "mindcall:queryResponse");
	else
		soap_get_mindcall__queryResponse(soap, result, "mindcall:queryResponse", "mindcall:queryResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__extractQBSFeatures(struct soap *soap, const char *URL, const char *action, mindtype__PropDocumentAttribute propDocumentAttribute, mindcall__extractQBSFeaturesResponse *result)
{
	struct mindcall__extractQBSFeatures soap_tmp_mindcall__extractQBSFeatures;
	soap_tmp_mindcall__extractQBSFeatures.propDocumentAttribute=propDocumentAttribute;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__extractQBSFeatures(soap, &soap_tmp_mindcall__extractQBSFeatures);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__extractQBSFeatures(soap, &soap_tmp_mindcall__extractQBSFeatures, "mindcall:extractQBSFeatures", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__extractQBSFeatures(soap, &soap_tmp_mindcall__extractQBSFeatures, "mindcall:extractQBSFeatures", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:extractQBSFeaturesResponse", "mindcall:extractQBSFeaturesResponse");
	else
		soap_get_mindcall__extractQBSFeaturesResponse(soap, result, "mindcall:extractQBSFeaturesResponse", "mindcall:extractQBSFeaturesResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__getSchema(struct soap *soap, const char *URL, const char *action, mindcall__getSchemaResponse *result)
{
	struct mindcall__getSchema soap_tmp_mindcall__getSchema;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__getSchema(soap, &soap_tmp_mindcall__getSchema);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__getSchema(soap, &soap_tmp_mindcall__getSchema, "mindcall:getSchema", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__getSchema(soap, &soap_tmp_mindcall__getSchema, "mindcall:getSchema", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:getSchemaResponse", "mindcall:getSchemaResponse");
	else
		soap_get_mindcall__getSchemaResponse(soap, result, "mindcall:getSchemaResponse", "mindcall:getSchemaResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__setCollectionNumDocs(struct soap *soap, const char *URL, const char *action, int nums, mindcall__setCollectionNumDocsResponse *result)
{
	struct mindcall__setCollectionNumDocs soap_tmp_mindcall__setCollectionNumDocs;
	soap_tmp_mindcall__setCollectionNumDocs.nums=nums;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__setCollectionNumDocs(soap, &soap_tmp_mindcall__setCollectionNumDocs);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__setCollectionNumDocs(soap, &soap_tmp_mindcall__setCollectionNumDocs, "mindcall:setCollectionNumDocs", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__setCollectionNumDocs(soap, &soap_tmp_mindcall__setCollectionNumDocs, "mindcall:setCollectionNumDocs", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:setCollectionNumDocsResponse", "mindcall:setCollectionNumDocsResponse");
	else
		soap_get_mindcall__setCollectionNumDocsResponse(soap, result, "mindcall:setCollectionNumDocsResponse", "mindcall:setCollectionNumDocsResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__clearDocuments(struct soap *soap, const char *URL, const char *action, mindcall__clearDocumentsResponse *result)
{
	struct mindcall__clearDocuments soap_tmp_mindcall__clearDocuments;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__clearDocuments(soap, &soap_tmp_mindcall__clearDocuments);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__clearDocuments(soap, &soap_tmp_mindcall__clearDocuments, "mindcall:clearDocuments", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__clearDocuments(soap, &soap_tmp_mindcall__clearDocuments, "mindcall:clearDocuments", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:clearDocumentsResponse", "mindcall:clearDocumentsResponse");
	else
		soap_get_mindcall__clearDocumentsResponse(soap, result, "mindcall:clearDocumentsResponse", "mindcall:clearDocumentsResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__addDocument(struct soap *soap, const char *URL, const char *action, mindtype__PropDocument propDocument, mindcall__addDocumentResponse *result)
{
	struct mindcall__addDocument soap_tmp_mindcall__addDocument;
	soap_tmp_mindcall__addDocument.propDocument=propDocument;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__addDocument(soap, &soap_tmp_mindcall__addDocument);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__addDocument(soap, &soap_tmp_mindcall__addDocument, "mindcall:addDocument", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__addDocument(soap, &soap_tmp_mindcall__addDocument, "mindcall:addDocument", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:addDocumentResponse", "mindcall:addDocumentResponse");
	else
		soap_get_mindcall__addDocumentResponse(soap, result, "mindcall:addDocumentResponse", "mindcall:addDocumentResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_mindcall__constructResourceDescription(struct soap *soap, const char *URL, const char *action, mindcall__constructResourceDescriptionResponse *result)
{
	struct mindcall__constructResourceDescription soap_tmp_mindcall__constructResourceDescription;
	soap_begin(soap);
	if (!soap->disable_href)
	{	soap_serializeheader(soap);
		soap_serialize_mindcall__constructResourceDescription(soap, &soap_tmp_mindcall__constructResourceDescription);
	}
	if (!soap->disable_request_count)
	{	soap_begin_count(soap);
		soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_mindcall__constructResourceDescription(soap, &soap_tmp_mindcall__constructResourceDescription, "mindcall:constructResourceDescription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	soap_begin_send(soap);
	if (soap_connect(soap, URL, action))
	{
		return soap->error;
	}
	soap_envelope_begin_out(soap);
	soap_putheader(soap);
	soap_body_begin_out(soap);
	soap_put_mindcall__constructResourceDescription(soap, &soap_tmp_mindcall__constructResourceDescription, "mindcall:constructResourceDescription", "");
	soap_body_end_out(soap);
	soap_envelope_end_out(soap);
	soap_end_send(soap);
	if (result)
		result->soap_default();

	/* Get Server Response */
	if (soap_begin_recv(soap))
		return soap->error;
	if (soap_envelope_begin_in(soap))
		return soap->error;
	if (soap_recv_header(soap))
		return soap->error;
	if (soap_body_begin_in(soap))
		return soap->error;
	if (result)
		result->soap_get(soap, "mindcall:constructResourceDescriptionResponse", "mindcall:constructResourceDescriptionResponse");
	else
		soap_get_mindcall__constructResourceDescriptionResponse(soap, result, "mindcall:constructResourceDescriptionResponse", "mindcall:constructResourceDescriptionResponse");
	if (soap->error){
		if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap))
		return soap->error;
	if (soap_envelope_end_in(soap))
		return soap->error;
	soap_closesock(soap);
	soap_end_recv(soap);
	return soap->error;
}

/* end of soapClient.cpp */
